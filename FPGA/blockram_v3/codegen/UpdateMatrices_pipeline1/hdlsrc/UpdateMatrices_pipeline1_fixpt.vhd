-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\USER\Desktop\Farneback_blockRAM\blockram_v2\codegen\UpdateMatrices_pipeline1\hdlsrc\UpdateMatrices_pipeline1_fixpt.vhd
-- Created: 2020-06-19 13:30:52
-- 
-- Generated by MATLAB 9.7, MATLAB Coder 4.3 and HDL Coder 3.15
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 0.5
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- M_1                           ce_out        1
-- M_2                           ce_out        1
-- M_3                           ce_out        1
-- M_4                           ce_out        1
-- M_5                           ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: UpdateMatrices_pipeline1_fixpt
-- Source Path: UpdateMatrices_pipeline1_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.UpdateMatrices_pipeline1_fixpt_pkg.ALL;

ENTITY UpdateMatrices_pipeline1_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        R0_data_1                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En7
        R0_data_2                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En6
        R0_data_3                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En8
        R0_data_4                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En8
        R0_data_5                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En7
        R1_data_1                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En7
        R1_data_2                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En6
        R1_data_3                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En8
        R1_data_4                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En8
        R1_data_5                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En7
        h_cnt                             :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        v_cnt                             :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        ce_out                            :   OUT   std_logic;
        M_1                               :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14_En4
        M_2                               :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En6
        M_3                               :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14_En4
        M_4                               :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En5
        M_5                               :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En4
        );
END UpdateMatrices_pipeline1_fixpt;


ARCHITECTURE rtl OF UpdateMatrices_pipeline1_fixpt IS

  -- Component Declarations
  COMPONENT UpdateMatrices_pipeline1_fixpt_enb_bypass
    PORT( clk_1                           :   IN    std_logic;
          reset_1                         :   IN    std_logic;
          clk_enable_1                    :   IN    std_logic;
          clk_enable_2                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT UpdateMatrices_pipeline1_fixpt_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_2_0                       :   OUT   std_logic;
          enb_1_2_1                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : UpdateMatrices_pipeline1_fixpt_enb_bypass
    USE ENTITY work.UpdateMatrices_pipeline1_fixpt_enb_bypass(rtl);

  FOR ALL : UpdateMatrices_pipeline1_fixpt_tc
    USE ENTITY work.UpdateMatrices_pipeline1_fixpt_tc(rtl);

  FOR ALL : SimpleDualPortRAM_generic
    USE ENTITY work.SimpleDualPortRAM_generic(rtl);

  -- Signals
  SIGNAL enb_1_2_0                        : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_2_1                        : std_logic;
  SIGNAL h_cnt_unsigned                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL clk_enable_1                     : std_logic;
  SIGNAL in_10_pipe_reg                   : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL h_cnt_1                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL v_cnt_unsigned                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL in_11_pipe_reg                   : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL v_cnt_1                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp                              : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_1                            : std_logic;
  SIGNAL counterSig                       : std_logic;  -- ufix1
  SIGNAL R0_data_3_signed                 : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL in_2_pipe_reg                    : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R0_data_3_1                      : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL writeData_R0_3                   : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL wr_data                          : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL wr_data_overclock2               : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL ratechange_splitcomp_out0        : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL ratechange_splitcomp_out1        : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL ctr                              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ctr_1                            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_2                            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_3                            : std_logic;
  SIGNAL tmp_4                            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_5                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL p62tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_6                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr                          : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL wr_addr_overclock2               : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_1      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_1      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_1                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_7                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL p84tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_8                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_1            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr                          : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL rd_addr_overclock2               : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_2      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_2      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_1                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R0_Ram3_ram_wr_en_k_0_sig        : std_logic;
  SIGNAL R0_Ram3_ram_wr_en_k_1_sig        : std_logic;
  SIGNAL R0_Ram3_ram_wr_en_sig            : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R0_Ram3_ram_wr_en_sig_1          : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R0_Ram3_ram_wr_en_sig_overclock2 : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL ratechange_splitcomp_out0_3      : std_logic;
  SIGNAL ratechange_splitcomp_out1_3      : std_logic;
  SIGNAL R0_Ram3_ram_wr_en_sig_2          : std_logic;
  SIGNAL tmp_9                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL p72tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_10                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_2            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_2                        : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL wr_addr_overclock2_1             : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_4      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_4      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_3                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_11                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p99tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_12                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_3            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_2                        : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL rd_addr_overclock2_1             : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_5      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_5      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_3                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R1_Ram3_ram_wr_en_k_0_sig        : std_logic;
  SIGNAL R1_Ram3_ram_wr_en_k_1_sig        : std_logic;
  SIGNAL R1_Ram3_ram_wr_en_sig            : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R1_Ram3_ram_wr_en_sig_1          : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R1_Ram3_ram_wr_en_sig_overclock2 : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL ratechange_splitcomp_out0_6      : std_logic;
  SIGNAL ratechange_splitcomp_out1_6      : std_logic;
  SIGNAL R1_Ram3_ram_wr_en_sig_2          : std_logic;
  SIGNAL tmp_13                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p66tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_14                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_4            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_4                        : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL wr_addr_overclock2_2             : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_7      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_7      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_5                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_15                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p90tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_16                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_5            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_4                        : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL rd_addr_overclock2_2             : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_8      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_8      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_5                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R0_Ram5_ram_wr_en_k_0_sig        : std_logic;
  SIGNAL R0_Ram5_ram_wr_en_k_1_sig        : std_logic;
  SIGNAL R0_Ram5_ram_wr_en_sig            : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R0_Ram5_ram_wr_en_sig_1          : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R0_Ram5_ram_wr_en_sig_overclock2 : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL ratechange_splitcomp_out0_9      : std_logic;
  SIGNAL ratechange_splitcomp_out1_9      : std_logic;
  SIGNAL R0_Ram5_ram_wr_en_sig_2          : std_logic;
  SIGNAL tmp_17                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p76tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_18                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_6            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_6                        : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL wr_addr_overclock2_3             : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_10     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_10     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_7                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_19                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p105tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_20                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_7            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_6                        : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL rd_addr_overclock2_3             : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_11     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_11     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_7                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R1_Ram5_ram_wr_en_k_0_sig        : std_logic;
  SIGNAL R1_Ram5_ram_wr_en_k_1_sig        : std_logic;
  SIGNAL R1_Ram5_ram_wr_en_sig            : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R1_Ram5_ram_wr_en_sig_1          : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R1_Ram5_ram_wr_en_sig_overclock2 : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL ratechange_splitcomp_out0_12     : std_logic;
  SIGNAL ratechange_splitcomp_out1_12     : std_logic;
  SIGNAL R1_Ram5_ram_wr_en_sig_2          : std_logic;
  SIGNAL tmp_21                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p64tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_22                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_8            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_8                        : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL wr_addr_overclock2_4             : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_13     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_13     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_9                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_23                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p87tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_24                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_9            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_8                        : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL rd_addr_overclock2_4             : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_14     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_14     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_9                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R0_Ram4_ram_wr_en_k_0_sig        : std_logic;
  SIGNAL R0_Ram4_ram_wr_en_k_1_sig        : std_logic;
  SIGNAL R0_Ram4_ram_wr_en_sig            : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R0_Ram4_ram_wr_en_sig_1          : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R0_Ram4_ram_wr_en_sig_overclock2 : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL ratechange_splitcomp_out0_15     : std_logic;
  SIGNAL ratechange_splitcomp_out1_15     : std_logic;
  SIGNAL R0_Ram4_ram_wr_en_sig_2          : std_logic;
  SIGNAL tmp_25                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p74tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_26                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_10           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_10                       : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL wr_addr_overclock2_5             : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_16     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_16     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_11                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_27                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p102tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_28                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_11           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_10                       : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL rd_addr_overclock2_5             : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_17     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_17     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_11                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R1_Ram4_ram_wr_en_k_0_sig        : std_logic;
  SIGNAL R1_Ram4_ram_wr_en_k_1_sig        : std_logic;
  SIGNAL R1_Ram4_ram_wr_en_sig            : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R1_Ram4_ram_wr_en_sig_1          : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R1_Ram4_ram_wr_en_sig_overclock2 : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL ratechange_splitcomp_out0_18     : std_logic;
  SIGNAL ratechange_splitcomp_out1_18     : std_logic;
  SIGNAL R1_Ram4_ram_wr_en_sig_2          : std_logic;
  SIGNAL tmp_29                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p58tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_30                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_12           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_12                       : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL wr_addr_overclock2_6             : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_19     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_19     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_13                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_31                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p78tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_32                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_13           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_12                       : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL rd_addr_overclock2_6             : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_20     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_20     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_13                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R0_Ram1_ram_wr_en_k_0_sig        : std_logic;
  SIGNAL R0_Ram1_ram_wr_en_k_1_sig        : std_logic;
  SIGNAL R0_Ram1_ram_wr_en_sig            : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R0_Ram1_ram_wr_en_sig_1          : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R0_Ram1_ram_wr_en_sig_overclock2 : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL ratechange_splitcomp_out0_21     : std_logic;
  SIGNAL ratechange_splitcomp_out1_21     : std_logic;
  SIGNAL R0_Ram1_ram_wr_en_sig_2          : std_logic;
  SIGNAL tmp_33                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p68tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_34                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_14           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_14                       : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL wr_addr_overclock2_7             : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_22     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_22     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_15                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R1_Ram1_ram_wr_en_k_0_sig        : std_logic;
  SIGNAL R1_Ram1_ram_wr_en_k_1_sig        : std_logic;
  SIGNAL R1_Ram1_ram_wr_en_sig            : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R1_Ram1_ram_wr_en_sig_1          : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R1_Ram1_ram_wr_en_sig_overclock2 : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL ratechange_splitcomp_out0_23     : std_logic;
  SIGNAL ratechange_splitcomp_out1_23     : std_logic;
  SIGNAL R1_Ram1_ram_wr_en_sig_2          : std_logic;
  SIGNAL mergedInput                      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin                : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL mergedDelay_wrenb                : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL mergedDelay_regout               : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL wr_data_1                        : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL slicedInput                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_1                    : std_logic;  -- ufix1
  SIGNAL R0_Ram3_ram_wr_en_sig_3          : std_logic;
  SIGNAL slicedInput_2                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL sel                              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL mergedInput_1                    : unsigned(79 DOWNTO 0);  -- ufix80
  SIGNAL mergedDelay_regin_1              : unsigned(79 DOWNTO 0);  -- ufix80
  SIGNAL mergedDelay_waddr_1              : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL mergedDelay_wrenb_1              : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_1              : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL mergedDelay_regout_1             : std_logic_vector(79 DOWNTO 0);  -- ufix80
  SIGNAL mergedDelay_regout_unsigned_1    : unsigned(79 DOWNTO 0);  -- ufix80
  SIGNAL mergedOutput_1                   : unsigned(79 DOWNTO 0);  -- ufix80
  SIGNAL rd_data                          : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL rd_data_signed                   : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL slicedInput_3                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R0_Ram3_ram_demux_yreg           : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R0_Ram3_ram_demux_yreg_next      : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL R0_Ram3_ram_demux_ctr1           : signed(31 DOWNTO 0);  -- int32
  SIGNAL R0_Ram3_ram_demux_ytmp           : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL R0_Ram3_ram_demux_add_cast       : signed(31 DOWNTO 0);  -- int32
  SIGNAL rd_data_overclock2               : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL rd_data_downsample2_bypass_reg   : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL rd_data_1                        : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL R0_Ram3                          : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL fx                               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL fy                               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a00                              : std_logic;  -- ufix1
  SIGNAL p131a00_mul_temp                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL a00_1                            : std_logic;  -- ufix1
  SIGNAL R1_data_3_signed                 : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL in_7_pipe_reg                    : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R1_data_3_1                      : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL writeData_R1_3                   : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL wr_data_2                        : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL wr_data_overclock2_1             : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL ratechange_splitcomp_out0_24     : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL ratechange_splitcomp_out1_24     : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL wr_data_3                        : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL slicedInput_4                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_5                    : std_logic;  -- ufix1
  SIGNAL R1_Ram3_ram_wr_en_sig_3          : std_logic;
  SIGNAL slicedInput_6                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_data_2                        : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL rd_data_signed_1                 : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL slicedInput_7                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R1_Ram3_ram_demux_yreg           : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R1_Ram3_ram_demux_yreg_next      : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL R1_Ram3_ram_demux_ctr1           : signed(31 DOWNTO 0);  -- int32
  SIGNAL R1_Ram3_ram_demux_ytmp           : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL R1_Ram3_ram_demux_add_cast       : signed(31 DOWNTO 0);  -- int32
  SIGNAL rd_data_overclock2_1             : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL rd_data_downsample2_bypass_reg_1 : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL rd_data_3                        : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL R1_Ram3                          : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL r4                               : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL p136r4_1                         : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL p136r4_cast                      : signed(14 DOWNTO 0);  -- sfix15_En8
  SIGNAL tmp_35                           : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL p137tmp_add_cast                 : signed(14 DOWNTO 0);  -- sfix15_En8
  SIGNAL p137tmp_add_cast_1               : signed(14 DOWNTO 0);  -- sfix15_En8
  SIGNAL p137tmp_add_temp                 : signed(14 DOWNTO 0);  -- sfix15_En8
  SIGNAL p137tmp_mul_temp                 : signed(29 DOWNTO 0);  -- sfix30_En22
  SIGNAL p137tmp_cast                     : signed(28 DOWNTO 0);  -- sfix29_En22
  SIGNAL tmp_36                           : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL tmp_37                           : std_logic;
  SIGNAL delayMatch_reg_1                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_38                           : std_logic;
  SIGNAL R0_data_5_signed                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL in_4_pipe_reg                    : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R0_data_5_1                      : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL writeData_R0_5                   : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL wr_data_4                        : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL wr_data_overclock2_2             : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL ratechange_splitcomp_out0_25     : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL ratechange_splitcomp_out1_25     : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL wr_data_5                        : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL slicedInput_8                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_9                    : std_logic;  -- ufix1
  SIGNAL R0_Ram5_ram_wr_en_sig_3          : std_logic;
  SIGNAL slicedInput_10                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_data_4                        : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL rd_data_signed_2                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL slicedInput_11                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R0_Ram5_ram_demux_yreg           : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R0_Ram5_ram_demux_yreg_next      : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL R0_Ram5_ram_demux_ctr1           : signed(31 DOWNTO 0);  -- int32
  SIGNAL R0_Ram5_ram_demux_ytmp           : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL R0_Ram5_ram_demux_add_cast       : signed(31 DOWNTO 0);  -- int32
  SIGNAL rd_data_overclock2_2             : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL rd_data_downsample2_bypass_reg_2 : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL rd_data_5                        : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL R0_Ram5                          : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL tmp_39                           : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL p114tmp_cast                     : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL p114tmp_cast_1                   : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL R1_data_5_signed                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL in_9_pipe_reg                    : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R1_data_5_1                      : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL writeData_R1_5                   : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL wr_data_6                        : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL wr_data_overclock2_3             : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL ratechange_splitcomp_out0_26     : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL ratechange_splitcomp_out1_26     : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL wr_data_7                        : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL slicedInput_12                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_13                   : std_logic;  -- ufix1
  SIGNAL R1_Ram5_ram_wr_en_sig_3          : std_logic;
  SIGNAL slicedInput_14                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_data_6                        : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL rd_data_signed_3                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL slicedInput_15                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R1_Ram5_ram_demux_yreg           : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R1_Ram5_ram_demux_yreg_next      : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL R1_Ram5_ram_demux_ctr1           : signed(31 DOWNTO 0);  -- int32
  SIGNAL R1_Ram5_ram_demux_ytmp           : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL R1_Ram5_ram_demux_add_cast       : signed(31 DOWNTO 0);  -- int32
  SIGNAL rd_data_overclock2_3             : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL rd_data_downsample2_bypass_reg_3 : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL rd_data_7                        : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL R1_Ram5                          : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL r6                               : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL p132r6_1                         : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL p132r6_cast                      : signed(14 DOWNTO 0);  -- sfix15_En7
  SIGNAL tmp_40                           : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL p133tmp_add_cast                 : signed(14 DOWNTO 0);  -- sfix15_En7
  SIGNAL p133tmp_add_cast_1               : signed(14 DOWNTO 0);  -- sfix15_En7
  SIGNAL p133tmp_add_temp                 : signed(14 DOWNTO 0);  -- sfix15_En7
  SIGNAL p133tmp_mul_temp                 : signed(29 DOWNTO 0);  -- sfix30_En22
  SIGNAL p133tmp_cast                     : signed(28 DOWNTO 0);  -- sfix29_En22
  SIGNAL tmp_41                           : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL M_1_tmp                          : unsigned(13 DOWNTO 0);  -- ufix14_En4
  SIGNAL p19M_1_mul_temp                  : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL p19M_1_add_cast                  : signed(30 DOWNTO 0);  -- sfix31_En16
  SIGNAL p19M_1_mul_temp_1                : signed(27 DOWNTO 0);  -- sfix28_En14
  SIGNAL p19M_1_add_cast_1                : signed(30 DOWNTO 0);  -- sfix31_En16
  SIGNAL p19M_1_add_temp                  : signed(30 DOWNTO 0);  -- sfix31_En16
  SIGNAL tmp_42                           : std_logic;
  SIGNAL delayMatch_reg_2                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_43                           : std_logic;
  SIGNAL R0_data_4_signed                 : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL in_3_pipe_reg                    : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R0_data_4_1                      : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL writeData_R0_4                   : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL wr_data_8                        : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL wr_data_overclock2_4             : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL ratechange_splitcomp_out0_27     : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL ratechange_splitcomp_out1_27     : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL wr_data_9                        : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL slicedInput_16                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_17                   : std_logic;  -- ufix1
  SIGNAL R0_Ram4_ram_wr_en_sig_3          : std_logic;
  SIGNAL slicedInput_18                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_data_8                        : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL rd_data_signed_4                 : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL slicedInput_19                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R0_Ram4_ram_demux_yreg           : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R0_Ram4_ram_demux_yreg_next      : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL R0_Ram4_ram_demux_ctr1           : signed(31 DOWNTO 0);  -- int32
  SIGNAL R0_Ram4_ram_demux_ytmp           : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL R0_Ram4_ram_demux_add_cast       : signed(31 DOWNTO 0);  -- int32
  SIGNAL rd_data_overclock2_4             : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL rd_data_downsample2_bypass_reg_4 : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL rd_data_9                        : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL R0_Ram4                          : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL R1_data_4_signed                 : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL in_8_pipe_reg                    : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R1_data_4_1                      : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL writeData_R1_4                   : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL wr_data_10                       : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL wr_data_overclock2_5             : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL ratechange_splitcomp_out0_28     : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL ratechange_splitcomp_out1_28     : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL wr_data_11                       : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL slicedInput_20                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_21                   : std_logic;  -- ufix1
  SIGNAL R1_Ram4_ram_wr_en_sig_3          : std_logic;
  SIGNAL slicedInput_22                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_data_10                       : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL rd_data_signed_5                 : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL slicedInput_23                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R1_Ram4_ram_demux_yreg           : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R1_Ram4_ram_demux_yreg_next      : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL R1_Ram4_ram_demux_ctr1           : signed(31 DOWNTO 0);  -- int32
  SIGNAL R1_Ram4_ram_demux_ytmp           : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL R1_Ram4_ram_demux_add_cast       : signed(31 DOWNTO 0);  -- int32
  SIGNAL rd_data_overclock2_5             : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL rd_data_downsample2_bypass_reg_5 : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL rd_data_11                       : vector_of_signed14(0 TO 1);  -- sfix14_En8 [2]
  SIGNAL R1_Ram4                          : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL r5                               : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL p134r5_1                         : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL p134r5_cast                      : signed(14 DOWNTO 0);  -- sfix15_En8
  SIGNAL tmp_44                           : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL p135tmp_add_cast                 : signed(14 DOWNTO 0);  -- sfix15_En8
  SIGNAL p135tmp_add_cast_1               : signed(14 DOWNTO 0);  -- sfix15_En8
  SIGNAL p135tmp_add_temp                 : signed(14 DOWNTO 0);  -- sfix15_En8
  SIGNAL p135tmp_mul_temp                 : signed(29 DOWNTO 0);  -- sfix30_En22
  SIGNAL p135tmp_cast                     : signed(28 DOWNTO 0);  -- sfix29_En22
  SIGNAL tmp_45                           : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL M_2_tmp                          : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL p18M_2_add_cast                  : signed(14 DOWNTO 0);  -- sfix15_En8
  SIGNAL p18M_2_add_cast_1                : signed(14 DOWNTO 0);  -- sfix15_En8
  SIGNAL p18M_2_add_temp                  : signed(14 DOWNTO 0);  -- sfix15_En8
  SIGNAL p18M_2_mul_temp                  : signed(28 DOWNTO 0);  -- sfix29_En15
  SIGNAL M_3_tmp                          : unsigned(13 DOWNTO 0);  -- ufix14_En4
  SIGNAL p17M_3_mul_temp                  : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL p17M_3_add_cast                  : signed(30 DOWNTO 0);  -- sfix31_En16
  SIGNAL p17M_3_mul_temp_1                : signed(27 DOWNTO 0);  -- sfix28_En14
  SIGNAL p17M_3_add_cast_1                : signed(30 DOWNTO 0);  -- sfix31_En16
  SIGNAL p17M_3_add_temp                  : signed(30 DOWNTO 0);  -- sfix31_En16
  SIGNAL R0_data_1_signed                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL in_0_pipe_reg                    : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R0_data_1_1                      : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL writeData_R0_1                   : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL wr_data_12                       : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL wr_data_overclock2_6             : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL ratechange_splitcomp_out0_29     : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL ratechange_splitcomp_out1_29     : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL wr_data_13                       : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL slicedInput_24                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_25                   : std_logic;  -- ufix1
  SIGNAL R0_Ram1_ram_wr_en_sig_3          : std_logic;
  SIGNAL slicedInput_26                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_data_12                       : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL rd_data_signed_6                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL slicedInput_27                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R0_Ram1_ram_demux_yreg           : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R0_Ram1_ram_demux_yreg_next      : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL R0_Ram1_ram_demux_ctr1           : signed(31 DOWNTO 0);  -- int32
  SIGNAL R0_Ram1_ram_demux_ytmp           : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL R0_Ram1_ram_demux_add_cast       : signed(31 DOWNTO 0);  -- int32
  SIGNAL rd_data_overclock2_6             : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL tmp_46                           : std_logic;
  SIGNAL delayMatch_reg_3                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_47                           : std_logic;
  SIGNAL r2                               : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL delayMatch_reg_4                 : vector_of_signed14(0 TO 3);  -- sfix14 [4]
  SIGNAL r2_1                             : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL R1_data_1_signed                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL in_5_pipe_reg                    : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R1_data_1_1                      : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL writeData_R1_1                   : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL wr_data_14                       : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL wr_data_overclock2_7             : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL ratechange_splitcomp_out0_30     : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL ratechange_splitcomp_out1_30     : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL tmp_48                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p93tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_49                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_15           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_14                       : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL rd_addr_overclock2_7             : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_31     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_31     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_15                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_data_15                       : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL slicedInput_28                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_29                   : std_logic;  -- ufix1
  SIGNAL R1_Ram1_ram_wr_en_sig_3          : std_logic;
  SIGNAL delayMatch_reg_5                 : vector_of_unsigned8(0 TO 3);  -- ufix8 [4]
  SIGNAL rd_addr_16                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_data_13                       : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL rd_data_signed_7                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL slicedInput_30                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R1_Ram1_ram_demux_yreg           : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R1_Ram1_ram_demux_yreg_next      : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL R1_Ram1_ram_demux_ctr1           : signed(31 DOWNTO 0);  -- int32
  SIGNAL R1_Ram1_ram_demux_ytmp           : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL R1_Ram1_ram_demux_add_cast       : signed(31 DOWNTO 0);  -- int32
  SIGNAL rd_data_overclock2_7             : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL rd_data_downsample2_bypass_reg_6 : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL rd_data_14                       : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL R1_Ram1                          : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL rd_data_downsample2_bypass_reg_7 : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL rd_data_15                       : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL R0_Ram1                          : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL tmp_50                           : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL p139tmp_1                        : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL p139tmp_cast                     : signed(14 DOWNTO 0);  -- sfix15_En7
  SIGNAL tmp_51                           : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL r2_2                             : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL p21r2_sub_cast                   : signed(14 DOWNTO 0);  -- sfix15_En7
  SIGNAL p21r2_sub_cast_1                 : signed(14 DOWNTO 0);  -- sfix15_En7
  SIGNAL p21r2_sub_temp                   : signed(14 DOWNTO 0);  -- sfix15_En7
  SIGNAL p21r2_mul_temp                   : signed(29 DOWNTO 0);  -- sfix30_En21
  SIGNAL p21r2_cast                       : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL R0_data_2_signed                 : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL in_1_pipe_reg                    : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R0_data_2_1                      : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL writeData_R0_2                   : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL wr_data_16                       : vector_of_signed14(0 TO 1);  -- sfix14_En6 [2]
  SIGNAL wr_data_overclock2_8             : vector_of_signed14(0 TO 1);  -- sfix14_En6 [2]
  SIGNAL ratechange_splitcomp_out0_32     : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out1_32     : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL tmp_52                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p60tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_53                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_16           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_16                       : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL wr_addr_overclock2_8             : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_33     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_33     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_17                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_data_17                       : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL delayMatch_reg_6                 : vector_of_unsigned8(0 TO 3);  -- ufix8 [4]
  SIGNAL wr_addr_18                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R0_Ram2_ram_wr_en_k_0_sig        : std_logic;
  SIGNAL R0_Ram2_ram_wr_en_k_1_sig        : std_logic;
  SIGNAL R0_Ram2_ram_wr_en_sig            : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R0_Ram2_ram_wr_en_sig_1          : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R0_Ram2_ram_wr_en_sig_overclock2 : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL ratechange_splitcomp_out0_34     : std_logic;
  SIGNAL ratechange_splitcomp_out1_34     : std_logic;
  SIGNAL R0_Ram2_ram_wr_en_sig_2          : std_logic;
  SIGNAL tmp_54                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p81tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_55                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_17           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_17                       : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL rd_addr_overclock2_8             : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_35     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_35     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_18                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_reg_7                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL R0_Ram2_ram_wr_en_sig_3          : std_logic;
  SIGNAL delayMatch_reg_8                 : vector_of_unsigned8(0 TO 3);  -- ufix8 [4]
  SIGNAL rd_addr_19                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_data_16                       : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL rd_data_signed_8                 : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL slicedInput_31                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R0_Ram2_ram_demux_yreg           : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R0_Ram2_ram_demux_yreg_next      : vector_of_signed14(0 TO 1);  -- sfix14_En6 [2]
  SIGNAL R0_Ram2_ram_demux_ctr1           : signed(31 DOWNTO 0);  -- int32
  SIGNAL R0_Ram2_ram_demux_ytmp           : vector_of_signed14(0 TO 1);  -- sfix14_En6 [2]
  SIGNAL R0_Ram2_ram_demux_add_cast       : signed(31 DOWNTO 0);  -- int32
  SIGNAL rd_data_overclock2_8             : vector_of_signed14(0 TO 1);  -- sfix14_En6 [2]
  SIGNAL tmp_56                           : std_logic;
  SIGNAL delayMatch_reg_9                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_57                           : std_logic;
  SIGNAL r3                               : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL delayMatch_reg_10                : vector_of_signed14(0 TO 3);  -- sfix14 [4]
  SIGNAL r3_1                             : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL R1_data_2_signed                 : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL in_6_pipe_reg                    : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R1_data_2_1                      : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL writeData_R1_2                   : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL wr_data_18                       : vector_of_signed14(0 TO 1);  -- sfix14_En6 [2]
  SIGNAL wr_data_overclock2_9             : vector_of_signed14(0 TO 1);  -- sfix14_En6 [2]
  SIGNAL ratechange_splitcomp_out0_36     : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out1_36     : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL tmp_58                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p70tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_59                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_18           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_19                       : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL wr_addr_overclock2_9             : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_37     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_37     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_20                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_data_19                       : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL delayMatch_reg_11                : vector_of_unsigned8(0 TO 3);  -- ufix8 [4]
  SIGNAL wr_addr_21                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R1_Ram2_ram_wr_en_k_0_sig        : std_logic;
  SIGNAL R1_Ram2_ram_wr_en_k_1_sig        : std_logic;
  SIGNAL R1_Ram2_ram_wr_en_sig            : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R1_Ram2_ram_wr_en_sig_1          : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL R1_Ram2_ram_wr_en_sig_overclock2 : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL ratechange_splitcomp_out0_38     : std_logic;
  SIGNAL ratechange_splitcomp_out1_38     : std_logic;
  SIGNAL R1_Ram2_ram_wr_en_sig_2          : std_logic;
  SIGNAL tmp_60                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p96tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_61                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_19           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_20                       : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL rd_addr_overclock2_9             : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL ratechange_splitcomp_out0_39     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_39     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_21                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_reg_12                : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL R1_Ram2_ram_wr_en_sig_3          : std_logic;
  SIGNAL delayMatch_reg_13                : vector_of_unsigned8(0 TO 3);  -- ufix8 [4]
  SIGNAL rd_addr_22                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_data_17                       : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL rd_data_signed_9                 : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL slicedInput_32                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL R1_Ram2_ram_demux_yreg           : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL R1_Ram2_ram_demux_yreg_next      : vector_of_signed14(0 TO 1);  -- sfix14_En6 [2]
  SIGNAL R1_Ram2_ram_demux_ctr1           : signed(31 DOWNTO 0);  -- int32
  SIGNAL R1_Ram2_ram_demux_ytmp           : vector_of_signed14(0 TO 1);  -- sfix14_En6 [2]
  SIGNAL R1_Ram2_ram_demux_add_cast       : signed(31 DOWNTO 0);  -- int32
  SIGNAL rd_data_overclock2_9             : vector_of_signed14(0 TO 1);  -- sfix14_En6 [2]
  SIGNAL rd_data_downsample2_bypass_reg_8 : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL rd_data_18                       : vector_of_signed14(0 TO 1);  -- sfix14_En6 [2]
  SIGNAL R1_Ram2                          : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL rd_data_downsample2_bypass_reg_9 : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL rd_data_19                       : vector_of_signed14(0 TO 1);  -- sfix14_En6 [2]
  SIGNAL R0_Ram2                          : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL tmp_62                           : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL p138tmp_1                        : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL p138tmp_cast                     : signed(14 DOWNTO 0);  -- sfix15_En6
  SIGNAL tmp_63                           : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL r3_2                             : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL p20r3_sub_cast                   : signed(14 DOWNTO 0);  -- sfix15_En6
  SIGNAL p20r3_sub_cast_1                 : signed(14 DOWNTO 0);  -- sfix15_En6
  SIGNAL p20r3_sub_temp                   : signed(14 DOWNTO 0);  -- sfix15_En6
  SIGNAL p20r3_mul_temp                   : signed(29 DOWNTO 0);  -- sfix30_En20
  SIGNAL p20r3_cast                       : signed(28 DOWNTO 0);  -- sfix29_En20
  SIGNAL M_4_tmp                          : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL p16M_4_mul_temp                  : signed(27 DOWNTO 0);  -- sfix28_En15
  SIGNAL p16M_4_add_cast                  : signed(30 DOWNTO 0);  -- sfix31_En15
  SIGNAL p16M_4_mul_temp_1                : signed(27 DOWNTO 0);  -- sfix28_En13
  SIGNAL p16M_4_add_cast_1                : signed(30 DOWNTO 0);  -- sfix31_En15
  SIGNAL p16M_4_add_temp                  : signed(30 DOWNTO 0);  -- sfix31_En15
  SIGNAL M_5_tmp                          : signed(13 DOWNTO 0);  -- sfix14_En4
  SIGNAL p15M_5_mul_temp                  : signed(27 DOWNTO 0);  -- sfix28_En14
  SIGNAL p15M_5_add_cast                  : signed(28 DOWNTO 0);  -- sfix29_En14
  SIGNAL p15M_5_mul_temp_1                : signed(27 DOWNTO 0);  -- sfix28_En14
  SIGNAL p15M_5_add_cast_1                : signed(28 DOWNTO 0);  -- sfix29_En14
  SIGNAL p15M_5_add_temp                  : signed(28 DOWNTO 0);  -- sfix29_En14

BEGIN
  u_UpdateMatrices_pipeline1_fixpt_enb_bypass : UpdateMatrices_pipeline1_fixpt_enb_bypass
    PORT MAP( clk_1 => clk,
              reset_1 => reset,
              clk_enable_1 => clk_enable,
              clk_enable_2 => clk_enable_1
              );

  u_UpdateMatrices_pipeline1_fixpt_tc : UpdateMatrices_pipeline1_fixpt_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable_1,
              enb => enb,
              enb_1_2_0 => enb_1_2_0,
              enb_1_2_1 => enb_1_2_1
              );

  u_ShiftRegisterRAM : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 2,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(mergedDelay_regin),
              wr_addr => std_logic_vector(mergedDelay_waddr),
              wr_en => mergedDelay_wrenb,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr),
              rd_dout => mergedDelay_regout
              );

  u_ShiftRegisterRAM_1 : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 80
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(mergedDelay_regin_1),
              wr_addr => std_logic_vector(mergedDelay_waddr_1),
              wr_en => mergedDelay_wrenb_1,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_1),
              rd_dout => mergedDelay_regout_1
              );

  u_R0_Ram3_ram : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 14
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(wr_data_1),
              wr_addr => std_logic_vector(slicedInput),
              wr_en => R0_Ram3_ram_wr_en_sig_3,
              rd_addr => std_logic_vector(slicedInput_2),
              rd_dout => rd_data
              );

  u_R1_Ram3_ram : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 14
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(wr_data_3),
              wr_addr => std_logic_vector(slicedInput_4),
              wr_en => R1_Ram3_ram_wr_en_sig_3,
              rd_addr => std_logic_vector(slicedInput_6),
              rd_dout => rd_data_2
              );

  u_R0_Ram5_ram : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 14
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(wr_data_5),
              wr_addr => std_logic_vector(slicedInput_8),
              wr_en => R0_Ram5_ram_wr_en_sig_3,
              rd_addr => std_logic_vector(slicedInput_10),
              rd_dout => rd_data_4
              );

  u_R1_Ram5_ram : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 14
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(wr_data_7),
              wr_addr => std_logic_vector(slicedInput_12),
              wr_en => R1_Ram5_ram_wr_en_sig_3,
              rd_addr => std_logic_vector(slicedInput_14),
              rd_dout => rd_data_6
              );

  u_R0_Ram4_ram : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 14
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(wr_data_9),
              wr_addr => std_logic_vector(slicedInput_16),
              wr_en => R0_Ram4_ram_wr_en_sig_3,
              rd_addr => std_logic_vector(slicedInput_18),
              rd_dout => rd_data_8
              );

  u_R1_Ram4_ram : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 14
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(wr_data_11),
              wr_addr => std_logic_vector(slicedInput_20),
              wr_en => R1_Ram4_ram_wr_en_sig_3,
              rd_addr => std_logic_vector(slicedInput_22),
              rd_dout => rd_data_10
              );

  u_R0_Ram1_ram_generic : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 14
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(wr_data_13),
              wr_addr => std_logic_vector(slicedInput_24),
              wr_en => R0_Ram1_ram_wr_en_sig_3,
              rd_addr => std_logic_vector(slicedInput_26),
              rd_dout => rd_data_12
              );

  u_R1_Ram1_ram : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 14
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(wr_data_15),
              wr_addr => std_logic_vector(slicedInput_28),
              wr_en => R1_Ram1_ram_wr_en_sig_3,
              rd_addr => std_logic_vector(rd_addr_16),
              rd_dout => rd_data_13
              );

  u_R0_Ram2_ram : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 14
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(wr_data_17),
              wr_addr => std_logic_vector(wr_addr_18),
              wr_en => R0_Ram2_ram_wr_en_sig_3,
              rd_addr => std_logic_vector(rd_addr_19),
              rd_dout => rd_data_16
              );

  u_R1_Ram2_ram : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 14
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(wr_data_19),
              wr_addr => std_logic_vector(wr_addr_21),
              wr_en => R1_Ram2_ram_wr_en_sig_3,
              rd_addr => std_logic_vector(rd_addr_22),
              rd_dout => rd_data_17
              );

  h_cnt_unsigned <= unsigned(h_cnt);

  --------------------------------------------
  -- 
  -- dx  = flow(y+1,x*2+1);
  -- 
  -- dy  = flow(y+1,x*2+2);
  in_10_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_10_pipe_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        in_10_pipe_reg(0) <= h_cnt_unsigned;
        in_10_pipe_reg(1) <= in_10_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_10_pipe_process;

  h_cnt_1 <= in_10_pipe_reg(1);

  v_cnt_unsigned <= unsigned(v_cnt);

  in_11_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_11_pipe_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        in_11_pipe_reg(0) <= v_cnt_unsigned;
        in_11_pipe_reg(1) <= in_11_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_11_pipe_process;

  v_cnt_1 <= in_11_pipe_reg(1);

  --------------------------------------------
  
  tmp <= '1' WHEN (resize(h_cnt_1, 9) < to_unsigned(16#0C7#, 9)) AND (resize(v_cnt_1, 9) < to_unsigned(16#0C7#, 9)) ELSE
      '0';

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch_reg(0) <= tmp;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  tmp_1 <= delayMatch_reg(1);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  ctr_0_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      counterSig <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        counterSig <=  NOT counterSig;
      END IF;
    END IF;
  END PROCESS ctr_0_1_process;


  R0_data_3_signed <= signed(R0_data_3);

  in_2_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_2_pipe_reg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        in_2_pipe_reg(0) <= R0_data_3_signed;
        in_2_pipe_reg(1) <= in_2_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;

  R0_data_3_1 <= in_2_pipe_reg(1);

  delayMatch_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      writeData_R0_3 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        writeData_R0_3 <= R0_data_3_1;
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;


  wr_data(0) <= writeData_R0_3;
  wr_data(1) <= writeData_R0_3;

  wr_data_overclock2 <= wr_data;

  ratechange_splitcomp_out0 <= wr_data_overclock2(0);

  ratechange_splitcomp_out1 <= wr_data_overclock2(1);

  -- HDL code generation from MATLAB function: UpdateMatrices_pipeline1_fixpt_trueregionp11
  ctr <= to_unsigned(16#01#, 8);

  -- HDL code generation from MATLAB function: UpdateMatrices_pipeline1_fixpt_falseregionp11
  tmp_2 <= ctr_1 + to_unsigned(16#01#, 8);

  ---------------------- ctr counter
  
  tmp_3 <= '1' WHEN ctr_1 = to_unsigned(16#C8#, 8) ELSE
      '0';

  
  tmp_4 <= tmp_2 WHEN tmp_3 = '0' ELSE
      ctr;

  --------------------------------------------
  -- 
  ---------------------- read BRAM
  -- 
  -- HDL code generation from MATLAB function: UpdateMatrices_pipeline1_fixpt
  ctr_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ctr_1 <= to_unsigned(16#01#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        ctr_1 <= tmp_4;
      END IF;
    END IF;
  END PROCESS ctr_reg_process;


  p62tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_5 <= p62tmp_sub_cast - 1;

  delayMatch_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_6 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_6 <= tmp_5;
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;


  indexLogic_fixptsig <= unsigned(tmp_6(7 DOWNTO 0));

  wr_addr(0) <= indexLogic_fixptsig;
  wr_addr(1) <= indexLogic_fixptsig;

  wr_addr_overclock2 <= wr_addr;

  ratechange_splitcomp_out0_1 <= wr_addr_overclock2(0);

  ratechange_splitcomp_out1_1 <= wr_addr_overclock2(1);

  
  wr_addr_1 <= ratechange_splitcomp_out0_1 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_1;

  p84tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_7 <= p84tmp_sub_cast - 1;

  delayMatch_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_8 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_8 <= tmp_7;
      END IF;
    END IF;
  END PROCESS delayMatch_3_process;


  indexLogic_fixptsig_1 <= unsigned(tmp_8(7 DOWNTO 0));

  rd_addr(0) <= indexLogic_fixptsig_1;
  rd_addr(1) <= indexLogic_fixptsig_1;

  rd_addr_overclock2 <= rd_addr;

  ratechange_splitcomp_out0_2 <= rd_addr_overclock2(0);

  ratechange_splitcomp_out1_2 <= rd_addr_overclock2(1);

  
  rd_addr_1 <= ratechange_splitcomp_out0_2 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_2;

  R0_Ram3_ram_wr_en_k_0_sig <= '1';

  R0_Ram3_ram_wr_en_k_1_sig <= '0';

  R0_Ram3_ram_wr_en_sig(0) <= R0_Ram3_ram_wr_en_k_0_sig;
  R0_Ram3_ram_wr_en_sig(1) <= R0_Ram3_ram_wr_en_k_1_sig;

  R0_Ram3_ram_wren_match_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R0_Ram3_ram_wr_en_sig_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        R0_Ram3_ram_wr_en_sig_1 <= R0_Ram3_ram_wr_en_sig;
      END IF;
    END IF;
  END PROCESS R0_Ram3_ram_wren_match_process;


  R0_Ram3_ram_wr_en_sig_overclock2 <= R0_Ram3_ram_wr_en_sig_1;

  ratechange_splitcomp_out0_3 <= R0_Ram3_ram_wr_en_sig_overclock2(0);

  ratechange_splitcomp_out1_3 <= R0_Ram3_ram_wr_en_sig_overclock2(1);

  
  R0_Ram3_ram_wr_en_sig_2 <= ratechange_splitcomp_out0_3 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_3;

  p72tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_9 <= p72tmp_sub_cast - 1;

  delayMatch_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_10 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_10 <= tmp_9;
      END IF;
    END IF;
  END PROCESS delayMatch_4_process;


  indexLogic_fixptsig_2 <= unsigned(tmp_10(7 DOWNTO 0));

  wr_addr_2(0) <= indexLogic_fixptsig_2;
  wr_addr_2(1) <= indexLogic_fixptsig_2;

  wr_addr_overclock2_1 <= wr_addr_2;

  ratechange_splitcomp_out0_4 <= wr_addr_overclock2_1(0);

  ratechange_splitcomp_out1_4 <= wr_addr_overclock2_1(1);

  
  wr_addr_3 <= ratechange_splitcomp_out0_4 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_4;

  p99tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_11 <= p99tmp_sub_cast - 1;

  delayMatch_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_12 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_12 <= tmp_11;
      END IF;
    END IF;
  END PROCESS delayMatch_5_process;


  indexLogic_fixptsig_3 <= unsigned(tmp_12(7 DOWNTO 0));

  rd_addr_2(0) <= indexLogic_fixptsig_3;
  rd_addr_2(1) <= indexLogic_fixptsig_3;

  rd_addr_overclock2_1 <= rd_addr_2;

  ratechange_splitcomp_out0_5 <= rd_addr_overclock2_1(0);

  ratechange_splitcomp_out1_5 <= rd_addr_overclock2_1(1);

  
  rd_addr_3 <= ratechange_splitcomp_out0_5 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_5;

  R1_Ram3_ram_wr_en_k_0_sig <= '1';

  R1_Ram3_ram_wr_en_k_1_sig <= '0';

  R1_Ram3_ram_wr_en_sig(0) <= R1_Ram3_ram_wr_en_k_0_sig;
  R1_Ram3_ram_wr_en_sig(1) <= R1_Ram3_ram_wr_en_k_1_sig;

  R1_Ram3_ram_wren_match_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R1_Ram3_ram_wr_en_sig_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        R1_Ram3_ram_wr_en_sig_1 <= R1_Ram3_ram_wr_en_sig;
      END IF;
    END IF;
  END PROCESS R1_Ram3_ram_wren_match_process;


  R1_Ram3_ram_wr_en_sig_overclock2 <= R1_Ram3_ram_wr_en_sig_1;

  ratechange_splitcomp_out0_6 <= R1_Ram3_ram_wr_en_sig_overclock2(0);

  ratechange_splitcomp_out1_6 <= R1_Ram3_ram_wr_en_sig_overclock2(1);

  
  R1_Ram3_ram_wr_en_sig_2 <= ratechange_splitcomp_out0_6 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_6;

  p66tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_13 <= p66tmp_sub_cast - 1;

  delayMatch_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_14 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_14 <= tmp_13;
      END IF;
    END IF;
  END PROCESS delayMatch_6_process;


  indexLogic_fixptsig_4 <= unsigned(tmp_14(7 DOWNTO 0));

  wr_addr_4(0) <= indexLogic_fixptsig_4;
  wr_addr_4(1) <= indexLogic_fixptsig_4;

  wr_addr_overclock2_2 <= wr_addr_4;

  ratechange_splitcomp_out0_7 <= wr_addr_overclock2_2(0);

  ratechange_splitcomp_out1_7 <= wr_addr_overclock2_2(1);

  
  wr_addr_5 <= ratechange_splitcomp_out0_7 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_7;

  p90tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_15 <= p90tmp_sub_cast - 1;

  delayMatch_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_16 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_16 <= tmp_15;
      END IF;
    END IF;
  END PROCESS delayMatch_7_process;


  indexLogic_fixptsig_5 <= unsigned(tmp_16(7 DOWNTO 0));

  rd_addr_4(0) <= indexLogic_fixptsig_5;
  rd_addr_4(1) <= indexLogic_fixptsig_5;

  rd_addr_overclock2_2 <= rd_addr_4;

  ratechange_splitcomp_out0_8 <= rd_addr_overclock2_2(0);

  ratechange_splitcomp_out1_8 <= rd_addr_overclock2_2(1);

  
  rd_addr_5 <= ratechange_splitcomp_out0_8 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_8;

  R0_Ram5_ram_wr_en_k_0_sig <= '1';

  R0_Ram5_ram_wr_en_k_1_sig <= '0';

  R0_Ram5_ram_wr_en_sig(0) <= R0_Ram5_ram_wr_en_k_0_sig;
  R0_Ram5_ram_wr_en_sig(1) <= R0_Ram5_ram_wr_en_k_1_sig;

  R0_Ram5_ram_wren_match_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R0_Ram5_ram_wr_en_sig_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        R0_Ram5_ram_wr_en_sig_1 <= R0_Ram5_ram_wr_en_sig;
      END IF;
    END IF;
  END PROCESS R0_Ram5_ram_wren_match_process;


  R0_Ram5_ram_wr_en_sig_overclock2 <= R0_Ram5_ram_wr_en_sig_1;

  ratechange_splitcomp_out0_9 <= R0_Ram5_ram_wr_en_sig_overclock2(0);

  ratechange_splitcomp_out1_9 <= R0_Ram5_ram_wr_en_sig_overclock2(1);

  
  R0_Ram5_ram_wr_en_sig_2 <= ratechange_splitcomp_out0_9 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_9;

  p76tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_17 <= p76tmp_sub_cast - 1;

  delayMatch_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_18 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_18 <= tmp_17;
      END IF;
    END IF;
  END PROCESS delayMatch_8_process;


  indexLogic_fixptsig_6 <= unsigned(tmp_18(7 DOWNTO 0));

  wr_addr_6(0) <= indexLogic_fixptsig_6;
  wr_addr_6(1) <= indexLogic_fixptsig_6;

  wr_addr_overclock2_3 <= wr_addr_6;

  ratechange_splitcomp_out0_10 <= wr_addr_overclock2_3(0);

  ratechange_splitcomp_out1_10 <= wr_addr_overclock2_3(1);

  
  wr_addr_7 <= ratechange_splitcomp_out0_10 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_10;

  p105tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_19 <= p105tmp_sub_cast - 1;

  delayMatch_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_20 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_20 <= tmp_19;
      END IF;
    END IF;
  END PROCESS delayMatch_9_process;


  indexLogic_fixptsig_7 <= unsigned(tmp_20(7 DOWNTO 0));

  rd_addr_6(0) <= indexLogic_fixptsig_7;
  rd_addr_6(1) <= indexLogic_fixptsig_7;

  rd_addr_overclock2_3 <= rd_addr_6;

  ratechange_splitcomp_out0_11 <= rd_addr_overclock2_3(0);

  ratechange_splitcomp_out1_11 <= rd_addr_overclock2_3(1);

  
  rd_addr_7 <= ratechange_splitcomp_out0_11 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_11;

  R1_Ram5_ram_wr_en_k_0_sig <= '1';

  R1_Ram5_ram_wr_en_k_1_sig <= '0';

  R1_Ram5_ram_wr_en_sig(0) <= R1_Ram5_ram_wr_en_k_0_sig;
  R1_Ram5_ram_wr_en_sig(1) <= R1_Ram5_ram_wr_en_k_1_sig;

  R1_Ram5_ram_wren_match_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R1_Ram5_ram_wr_en_sig_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        R1_Ram5_ram_wr_en_sig_1 <= R1_Ram5_ram_wr_en_sig;
      END IF;
    END IF;
  END PROCESS R1_Ram5_ram_wren_match_process;


  R1_Ram5_ram_wr_en_sig_overclock2 <= R1_Ram5_ram_wr_en_sig_1;

  ratechange_splitcomp_out0_12 <= R1_Ram5_ram_wr_en_sig_overclock2(0);

  ratechange_splitcomp_out1_12 <= R1_Ram5_ram_wr_en_sig_overclock2(1);

  
  R1_Ram5_ram_wr_en_sig_2 <= ratechange_splitcomp_out0_12 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_12;

  p64tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_21 <= p64tmp_sub_cast - 1;

  delayMatch_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_22 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_22 <= tmp_21;
      END IF;
    END IF;
  END PROCESS delayMatch_10_process;


  indexLogic_fixptsig_8 <= unsigned(tmp_22(7 DOWNTO 0));

  wr_addr_8(0) <= indexLogic_fixptsig_8;
  wr_addr_8(1) <= indexLogic_fixptsig_8;

  wr_addr_overclock2_4 <= wr_addr_8;

  ratechange_splitcomp_out0_13 <= wr_addr_overclock2_4(0);

  ratechange_splitcomp_out1_13 <= wr_addr_overclock2_4(1);

  
  wr_addr_9 <= ratechange_splitcomp_out0_13 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_13;

  p87tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_23 <= p87tmp_sub_cast - 1;

  delayMatch_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_24 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_24 <= tmp_23;
      END IF;
    END IF;
  END PROCESS delayMatch_11_process;


  indexLogic_fixptsig_9 <= unsigned(tmp_24(7 DOWNTO 0));

  rd_addr_8(0) <= indexLogic_fixptsig_9;
  rd_addr_8(1) <= indexLogic_fixptsig_9;

  rd_addr_overclock2_4 <= rd_addr_8;

  ratechange_splitcomp_out0_14 <= rd_addr_overclock2_4(0);

  ratechange_splitcomp_out1_14 <= rd_addr_overclock2_4(1);

  
  rd_addr_9 <= ratechange_splitcomp_out0_14 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_14;

  R0_Ram4_ram_wr_en_k_0_sig <= '1';

  R0_Ram4_ram_wr_en_k_1_sig <= '0';

  R0_Ram4_ram_wr_en_sig(0) <= R0_Ram4_ram_wr_en_k_0_sig;
  R0_Ram4_ram_wr_en_sig(1) <= R0_Ram4_ram_wr_en_k_1_sig;

  R0_Ram4_ram_wren_match_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R0_Ram4_ram_wr_en_sig_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        R0_Ram4_ram_wr_en_sig_1 <= R0_Ram4_ram_wr_en_sig;
      END IF;
    END IF;
  END PROCESS R0_Ram4_ram_wren_match_process;


  R0_Ram4_ram_wr_en_sig_overclock2 <= R0_Ram4_ram_wr_en_sig_1;

  ratechange_splitcomp_out0_15 <= R0_Ram4_ram_wr_en_sig_overclock2(0);

  ratechange_splitcomp_out1_15 <= R0_Ram4_ram_wr_en_sig_overclock2(1);

  
  R0_Ram4_ram_wr_en_sig_2 <= ratechange_splitcomp_out0_15 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_15;

  p74tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_25 <= p74tmp_sub_cast - 1;

  delayMatch_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_26 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_26 <= tmp_25;
      END IF;
    END IF;
  END PROCESS delayMatch_12_process;


  indexLogic_fixptsig_10 <= unsigned(tmp_26(7 DOWNTO 0));

  wr_addr_10(0) <= indexLogic_fixptsig_10;
  wr_addr_10(1) <= indexLogic_fixptsig_10;

  wr_addr_overclock2_5 <= wr_addr_10;

  ratechange_splitcomp_out0_16 <= wr_addr_overclock2_5(0);

  ratechange_splitcomp_out1_16 <= wr_addr_overclock2_5(1);

  
  wr_addr_11 <= ratechange_splitcomp_out0_16 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_16;

  p102tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_27 <= p102tmp_sub_cast - 1;

  delayMatch_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_28 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_28 <= tmp_27;
      END IF;
    END IF;
  END PROCESS delayMatch_13_process;


  indexLogic_fixptsig_11 <= unsigned(tmp_28(7 DOWNTO 0));

  rd_addr_10(0) <= indexLogic_fixptsig_11;
  rd_addr_10(1) <= indexLogic_fixptsig_11;

  rd_addr_overclock2_5 <= rd_addr_10;

  ratechange_splitcomp_out0_17 <= rd_addr_overclock2_5(0);

  ratechange_splitcomp_out1_17 <= rd_addr_overclock2_5(1);

  
  rd_addr_11 <= ratechange_splitcomp_out0_17 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_17;

  R1_Ram4_ram_wr_en_k_0_sig <= '1';

  R1_Ram4_ram_wr_en_k_1_sig <= '0';

  R1_Ram4_ram_wr_en_sig(0) <= R1_Ram4_ram_wr_en_k_0_sig;
  R1_Ram4_ram_wr_en_sig(1) <= R1_Ram4_ram_wr_en_k_1_sig;

  R1_Ram4_ram_wren_match_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R1_Ram4_ram_wr_en_sig_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        R1_Ram4_ram_wr_en_sig_1 <= R1_Ram4_ram_wr_en_sig;
      END IF;
    END IF;
  END PROCESS R1_Ram4_ram_wren_match_process;


  R1_Ram4_ram_wr_en_sig_overclock2 <= R1_Ram4_ram_wr_en_sig_1;

  ratechange_splitcomp_out0_18 <= R1_Ram4_ram_wr_en_sig_overclock2(0);

  ratechange_splitcomp_out1_18 <= R1_Ram4_ram_wr_en_sig_overclock2(1);

  
  R1_Ram4_ram_wr_en_sig_2 <= ratechange_splitcomp_out0_18 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_18;

  p58tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_29 <= p58tmp_sub_cast - 1;

  delayMatch_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_30 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_30 <= tmp_29;
      END IF;
    END IF;
  END PROCESS delayMatch_14_process;


  indexLogic_fixptsig_12 <= unsigned(tmp_30(7 DOWNTO 0));

  wr_addr_12(0) <= indexLogic_fixptsig_12;
  wr_addr_12(1) <= indexLogic_fixptsig_12;

  wr_addr_overclock2_6 <= wr_addr_12;

  ratechange_splitcomp_out0_19 <= wr_addr_overclock2_6(0);

  ratechange_splitcomp_out1_19 <= wr_addr_overclock2_6(1);

  
  wr_addr_13 <= ratechange_splitcomp_out0_19 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_19;

  p78tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_31 <= p78tmp_sub_cast - 1;

  delayMatch_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_32 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_32 <= tmp_31;
      END IF;
    END IF;
  END PROCESS delayMatch_15_process;


  indexLogic_fixptsig_13 <= unsigned(tmp_32(7 DOWNTO 0));

  rd_addr_12(0) <= indexLogic_fixptsig_13;
  rd_addr_12(1) <= indexLogic_fixptsig_13;

  rd_addr_overclock2_6 <= rd_addr_12;

  ratechange_splitcomp_out0_20 <= rd_addr_overclock2_6(0);

  ratechange_splitcomp_out1_20 <= rd_addr_overclock2_6(1);

  
  rd_addr_13 <= ratechange_splitcomp_out0_20 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_20;

  R0_Ram1_ram_wr_en_k_0_sig <= '1';

  R0_Ram1_ram_wr_en_k_1_sig <= '0';

  R0_Ram1_ram_wr_en_sig(0) <= R0_Ram1_ram_wr_en_k_0_sig;
  R0_Ram1_ram_wr_en_sig(1) <= R0_Ram1_ram_wr_en_k_1_sig;

  R0_Ram1_ram_wren_match_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R0_Ram1_ram_wr_en_sig_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        R0_Ram1_ram_wr_en_sig_1 <= R0_Ram1_ram_wr_en_sig;
      END IF;
    END IF;
  END PROCESS R0_Ram1_ram_wren_match_process;


  R0_Ram1_ram_wr_en_sig_overclock2 <= R0_Ram1_ram_wr_en_sig_1;

  ratechange_splitcomp_out0_21 <= R0_Ram1_ram_wr_en_sig_overclock2(0);

  ratechange_splitcomp_out1_21 <= R0_Ram1_ram_wr_en_sig_overclock2(1);

  
  R0_Ram1_ram_wr_en_sig_2 <= ratechange_splitcomp_out0_21 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_21;

  p68tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_33 <= p68tmp_sub_cast - 1;

  delayMatch_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_34 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_34 <= tmp_33;
      END IF;
    END IF;
  END PROCESS delayMatch_16_process;


  indexLogic_fixptsig_14 <= unsigned(tmp_34(7 DOWNTO 0));

  wr_addr_14(0) <= indexLogic_fixptsig_14;
  wr_addr_14(1) <= indexLogic_fixptsig_14;

  wr_addr_overclock2_7 <= wr_addr_14;

  ratechange_splitcomp_out0_22 <= wr_addr_overclock2_7(0);

  ratechange_splitcomp_out1_22 <= wr_addr_overclock2_7(1);

  
  wr_addr_15 <= ratechange_splitcomp_out0_22 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_22;

  R1_Ram1_ram_wr_en_k_0_sig <= '1';

  R1_Ram1_ram_wr_en_k_1_sig <= '0';

  R1_Ram1_ram_wr_en_sig(0) <= R1_Ram1_ram_wr_en_k_0_sig;
  R1_Ram1_ram_wr_en_sig(1) <= R1_Ram1_ram_wr_en_k_1_sig;

  R1_Ram1_ram_wren_match_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R1_Ram1_ram_wr_en_sig_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        R1_Ram1_ram_wr_en_sig_1 <= R1_Ram1_ram_wr_en_sig;
      END IF;
    END IF;
  END PROCESS R1_Ram1_ram_wren_match_process;


  R1_Ram1_ram_wr_en_sig_overclock2 <= R1_Ram1_ram_wr_en_sig_1;

  ratechange_splitcomp_out0_23 <= R1_Ram1_ram_wr_en_sig_overclock2(0);

  ratechange_splitcomp_out1_23 <= R1_Ram1_ram_wr_en_sig_overclock2(1);

  
  R1_Ram1_ram_wr_en_sig_2 <= ratechange_splitcomp_out0_23 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_23;

  mergedInput <= wr_addr_1 & rd_addr_1 & R0_Ram3_ram_wr_en_sig_2 & wr_addr_3 & rd_addr_3 & R1_Ram3_ram_wr_en_sig_2 & wr_addr_5 & rd_addr_5 & R0_Ram5_ram_wr_en_sig_2 & wr_addr_7 & rd_addr_7 & R1_Ram5_ram_wr_en_sig_2 & wr_addr_9 & rd_addr_9 & R0_Ram4_ram_wr_en_sig_2 & wr_addr_11 & rd_addr_11 & R1_Ram4_ram_wr_en_sig_2 & wr_addr_13 & rd_addr_13 & R0_Ram1_ram_wr_en_sig_2 & wr_addr_15 & R1_Ram1_ram_wr_en_sig_2;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        mergedDelay_regin <= mergedInput;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF mergedDelay_waddr >= to_unsigned(16#1#, 2) THEN 
          mergedDelay_waddr <= to_unsigned(16#0#, 2);
        ELSE 
          mergedDelay_waddr <= mergedDelay_waddr + to_unsigned(16#1#, 2);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_process;


  mergedDelay_wrenb <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 1
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr <= to_unsigned(16#1#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF mergedDelay_raddr >= to_unsigned(16#1#, 2) THEN 
          mergedDelay_raddr <= to_unsigned(16#0#, 2);
        ELSE 
          mergedDelay_raddr <= mergedDelay_raddr + to_unsigned(16#1#, 2);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_process;


  mergedDelay_regout_unsigned <= unsigned(mergedDelay_regout);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        mergedOutput <= mergedDelay_regout_unsigned;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_process;


  
  wr_data_1 <= ratechange_splitcomp_out0 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1;

  slicedInput <= mergedOutput(127 DOWNTO 120);

  slicedInput_1 <= mergedOutput(111);

  
  R0_Ram3_ram_wr_en_sig_3 <= '1' WHEN slicedInput_1 /= '0' ELSE
      '0';

  slicedInput_2 <= mergedOutput(119 DOWNTO 112);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  c_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sel <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF sel >= to_unsigned(16#01#, 8) THEN 
          sel <= to_unsigned(16#00#, 8);
        ELSE 
          sel <= sel + to_unsigned(16#01#, 8);
        END IF;
      END IF;
    END IF;
  END PROCESS c_process;


  mergedInput_1 <= sel & sel & sel & sel & sel & sel & sel & sel & sel & sel;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_1 <= to_unsigned(0, 80);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        mergedDelay_regin_1 <= mergedInput_1;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_1_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 2
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_1 <= to_unsigned(16#0#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF mergedDelay_waddr_1 >= to_unsigned(16#2#, 3) THEN 
          mergedDelay_waddr_1 <= to_unsigned(16#0#, 3);
        ELSE 
          mergedDelay_waddr_1 <= mergedDelay_waddr_1 + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_1_process;


  mergedDelay_wrenb_1 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 2
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_1 <= to_unsigned(16#1#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF mergedDelay_raddr_1 >= to_unsigned(16#2#, 3) THEN 
          mergedDelay_raddr_1 <= to_unsigned(16#0#, 3);
        ELSE 
          mergedDelay_raddr_1 <= mergedDelay_raddr_1 + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_1_process;


  mergedDelay_regout_unsigned_1 <= unsigned(mergedDelay_regout_1);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_1 <= to_unsigned(0, 80);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        mergedOutput_1 <= mergedDelay_regout_unsigned_1;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_1_process;


  rd_data_signed <= signed(rd_data);

  slicedInput_3 <= mergedOutput_1(79 DOWNTO 72);

  R0_Ram3_ram_demux_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R0_Ram3_ram_demux_yreg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        R0_Ram3_ram_demux_yreg <= R0_Ram3_ram_demux_yreg_next;
      END IF;
    END IF;
  END PROCESS R0_Ram3_ram_demux_process;

  R0_Ram3_ram_demux_add_cast <= signed(resize(slicedInput_3, 32));
  R0_Ram3_ram_demux_ctr1 <= R0_Ram3_ram_demux_add_cast + 1;
  
  R0_Ram3_ram_demux_ytmp(0) <= rd_data_signed WHEN R0_Ram3_ram_demux_ctr1 = to_signed(16#00000001#, 32) ELSE
      R0_Ram3_ram_demux_yreg(0);
  
  R0_Ram3_ram_demux_ytmp(1) <= rd_data_signed WHEN R0_Ram3_ram_demux_ctr1 = to_signed(16#00000002#, 32) ELSE
      R0_Ram3_ram_demux_yreg(1);
  R0_Ram3_ram_demux_yreg_next(0) <= R0_Ram3_ram_demux_ytmp(0);
  rd_data_overclock2(0) <= R0_Ram3_ram_demux_ytmp(0);
  R0_Ram3_ram_demux_yreg_next(1) <= R0_Ram3_ram_demux_ytmp(1);
  rd_data_overclock2(1) <= R0_Ram3_ram_demux_ytmp(1);

  rd_data_downsample2_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_data_downsample2_bypass_reg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_1 = '1' THEN
        rd_data_downsample2_bypass_reg <= rd_data_overclock2;
      END IF;
    END IF;
  END PROCESS rd_data_downsample2_bypass_process;

  
  rd_data_1 <= rd_data_overclock2 WHEN enb_1_2_1 = '1' ELSE
      rd_data_downsample2_bypass_reg;

  R0_Ram3 <= rd_data_1(1);

  fx <= h_cnt_1 - h_cnt_1;

  fy <= v_cnt_1 - v_cnt_1;

  p131a00_mul_temp <= (to_unsigned(16#001#, 9) - resize(fx, 9)) * (to_unsigned(16#001#, 9) - resize(fy, 9));
  a00 <= p131a00_mul_temp(0);

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        reduced_reg(0) <= a00;
        reduced_reg(1) <= reduced_reg(0);
      END IF;
    END IF;
  END PROCESS reduced_process;

  a00_1 <= reduced_reg(1);

  R1_data_3_signed <= signed(R1_data_3);

  in_7_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_7_pipe_reg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        in_7_pipe_reg(0) <= R1_data_3_signed;
        in_7_pipe_reg(1) <= in_7_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_7_pipe_process;

  R1_data_3_1 <= in_7_pipe_reg(1);

  delayMatch_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      writeData_R1_3 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        writeData_R1_3 <= R1_data_3_1;
      END IF;
    END IF;
  END PROCESS delayMatch_17_process;


  wr_data_2(0) <= writeData_R1_3;
  wr_data_2(1) <= writeData_R1_3;

  wr_data_overclock2_1 <= wr_data_2;

  ratechange_splitcomp_out0_24 <= wr_data_overclock2_1(0);

  ratechange_splitcomp_out1_24 <= wr_data_overclock2_1(1);

  
  wr_data_3 <= ratechange_splitcomp_out0_24 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_24;

  slicedInput_4 <= mergedOutput(110 DOWNTO 103);

  slicedInput_5 <= mergedOutput(94);

  
  R1_Ram3_ram_wr_en_sig_3 <= '1' WHEN slicedInput_5 /= '0' ELSE
      '0';

  slicedInput_6 <= mergedOutput(102 DOWNTO 95);

  rd_data_signed_1 <= signed(rd_data_2);

  slicedInput_7 <= mergedOutput_1(71 DOWNTO 64);

  R1_Ram3_ram_demux_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R1_Ram3_ram_demux_yreg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        R1_Ram3_ram_demux_yreg <= R1_Ram3_ram_demux_yreg_next;
      END IF;
    END IF;
  END PROCESS R1_Ram3_ram_demux_process;

  R1_Ram3_ram_demux_add_cast <= signed(resize(slicedInput_7, 32));
  R1_Ram3_ram_demux_ctr1 <= R1_Ram3_ram_demux_add_cast + 1;
  
  R1_Ram3_ram_demux_ytmp(0) <= rd_data_signed_1 WHEN R1_Ram3_ram_demux_ctr1 = to_signed(16#00000001#, 32) ELSE
      R1_Ram3_ram_demux_yreg(0);
  
  R1_Ram3_ram_demux_ytmp(1) <= rd_data_signed_1 WHEN R1_Ram3_ram_demux_ctr1 = to_signed(16#00000002#, 32) ELSE
      R1_Ram3_ram_demux_yreg(1);
  R1_Ram3_ram_demux_yreg_next(0) <= R1_Ram3_ram_demux_ytmp(0);
  rd_data_overclock2_1(0) <= R1_Ram3_ram_demux_ytmp(0);
  R1_Ram3_ram_demux_yreg_next(1) <= R1_Ram3_ram_demux_ytmp(1);
  rd_data_overclock2_1(1) <= R1_Ram3_ram_demux_ytmp(1);

  rd_data_downsample2_bypass_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_data_downsample2_bypass_reg_1 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_1 = '1' THEN
        rd_data_downsample2_bypass_reg_1 <= rd_data_overclock2_1;
      END IF;
    END IF;
  END PROCESS rd_data_downsample2_bypass_1_process;

  
  rd_data_3 <= rd_data_overclock2_1 WHEN enb_1_2_1 = '1' ELSE
      rd_data_downsample2_bypass_reg_1;

  R1_Ram3 <= rd_data_3(1);

  
  p136r4_1 <= R1_Ram3 WHEN a00_1 = '1' ELSE
      to_signed(16#0000#, 14);
  p136r4_cast <= resize(p136r4_1, 15);
  r4 <= p136r4_cast(13 DOWNTO 0);

  p137tmp_add_cast <= resize(R0_Ram3, 15);
  p137tmp_add_cast_1 <= resize(r4, 15);
  p137tmp_add_temp <= p137tmp_add_cast + p137tmp_add_cast_1;
  -- CSD Encoding (8192) : 10000000000000; Cost (Adders) = 0
  p137tmp_mul_temp <= resize(p137tmp_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 30);
  p137tmp_cast <= p137tmp_mul_temp(28 DOWNTO 0);
  tmp_35 <= p137tmp_cast(27 DOWNTO 14);

  
  tmp_36 <= R0_Ram3 WHEN tmp_1 = '0' ELSE
      tmp_35;

  
  tmp_37 <= '1' WHEN (resize(h_cnt_1, 9) < to_unsigned(16#0C7#, 9)) AND (resize(v_cnt_1, 9) < to_unsigned(16#0C7#, 9)) ELSE
      '0';

  delayMatch_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch_reg_1(0) <= tmp_37;
        delayMatch_reg_1(1) <= delayMatch_reg_1(0);
      END IF;
    END IF;
  END PROCESS delayMatch_18_process;

  tmp_38 <= delayMatch_reg_1(1);

  R0_data_5_signed <= signed(R0_data_5);

  in_4_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_4_pipe_reg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        in_4_pipe_reg(0) <= R0_data_5_signed;
        in_4_pipe_reg(1) <= in_4_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_4_pipe_process;

  R0_data_5_1 <= in_4_pipe_reg(1);

  delayMatch_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      writeData_R0_5 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        writeData_R0_5 <= R0_data_5_1;
      END IF;
    END IF;
  END PROCESS delayMatch_19_process;


  wr_data_4(0) <= writeData_R0_5;
  wr_data_4(1) <= writeData_R0_5;

  wr_data_overclock2_2 <= wr_data_4;

  ratechange_splitcomp_out0_25 <= wr_data_overclock2_2(0);

  ratechange_splitcomp_out1_25 <= wr_data_overclock2_2(1);

  
  wr_data_5 <= ratechange_splitcomp_out0_25 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_25;

  slicedInput_8 <= mergedOutput(93 DOWNTO 86);

  slicedInput_9 <= mergedOutput(77);

  
  R0_Ram5_ram_wr_en_sig_3 <= '1' WHEN slicedInput_9 /= '0' ELSE
      '0';

  slicedInput_10 <= mergedOutput(85 DOWNTO 78);

  rd_data_signed_2 <= signed(rd_data_4);

  slicedInput_11 <= mergedOutput_1(63 DOWNTO 56);

  R0_Ram5_ram_demux_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R0_Ram5_ram_demux_yreg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        R0_Ram5_ram_demux_yreg <= R0_Ram5_ram_demux_yreg_next;
      END IF;
    END IF;
  END PROCESS R0_Ram5_ram_demux_process;

  R0_Ram5_ram_demux_add_cast <= signed(resize(slicedInput_11, 32));
  R0_Ram5_ram_demux_ctr1 <= R0_Ram5_ram_demux_add_cast + 1;
  
  R0_Ram5_ram_demux_ytmp(0) <= rd_data_signed_2 WHEN R0_Ram5_ram_demux_ctr1 = to_signed(16#00000001#, 32) ELSE
      R0_Ram5_ram_demux_yreg(0);
  
  R0_Ram5_ram_demux_ytmp(1) <= rd_data_signed_2 WHEN R0_Ram5_ram_demux_ctr1 = to_signed(16#00000002#, 32) ELSE
      R0_Ram5_ram_demux_yreg(1);
  R0_Ram5_ram_demux_yreg_next(0) <= R0_Ram5_ram_demux_ytmp(0);
  rd_data_overclock2_2(0) <= R0_Ram5_ram_demux_ytmp(0);
  R0_Ram5_ram_demux_yreg_next(1) <= R0_Ram5_ram_demux_ytmp(1);
  rd_data_overclock2_2(1) <= R0_Ram5_ram_demux_ytmp(1);

  rd_data_downsample2_bypass_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_data_downsample2_bypass_reg_2 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_1 = '1' THEN
        rd_data_downsample2_bypass_reg_2 <= rd_data_overclock2_2;
      END IF;
    END IF;
  END PROCESS rd_data_downsample2_bypass_2_process;

  
  rd_data_5 <= rd_data_overclock2_2 WHEN enb_1_2_1 = '1' ELSE
      rd_data_downsample2_bypass_reg_2;

  R0_Ram5 <= rd_data_5(1);

  p114tmp_cast <= resize(R0_Ram5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 29);
  p114tmp_cast_1 <= p114tmp_cast(27 DOWNTO 0);
  tmp_39 <= p114tmp_cast_1(27 DOWNTO 14);

  R1_data_5_signed <= signed(R1_data_5);

  in_9_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_9_pipe_reg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        in_9_pipe_reg(0) <= R1_data_5_signed;
        in_9_pipe_reg(1) <= in_9_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_9_pipe_process;

  R1_data_5_1 <= in_9_pipe_reg(1);

  delayMatch_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      writeData_R1_5 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        writeData_R1_5 <= R1_data_5_1;
      END IF;
    END IF;
  END PROCESS delayMatch_20_process;


  wr_data_6(0) <= writeData_R1_5;
  wr_data_6(1) <= writeData_R1_5;

  wr_data_overclock2_3 <= wr_data_6;

  ratechange_splitcomp_out0_26 <= wr_data_overclock2_3(0);

  ratechange_splitcomp_out1_26 <= wr_data_overclock2_3(1);

  
  wr_data_7 <= ratechange_splitcomp_out0_26 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_26;

  slicedInput_12 <= mergedOutput(76 DOWNTO 69);

  slicedInput_13 <= mergedOutput(60);

  
  R1_Ram5_ram_wr_en_sig_3 <= '1' WHEN slicedInput_13 /= '0' ELSE
      '0';

  slicedInput_14 <= mergedOutput(68 DOWNTO 61);

  rd_data_signed_3 <= signed(rd_data_6);

  slicedInput_15 <= mergedOutput_1(55 DOWNTO 48);

  R1_Ram5_ram_demux_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R1_Ram5_ram_demux_yreg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        R1_Ram5_ram_demux_yreg <= R1_Ram5_ram_demux_yreg_next;
      END IF;
    END IF;
  END PROCESS R1_Ram5_ram_demux_process;

  R1_Ram5_ram_demux_add_cast <= signed(resize(slicedInput_15, 32));
  R1_Ram5_ram_demux_ctr1 <= R1_Ram5_ram_demux_add_cast + 1;
  
  R1_Ram5_ram_demux_ytmp(0) <= rd_data_signed_3 WHEN R1_Ram5_ram_demux_ctr1 = to_signed(16#00000001#, 32) ELSE
      R1_Ram5_ram_demux_yreg(0);
  
  R1_Ram5_ram_demux_ytmp(1) <= rd_data_signed_3 WHEN R1_Ram5_ram_demux_ctr1 = to_signed(16#00000002#, 32) ELSE
      R1_Ram5_ram_demux_yreg(1);
  R1_Ram5_ram_demux_yreg_next(0) <= R1_Ram5_ram_demux_ytmp(0);
  rd_data_overclock2_3(0) <= R1_Ram5_ram_demux_ytmp(0);
  R1_Ram5_ram_demux_yreg_next(1) <= R1_Ram5_ram_demux_ytmp(1);
  rd_data_overclock2_3(1) <= R1_Ram5_ram_demux_ytmp(1);

  rd_data_downsample2_bypass_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_data_downsample2_bypass_reg_3 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_1 = '1' THEN
        rd_data_downsample2_bypass_reg_3 <= rd_data_overclock2_3;
      END IF;
    END IF;
  END PROCESS rd_data_downsample2_bypass_3_process;

  
  rd_data_7 <= rd_data_overclock2_3 WHEN enb_1_2_1 = '1' ELSE
      rd_data_downsample2_bypass_reg_3;

  R1_Ram5 <= rd_data_7(1);

  
  p132r6_1 <= R1_Ram5 WHEN a00_1 = '1' ELSE
      to_signed(16#0000#, 14);
  p132r6_cast <= resize(p132r6_1, 15);
  r6 <= p132r6_cast(13 DOWNTO 0);

  p133tmp_add_cast <= resize(R0_Ram5, 15);
  p133tmp_add_cast_1 <= resize(r6, 15);
  p133tmp_add_temp <= p133tmp_add_cast + p133tmp_add_cast_1;
  -- CSD Encoding (8192) : 10000000000000; Cost (Adders) = 0
  p133tmp_mul_temp <= resize(p133tmp_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 30);
  p133tmp_cast <= p133tmp_mul_temp(28 DOWNTO 0);
  tmp_40 <= p133tmp_cast(28 DOWNTO 15);

  
  tmp_41 <= tmp_39 WHEN tmp_38 = '0' ELSE
      tmp_40;

  --------------------------------------------
  p19M_1_mul_temp <= tmp_36 * tmp_36;
  p19M_1_add_cast <= resize(p19M_1_mul_temp, 31);
  p19M_1_mul_temp_1 <= tmp_41 * tmp_41;
  p19M_1_add_cast_1 <= resize(p19M_1_mul_temp_1 & '0' & '0', 31);
  p19M_1_add_temp <= p19M_1_add_cast + p19M_1_add_cast_1;
  M_1_tmp <= unsigned(p19M_1_add_temp(25 DOWNTO 12));

  M_1 <= std_logic_vector(M_1_tmp);

  
  tmp_42 <= '1' WHEN (resize(h_cnt_1, 9) < to_unsigned(16#0C7#, 9)) AND (resize(v_cnt_1, 9) < to_unsigned(16#0C7#, 9)) ELSE
      '0';

  delayMatch_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_2 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch_reg_2(0) <= tmp_42;
        delayMatch_reg_2(1) <= delayMatch_reg_2(0);
      END IF;
    END IF;
  END PROCESS delayMatch_21_process;

  tmp_43 <= delayMatch_reg_2(1);

  R0_data_4_signed <= signed(R0_data_4);

  in_3_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_3_pipe_reg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        in_3_pipe_reg(0) <= R0_data_4_signed;
        in_3_pipe_reg(1) <= in_3_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_3_pipe_process;

  R0_data_4_1 <= in_3_pipe_reg(1);

  delayMatch_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      writeData_R0_4 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        writeData_R0_4 <= R0_data_4_1;
      END IF;
    END IF;
  END PROCESS delayMatch_22_process;


  wr_data_8(0) <= writeData_R0_4;
  wr_data_8(1) <= writeData_R0_4;

  wr_data_overclock2_4 <= wr_data_8;

  ratechange_splitcomp_out0_27 <= wr_data_overclock2_4(0);

  ratechange_splitcomp_out1_27 <= wr_data_overclock2_4(1);

  
  wr_data_9 <= ratechange_splitcomp_out0_27 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_27;

  slicedInput_16 <= mergedOutput(59 DOWNTO 52);

  slicedInput_17 <= mergedOutput(43);

  
  R0_Ram4_ram_wr_en_sig_3 <= '1' WHEN slicedInput_17 /= '0' ELSE
      '0';

  slicedInput_18 <= mergedOutput(51 DOWNTO 44);

  rd_data_signed_4 <= signed(rd_data_8);

  slicedInput_19 <= mergedOutput_1(47 DOWNTO 40);

  R0_Ram4_ram_demux_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R0_Ram4_ram_demux_yreg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        R0_Ram4_ram_demux_yreg <= R0_Ram4_ram_demux_yreg_next;
      END IF;
    END IF;
  END PROCESS R0_Ram4_ram_demux_process;

  R0_Ram4_ram_demux_add_cast <= signed(resize(slicedInput_19, 32));
  R0_Ram4_ram_demux_ctr1 <= R0_Ram4_ram_demux_add_cast + 1;
  
  R0_Ram4_ram_demux_ytmp(0) <= rd_data_signed_4 WHEN R0_Ram4_ram_demux_ctr1 = to_signed(16#00000001#, 32) ELSE
      R0_Ram4_ram_demux_yreg(0);
  
  R0_Ram4_ram_demux_ytmp(1) <= rd_data_signed_4 WHEN R0_Ram4_ram_demux_ctr1 = to_signed(16#00000002#, 32) ELSE
      R0_Ram4_ram_demux_yreg(1);
  R0_Ram4_ram_demux_yreg_next(0) <= R0_Ram4_ram_demux_ytmp(0);
  rd_data_overclock2_4(0) <= R0_Ram4_ram_demux_ytmp(0);
  R0_Ram4_ram_demux_yreg_next(1) <= R0_Ram4_ram_demux_ytmp(1);
  rd_data_overclock2_4(1) <= R0_Ram4_ram_demux_ytmp(1);

  rd_data_downsample2_bypass_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_data_downsample2_bypass_reg_4 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_1 = '1' THEN
        rd_data_downsample2_bypass_reg_4 <= rd_data_overclock2_4;
      END IF;
    END IF;
  END PROCESS rd_data_downsample2_bypass_4_process;

  
  rd_data_9 <= rd_data_overclock2_4 WHEN enb_1_2_1 = '1' ELSE
      rd_data_downsample2_bypass_reg_4;

  R0_Ram4 <= rd_data_9(1);

  R1_data_4_signed <= signed(R1_data_4);

  in_8_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_8_pipe_reg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        in_8_pipe_reg(0) <= R1_data_4_signed;
        in_8_pipe_reg(1) <= in_8_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_8_pipe_process;

  R1_data_4_1 <= in_8_pipe_reg(1);

  delayMatch_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      writeData_R1_4 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        writeData_R1_4 <= R1_data_4_1;
      END IF;
    END IF;
  END PROCESS delayMatch_23_process;


  wr_data_10(0) <= writeData_R1_4;
  wr_data_10(1) <= writeData_R1_4;

  wr_data_overclock2_5 <= wr_data_10;

  ratechange_splitcomp_out0_28 <= wr_data_overclock2_5(0);

  ratechange_splitcomp_out1_28 <= wr_data_overclock2_5(1);

  
  wr_data_11 <= ratechange_splitcomp_out0_28 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_28;

  slicedInput_20 <= mergedOutput(42 DOWNTO 35);

  slicedInput_21 <= mergedOutput(26);

  
  R1_Ram4_ram_wr_en_sig_3 <= '1' WHEN slicedInput_21 /= '0' ELSE
      '0';

  slicedInput_22 <= mergedOutput(34 DOWNTO 27);

  rd_data_signed_5 <= signed(rd_data_10);

  slicedInput_23 <= mergedOutput_1(39 DOWNTO 32);

  R1_Ram4_ram_demux_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R1_Ram4_ram_demux_yreg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        R1_Ram4_ram_demux_yreg <= R1_Ram4_ram_demux_yreg_next;
      END IF;
    END IF;
  END PROCESS R1_Ram4_ram_demux_process;

  R1_Ram4_ram_demux_add_cast <= signed(resize(slicedInput_23, 32));
  R1_Ram4_ram_demux_ctr1 <= R1_Ram4_ram_demux_add_cast + 1;
  
  R1_Ram4_ram_demux_ytmp(0) <= rd_data_signed_5 WHEN R1_Ram4_ram_demux_ctr1 = to_signed(16#00000001#, 32) ELSE
      R1_Ram4_ram_demux_yreg(0);
  
  R1_Ram4_ram_demux_ytmp(1) <= rd_data_signed_5 WHEN R1_Ram4_ram_demux_ctr1 = to_signed(16#00000002#, 32) ELSE
      R1_Ram4_ram_demux_yreg(1);
  R1_Ram4_ram_demux_yreg_next(0) <= R1_Ram4_ram_demux_ytmp(0);
  rd_data_overclock2_5(0) <= R1_Ram4_ram_demux_ytmp(0);
  R1_Ram4_ram_demux_yreg_next(1) <= R1_Ram4_ram_demux_ytmp(1);
  rd_data_overclock2_5(1) <= R1_Ram4_ram_demux_ytmp(1);

  rd_data_downsample2_bypass_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_data_downsample2_bypass_reg_5 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_1 = '1' THEN
        rd_data_downsample2_bypass_reg_5 <= rd_data_overclock2_5;
      END IF;
    END IF;
  END PROCESS rd_data_downsample2_bypass_5_process;

  
  rd_data_11 <= rd_data_overclock2_5 WHEN enb_1_2_1 = '1' ELSE
      rd_data_downsample2_bypass_reg_5;

  R1_Ram4 <= rd_data_11(1);

  
  p134r5_1 <= R1_Ram4 WHEN a00_1 = '1' ELSE
      to_signed(16#0000#, 14);
  p134r5_cast <= resize(p134r5_1, 15);
  r5 <= p134r5_cast(13 DOWNTO 0);

  p135tmp_add_cast <= resize(R0_Ram4, 15);
  p135tmp_add_cast_1 <= resize(r5, 15);
  p135tmp_add_temp <= p135tmp_add_cast + p135tmp_add_cast_1;
  -- CSD Encoding (8192) : 10000000000000; Cost (Adders) = 0
  p135tmp_mul_temp <= resize(p135tmp_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 30);
  p135tmp_cast <= p135tmp_mul_temp(28 DOWNTO 0);
  tmp_44 <= p135tmp_cast(27 DOWNTO 14);

  
  tmp_45 <= R0_Ram4 WHEN tmp_43 = '0' ELSE
      tmp_44;

  p18M_2_add_cast <= resize(tmp_36, 15);
  p18M_2_add_cast_1 <= resize(tmp_45, 15);
  p18M_2_add_temp <= p18M_2_add_cast + p18M_2_add_cast_1;
  p18M_2_mul_temp <= p18M_2_add_temp * tmp_41;
  M_2_tmp <= p18M_2_mul_temp(22 DOWNTO 9);

  M_2 <= std_logic_vector(M_2_tmp);

  p17M_3_mul_temp <= tmp_45 * tmp_45;
  p17M_3_add_cast <= resize(p17M_3_mul_temp, 31);
  p17M_3_mul_temp_1 <= tmp_41 * tmp_41;
  p17M_3_add_cast_1 <= resize(p17M_3_mul_temp_1 & '0' & '0', 31);
  p17M_3_add_temp <= p17M_3_add_cast + p17M_3_add_cast_1;
  M_3_tmp <= unsigned(p17M_3_add_temp(25 DOWNTO 12));

  M_3 <= std_logic_vector(M_3_tmp);

  R0_data_1_signed <= signed(R0_data_1);

  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  --                                                                          %
  -- 
  --           Generated by MATLAB 9.7 and Fixed-Point Designer 6.4           %
  -- 
  --                                                                          %
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  --------------------------------------------
  -- 
  --------------------------------------------
  -- 
  --------------------------------------------
  -- 
  ---------------------- write BRAM
  in_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_0_pipe_reg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        in_0_pipe_reg(0) <= R0_data_1_signed;
        in_0_pipe_reg(1) <= in_0_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;

  R0_data_1_1 <= in_0_pipe_reg(1);

  delayMatch_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      writeData_R0_1 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        writeData_R0_1 <= R0_data_1_1;
      END IF;
    END IF;
  END PROCESS delayMatch_24_process;


  wr_data_12(0) <= writeData_R0_1;
  wr_data_12(1) <= writeData_R0_1;

  wr_data_overclock2_6 <= wr_data_12;

  ratechange_splitcomp_out0_29 <= wr_data_overclock2_6(0);

  ratechange_splitcomp_out1_29 <= wr_data_overclock2_6(1);

  
  wr_data_13 <= ratechange_splitcomp_out0_29 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_29;

  slicedInput_24 <= mergedOutput(25 DOWNTO 18);

  slicedInput_25 <= mergedOutput(9);

  
  R0_Ram1_ram_wr_en_sig_3 <= '1' WHEN slicedInput_25 /= '0' ELSE
      '0';

  slicedInput_26 <= mergedOutput(17 DOWNTO 10);

  rd_data_signed_6 <= signed(rd_data_12);

  slicedInput_27 <= mergedOutput_1(31 DOWNTO 24);

  R0_Ram1_ram_demux_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R0_Ram1_ram_demux_yreg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        R0_Ram1_ram_demux_yreg <= R0_Ram1_ram_demux_yreg_next;
      END IF;
    END IF;
  END PROCESS R0_Ram1_ram_demux_process;

  R0_Ram1_ram_demux_add_cast <= signed(resize(slicedInput_27, 32));
  R0_Ram1_ram_demux_ctr1 <= R0_Ram1_ram_demux_add_cast + 1;
  
  R0_Ram1_ram_demux_ytmp(0) <= rd_data_signed_6 WHEN R0_Ram1_ram_demux_ctr1 = to_signed(16#00000001#, 32) ELSE
      R0_Ram1_ram_demux_yreg(0);
  
  R0_Ram1_ram_demux_ytmp(1) <= rd_data_signed_6 WHEN R0_Ram1_ram_demux_ctr1 = to_signed(16#00000002#, 32) ELSE
      R0_Ram1_ram_demux_yreg(1);
  R0_Ram1_ram_demux_yreg_next(0) <= R0_Ram1_ram_demux_ytmp(0);
  rd_data_overclock2_6(0) <= R0_Ram1_ram_demux_ytmp(0);
  R0_Ram1_ram_demux_yreg_next(1) <= R0_Ram1_ram_demux_ytmp(1);
  rd_data_overclock2_6(1) <= R0_Ram1_ram_demux_ytmp(1);

  
  tmp_46 <= '1' WHEN (resize(h_cnt_1, 9) < to_unsigned(16#0C7#, 9)) AND (resize(v_cnt_1, 9) < to_unsigned(16#0C7#, 9)) ELSE
      '0';

  delayMatch_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_3 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch_reg_3(0) <= tmp_46;
        delayMatch_reg_3(1) <= delayMatch_reg_3(0);
      END IF;
    END IF;
  END PROCESS delayMatch_25_process;

  tmp_47 <= delayMatch_reg_3(1);

  -- HDL code generation from MATLAB function: UpdateMatrices_pipeline1_fixpt_falseregionp26
  r2 <= to_signed(16#0000#, 14);

  delayMatch_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_4 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch_reg_4(0) <= r2;
        delayMatch_reg_4(1 TO 3) <= delayMatch_reg_4(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_26_process;

  r2_1 <= delayMatch_reg_4(3);

  R1_data_1_signed <= signed(R1_data_1);

  in_5_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_5_pipe_reg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        in_5_pipe_reg(0) <= R1_data_1_signed;
        in_5_pipe_reg(1) <= in_5_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_5_pipe_process;

  R1_data_1_1 <= in_5_pipe_reg(1);

  delayMatch_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      writeData_R1_1 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        writeData_R1_1 <= R1_data_1_1;
      END IF;
    END IF;
  END PROCESS delayMatch_27_process;


  wr_data_14(0) <= writeData_R1_1;
  wr_data_14(1) <= writeData_R1_1;

  wr_data_overclock2_7 <= wr_data_14;

  ratechange_splitcomp_out0_30 <= wr_data_overclock2_7(0);

  ratechange_splitcomp_out1_30 <= wr_data_overclock2_7(1);

  p93tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_48 <= p93tmp_sub_cast - 1;

  delayMatch_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_49 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_49 <= tmp_48;
      END IF;
    END IF;
  END PROCESS delayMatch_28_process;


  indexLogic_fixptsig_15 <= unsigned(tmp_49(7 DOWNTO 0));

  rd_addr_14(0) <= indexLogic_fixptsig_15;
  rd_addr_14(1) <= indexLogic_fixptsig_15;

  rd_addr_overclock2_7 <= rd_addr_14;

  ratechange_splitcomp_out0_31 <= rd_addr_overclock2_7(0);

  ratechange_splitcomp_out1_31 <= rd_addr_overclock2_7(1);

  
  rd_addr_15 <= ratechange_splitcomp_out0_31 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_31;

  
  wr_data_15 <= ratechange_splitcomp_out0_30 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_30;

  slicedInput_28 <= mergedOutput(8 DOWNTO 1);

  slicedInput_29 <= mergedOutput(0);

  
  R1_Ram1_ram_wr_en_sig_3 <= '1' WHEN slicedInput_29 /= '0' ELSE
      '0';

  delayMatch_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_5 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_5(0) <= rd_addr_15;
        delayMatch_reg_5(1 TO 3) <= delayMatch_reg_5(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_29_process;

  rd_addr_16 <= delayMatch_reg_5(3);

  rd_data_signed_7 <= signed(rd_data_13);

  slicedInput_30 <= mergedOutput_1(23 DOWNTO 16);

  R1_Ram1_ram_demux_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R1_Ram1_ram_demux_yreg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        R1_Ram1_ram_demux_yreg <= R1_Ram1_ram_demux_yreg_next;
      END IF;
    END IF;
  END PROCESS R1_Ram1_ram_demux_process;

  R1_Ram1_ram_demux_add_cast <= signed(resize(slicedInput_30, 32));
  R1_Ram1_ram_demux_ctr1 <= R1_Ram1_ram_demux_add_cast + 1;
  
  R1_Ram1_ram_demux_ytmp(0) <= rd_data_signed_7 WHEN R1_Ram1_ram_demux_ctr1 = to_signed(16#00000001#, 32) ELSE
      R1_Ram1_ram_demux_yreg(0);
  
  R1_Ram1_ram_demux_ytmp(1) <= rd_data_signed_7 WHEN R1_Ram1_ram_demux_ctr1 = to_signed(16#00000002#, 32) ELSE
      R1_Ram1_ram_demux_yreg(1);
  R1_Ram1_ram_demux_yreg_next(0) <= R1_Ram1_ram_demux_ytmp(0);
  rd_data_overclock2_7(0) <= R1_Ram1_ram_demux_ytmp(0);
  R1_Ram1_ram_demux_yreg_next(1) <= R1_Ram1_ram_demux_ytmp(1);
  rd_data_overclock2_7(1) <= R1_Ram1_ram_demux_ytmp(1);

  rd_data_downsample2_bypass_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_data_downsample2_bypass_reg_6 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_1 = '1' THEN
        rd_data_downsample2_bypass_reg_6 <= rd_data_overclock2_7;
      END IF;
    END IF;
  END PROCESS rd_data_downsample2_bypass_6_process;

  
  rd_data_14 <= rd_data_overclock2_7 WHEN enb_1_2_1 = '1' ELSE
      rd_data_downsample2_bypass_reg_6;

  R1_Ram1 <= rd_data_14(1);

  rd_data_downsample2_bypass_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_data_downsample2_bypass_reg_7 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_1 = '1' THEN
        rd_data_downsample2_bypass_reg_7 <= rd_data_overclock2_6;
      END IF;
    END IF;
  END PROCESS rd_data_downsample2_bypass_7_process;

  
  rd_data_15 <= rd_data_overclock2_6 WHEN enb_1_2_1 = '1' ELSE
      rd_data_downsample2_bypass_reg_7;

  R0_Ram1 <= rd_data_15(1);

  -- HDL code generation from MATLAB function: UpdateMatrices_pipeline1_fixpt_trueregionp26
  
  p139tmp_1 <= R1_Ram1 WHEN a00_1 = '1' ELSE
      to_signed(16#0000#, 14);
  p139tmp_cast <= resize(p139tmp_1, 15);
  tmp_50 <= p139tmp_cast(13 DOWNTO 0);

  
  tmp_51 <= r2_1 WHEN tmp_47 = '0' ELSE
      tmp_50;

  --------------------------------------------
  p21r2_sub_cast <= resize(R0_Ram1, 15);
  p21r2_sub_cast_1 <= resize(tmp_51, 15);
  p21r2_sub_temp <= p21r2_sub_cast - p21r2_sub_cast_1;
  -- CSD Encoding (8192) : 10000000000000; Cost (Adders) = 0
  p21r2_mul_temp <= resize(p21r2_sub_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 30);
  p21r2_cast <= p21r2_mul_temp(28 DOWNTO 0);
  r2_2 <= p21r2_cast(27 DOWNTO 14);

  R0_data_2_signed <= signed(R0_data_2);

  in_1_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_1_pipe_reg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        in_1_pipe_reg(0) <= R0_data_2_signed;
        in_1_pipe_reg(1) <= in_1_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;

  R0_data_2_1 <= in_1_pipe_reg(1);

  delayMatch_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      writeData_R0_2 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        writeData_R0_2 <= R0_data_2_1;
      END IF;
    END IF;
  END PROCESS delayMatch_30_process;


  wr_data_16(0) <= writeData_R0_2;
  wr_data_16(1) <= writeData_R0_2;

  wr_data_overclock2_8 <= wr_data_16;

  ratechange_splitcomp_out0_32 <= wr_data_overclock2_8(0);

  ratechange_splitcomp_out1_32 <= wr_data_overclock2_8(1);

  p60tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_52 <= p60tmp_sub_cast - 1;

  delayMatch_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_53 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_53 <= tmp_52;
      END IF;
    END IF;
  END PROCESS delayMatch_31_process;


  indexLogic_fixptsig_16 <= unsigned(tmp_53(7 DOWNTO 0));

  wr_addr_16(0) <= indexLogic_fixptsig_16;
  wr_addr_16(1) <= indexLogic_fixptsig_16;

  wr_addr_overclock2_8 <= wr_addr_16;

  ratechange_splitcomp_out0_33 <= wr_addr_overclock2_8(0);

  ratechange_splitcomp_out1_33 <= wr_addr_overclock2_8(1);

  
  wr_addr_17 <= ratechange_splitcomp_out0_33 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_33;

  
  wr_data_17 <= ratechange_splitcomp_out0_32 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_32;

  delayMatch_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_6 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_6(0) <= wr_addr_17;
        delayMatch_reg_6(1 TO 3) <= delayMatch_reg_6(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_32_process;

  wr_addr_18 <= delayMatch_reg_6(3);

  R0_Ram2_ram_wr_en_k_0_sig <= '1';

  R0_Ram2_ram_wr_en_k_1_sig <= '0';

  R0_Ram2_ram_wr_en_sig(0) <= R0_Ram2_ram_wr_en_k_0_sig;
  R0_Ram2_ram_wr_en_sig(1) <= R0_Ram2_ram_wr_en_k_1_sig;

  R0_Ram2_ram_wren_match_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R0_Ram2_ram_wr_en_sig_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        R0_Ram2_ram_wr_en_sig_1 <= R0_Ram2_ram_wr_en_sig;
      END IF;
    END IF;
  END PROCESS R0_Ram2_ram_wren_match_process;


  R0_Ram2_ram_wr_en_sig_overclock2 <= R0_Ram2_ram_wr_en_sig_1;

  ratechange_splitcomp_out0_34 <= R0_Ram2_ram_wr_en_sig_overclock2(0);

  ratechange_splitcomp_out1_34 <= R0_Ram2_ram_wr_en_sig_overclock2(1);

  
  R0_Ram2_ram_wr_en_sig_2 <= ratechange_splitcomp_out0_34 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_34;

  p81tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_54 <= p81tmp_sub_cast - 1;

  delayMatch_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_55 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_55 <= tmp_54;
      END IF;
    END IF;
  END PROCESS delayMatch_33_process;


  indexLogic_fixptsig_17 <= unsigned(tmp_55(7 DOWNTO 0));

  rd_addr_17(0) <= indexLogic_fixptsig_17;
  rd_addr_17(1) <= indexLogic_fixptsig_17;

  rd_addr_overclock2_8 <= rd_addr_17;

  ratechange_splitcomp_out0_35 <= rd_addr_overclock2_8(0);

  ratechange_splitcomp_out1_35 <= rd_addr_overclock2_8(1);

  
  rd_addr_18 <= ratechange_splitcomp_out0_35 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_35;

  delayMatch_34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_7 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_7(0) <= R0_Ram2_ram_wr_en_sig_2;
        delayMatch_reg_7(1 TO 3) <= delayMatch_reg_7(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_34_process;

  R0_Ram2_ram_wr_en_sig_3 <= delayMatch_reg_7(3);

  delayMatch_35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_8 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_8(0) <= rd_addr_18;
        delayMatch_reg_8(1 TO 3) <= delayMatch_reg_8(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_35_process;

  rd_addr_19 <= delayMatch_reg_8(3);

  rd_data_signed_8 <= signed(rd_data_16);

  slicedInput_31 <= mergedOutput_1(15 DOWNTO 8);

  R0_Ram2_ram_demux_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R0_Ram2_ram_demux_yreg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        R0_Ram2_ram_demux_yreg <= R0_Ram2_ram_demux_yreg_next;
      END IF;
    END IF;
  END PROCESS R0_Ram2_ram_demux_process;

  R0_Ram2_ram_demux_add_cast <= signed(resize(slicedInput_31, 32));
  R0_Ram2_ram_demux_ctr1 <= R0_Ram2_ram_demux_add_cast + 1;
  
  R0_Ram2_ram_demux_ytmp(0) <= rd_data_signed_8 WHEN R0_Ram2_ram_demux_ctr1 = to_signed(16#00000001#, 32) ELSE
      R0_Ram2_ram_demux_yreg(0);
  
  R0_Ram2_ram_demux_ytmp(1) <= rd_data_signed_8 WHEN R0_Ram2_ram_demux_ctr1 = to_signed(16#00000002#, 32) ELSE
      R0_Ram2_ram_demux_yreg(1);
  R0_Ram2_ram_demux_yreg_next(0) <= R0_Ram2_ram_demux_ytmp(0);
  rd_data_overclock2_8(0) <= R0_Ram2_ram_demux_ytmp(0);
  R0_Ram2_ram_demux_yreg_next(1) <= R0_Ram2_ram_demux_ytmp(1);
  rd_data_overclock2_8(1) <= R0_Ram2_ram_demux_ytmp(1);

  
  tmp_56 <= '1' WHEN (resize(h_cnt_1, 9) < to_unsigned(16#0C7#, 9)) AND (resize(v_cnt_1, 9) < to_unsigned(16#0C7#, 9)) ELSE
      '0';

  delayMatch_36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_9 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch_reg_9(0) <= tmp_56;
        delayMatch_reg_9(1) <= delayMatch_reg_9(0);
      END IF;
    END IF;
  END PROCESS delayMatch_36_process;

  tmp_57 <= delayMatch_reg_9(1);

  -- HDL code generation from MATLAB function: UpdateMatrices_pipeline1_fixpt_falseregionp22
  r3 <= to_signed(16#0000#, 14);

  delayMatch_37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_10 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch_reg_10(0) <= r3;
        delayMatch_reg_10(1 TO 3) <= delayMatch_reg_10(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_37_process;

  r3_1 <= delayMatch_reg_10(3);

  R1_data_2_signed <= signed(R1_data_2);

  in_6_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_6_pipe_reg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        in_6_pipe_reg(0) <= R1_data_2_signed;
        in_6_pipe_reg(1) <= in_6_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_6_pipe_process;

  R1_data_2_1 <= in_6_pipe_reg(1);

  delayMatch_38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      writeData_R1_2 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        writeData_R1_2 <= R1_data_2_1;
      END IF;
    END IF;
  END PROCESS delayMatch_38_process;


  wr_data_18(0) <= writeData_R1_2;
  wr_data_18(1) <= writeData_R1_2;

  wr_data_overclock2_9 <= wr_data_18;

  ratechange_splitcomp_out0_36 <= wr_data_overclock2_9(0);

  ratechange_splitcomp_out1_36 <= wr_data_overclock2_9(1);

  p70tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_58 <= p70tmp_sub_cast - 1;

  delayMatch_39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_59 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_59 <= tmp_58;
      END IF;
    END IF;
  END PROCESS delayMatch_39_process;


  indexLogic_fixptsig_18 <= unsigned(tmp_59(7 DOWNTO 0));

  wr_addr_19(0) <= indexLogic_fixptsig_18;
  wr_addr_19(1) <= indexLogic_fixptsig_18;

  wr_addr_overclock2_9 <= wr_addr_19;

  ratechange_splitcomp_out0_37 <= wr_addr_overclock2_9(0);

  ratechange_splitcomp_out1_37 <= wr_addr_overclock2_9(1);

  
  wr_addr_20 <= ratechange_splitcomp_out0_37 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_37;

  
  wr_data_19 <= ratechange_splitcomp_out0_36 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_36;

  delayMatch_40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_11 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_11(0) <= wr_addr_20;
        delayMatch_reg_11(1 TO 3) <= delayMatch_reg_11(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_40_process;

  wr_addr_21 <= delayMatch_reg_11(3);

  R1_Ram2_ram_wr_en_k_0_sig <= '1';

  R1_Ram2_ram_wr_en_k_1_sig <= '0';

  R1_Ram2_ram_wr_en_sig(0) <= R1_Ram2_ram_wr_en_k_0_sig;
  R1_Ram2_ram_wr_en_sig(1) <= R1_Ram2_ram_wr_en_k_1_sig;

  R1_Ram2_ram_wren_match_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R1_Ram2_ram_wr_en_sig_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        R1_Ram2_ram_wr_en_sig_1 <= R1_Ram2_ram_wr_en_sig;
      END IF;
    END IF;
  END PROCESS R1_Ram2_ram_wren_match_process;


  R1_Ram2_ram_wr_en_sig_overclock2 <= R1_Ram2_ram_wr_en_sig_1;

  ratechange_splitcomp_out0_38 <= R1_Ram2_ram_wr_en_sig_overclock2(0);

  ratechange_splitcomp_out1_38 <= R1_Ram2_ram_wr_en_sig_overclock2(1);

  
  R1_Ram2_ram_wr_en_sig_2 <= ratechange_splitcomp_out0_38 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_38;

  p96tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_60 <= p96tmp_sub_cast - 1;

  delayMatch_41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_61 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_61 <= tmp_60;
      END IF;
    END IF;
  END PROCESS delayMatch_41_process;


  indexLogic_fixptsig_19 <= unsigned(tmp_61(7 DOWNTO 0));

  rd_addr_20(0) <= indexLogic_fixptsig_19;
  rd_addr_20(1) <= indexLogic_fixptsig_19;

  rd_addr_overclock2_9 <= rd_addr_20;

  ratechange_splitcomp_out0_39 <= rd_addr_overclock2_9(0);

  ratechange_splitcomp_out1_39 <= rd_addr_overclock2_9(1);

  
  rd_addr_21 <= ratechange_splitcomp_out0_39 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_39;

  delayMatch_42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_12 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_12(0) <= R1_Ram2_ram_wr_en_sig_2;
        delayMatch_reg_12(1 TO 3) <= delayMatch_reg_12(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_42_process;

  R1_Ram2_ram_wr_en_sig_3 <= delayMatch_reg_12(3);

  delayMatch_43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_13 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_13(0) <= rd_addr_21;
        delayMatch_reg_13(1 TO 3) <= delayMatch_reg_13(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_43_process;

  rd_addr_22 <= delayMatch_reg_13(3);

  rd_data_signed_9 <= signed(rd_data_17);

  slicedInput_32 <= mergedOutput_1(7 DOWNTO 0);

  R1_Ram2_ram_demux_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      R1_Ram2_ram_demux_yreg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        R1_Ram2_ram_demux_yreg <= R1_Ram2_ram_demux_yreg_next;
      END IF;
    END IF;
  END PROCESS R1_Ram2_ram_demux_process;

  R1_Ram2_ram_demux_add_cast <= signed(resize(slicedInput_32, 32));
  R1_Ram2_ram_demux_ctr1 <= R1_Ram2_ram_demux_add_cast + 1;
  
  R1_Ram2_ram_demux_ytmp(0) <= rd_data_signed_9 WHEN R1_Ram2_ram_demux_ctr1 = to_signed(16#00000001#, 32) ELSE
      R1_Ram2_ram_demux_yreg(0);
  
  R1_Ram2_ram_demux_ytmp(1) <= rd_data_signed_9 WHEN R1_Ram2_ram_demux_ctr1 = to_signed(16#00000002#, 32) ELSE
      R1_Ram2_ram_demux_yreg(1);
  R1_Ram2_ram_demux_yreg_next(0) <= R1_Ram2_ram_demux_ytmp(0);
  rd_data_overclock2_9(0) <= R1_Ram2_ram_demux_ytmp(0);
  R1_Ram2_ram_demux_yreg_next(1) <= R1_Ram2_ram_demux_ytmp(1);
  rd_data_overclock2_9(1) <= R1_Ram2_ram_demux_ytmp(1);

  rd_data_downsample2_bypass_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_data_downsample2_bypass_reg_8 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_1 = '1' THEN
        rd_data_downsample2_bypass_reg_8 <= rd_data_overclock2_9;
      END IF;
    END IF;
  END PROCESS rd_data_downsample2_bypass_8_process;

  
  rd_data_18 <= rd_data_overclock2_9 WHEN enb_1_2_1 = '1' ELSE
      rd_data_downsample2_bypass_reg_8;

  R1_Ram2 <= rd_data_18(1);

  rd_data_downsample2_bypass_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_data_downsample2_bypass_reg_9 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_1 = '1' THEN
        rd_data_downsample2_bypass_reg_9 <= rd_data_overclock2_8;
      END IF;
    END IF;
  END PROCESS rd_data_downsample2_bypass_9_process;

  
  rd_data_19 <= rd_data_overclock2_8 WHEN enb_1_2_1 = '1' ELSE
      rd_data_downsample2_bypass_reg_9;

  R0_Ram2 <= rd_data_19(1);

  -- HDL code generation from MATLAB function: UpdateMatrices_pipeline1_fixpt_trueregionp22
  
  p138tmp_1 <= R1_Ram2 WHEN a00_1 = '1' ELSE
      to_signed(16#0000#, 14);
  p138tmp_cast <= resize(p138tmp_1, 15);
  tmp_62 <= p138tmp_cast(13 DOWNTO 0);

  
  tmp_63 <= r3_1 WHEN tmp_57 = '0' ELSE
      tmp_62;

  p20r3_sub_cast <= resize(R0_Ram2, 15);
  p20r3_sub_cast_1 <= resize(tmp_63, 15);
  p20r3_sub_temp <= p20r3_sub_cast - p20r3_sub_cast_1;
  -- CSD Encoding (8192) : 10000000000000; Cost (Adders) = 0
  p20r3_mul_temp <= resize(p20r3_sub_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 30);
  p20r3_cast <= p20r3_mul_temp(28 DOWNTO 0);
  r3_2 <= p20r3_cast(27 DOWNTO 14);

  p16M_4_mul_temp <= tmp_36 * r2_2;
  p16M_4_add_cast <= resize(p16M_4_mul_temp, 31);
  p16M_4_mul_temp_1 <= tmp_41 * r3_2;
  p16M_4_add_cast_1 <= resize(p16M_4_mul_temp_1 & '0' & '0', 31);
  p16M_4_add_temp <= p16M_4_add_cast + p16M_4_add_cast_1;
  M_4_tmp <= p16M_4_add_temp(23 DOWNTO 10);

  M_4 <= std_logic_vector(M_4_tmp);

  p15M_5_mul_temp <= tmp_41 * r2_2;
  p15M_5_add_cast <= resize(p15M_5_mul_temp, 29);
  p15M_5_mul_temp_1 <= tmp_45 * r3_2;
  p15M_5_add_cast_1 <= resize(p15M_5_mul_temp_1, 29);
  p15M_5_add_temp <= p15M_5_add_cast + p15M_5_add_cast_1;
  M_5_tmp <= p15M_5_add_temp(23 DOWNTO 10);

  M_5 <= std_logic_vector(M_5_tmp);

  ce_out <= enb_1_2_1;

END rtl;


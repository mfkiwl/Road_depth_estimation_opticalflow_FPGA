%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%           Generated by MATLAB 9.7 and Fixed-Point Designer 6.4           %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
function [M_1,M_2,M_3,M_4,M_5] = UpdateMatrices_pipeline1_fixpt( R0_data_1,R0_data_2,R0_data_3,R0_data_4,R0_data_5,...
													       R1_data_1,R1_data_2,R1_data_3,R1_data_4,R1_data_5,...
													       h_cnt,v_cnt)
%--------------------------------------------
fm = get_fimath();

width  = fi(200, 0, 8, 0, fm);
height = fi(200, 0, 8, 0, fm);
%--------------------------------------------
persistent ctr;
persistent R0_Ram1 R0_Ram2 R0_Ram3 R0_Ram4 R0_Ram5;
persistent R1_Ram1 R1_Ram2 R1_Ram3 R1_Ram4 R1_Ram5;

if isempty(ctr)
	ctr = fi(uint8(1), 0, 8, 0, fm);
end
if isempty(R0_Ram1)
	R0_Ram1 = fi(zeros(1,fi_toint(width)), 1, 14, 7, fm);
end		
if isempty(R0_Ram2)
	R0_Ram2 = fi(zeros(1,fi_toint(width)), 1, 14, 6, fm);
end	
if isempty(R0_Ram3)
	R0_Ram3 = fi(zeros(1,fi_toint(width)), 1, 14, 8, fm);
end	
if isempty(R0_Ram4)
	R0_Ram4 = fi(zeros(1,fi_toint(width)), 1, 14, 8, fm);
end		
if isempty(R0_Ram5)
	R0_Ram5 = fi(zeros(1,fi_toint(width)), 1, 14, 7, fm);
end			

if isempty(R1_Ram1)
	R1_Ram1 = fi(zeros(1,fi_toint(width)), 1, 14, 7, fm);
end		
if isempty(R1_Ram2)
	R1_Ram2 = fi(zeros(1,fi_toint(width)), 1, 14, 6, fm);
end	
if isempty(R1_Ram3)
	R1_Ram3 = fi(zeros(1,fi_toint(width)), 1, 14, 8, fm);
end	
if isempty(R1_Ram4)
	R1_Ram4 = fi(zeros(1,fi_toint(width)), 1, 14, 8, fm);
end		
if isempty(R1_Ram5)
	R1_Ram5 = fi(zeros(1,fi_toint(width)), 1, 14, 7, fm);
end	
%--------------------------------------------
BRAM_in_R0_1 = fi(R0_data_1, 1, 14, 7, fm);
BRAM_in_R0_2 = fi(R0_data_2, 1, 14, 6, fm);
BRAM_in_R0_3 = fi(R0_data_3, 1, 14, 8, fm);
BRAM_in_R0_4 = fi(R0_data_4, 1, 14, 8, fm);
BRAM_in_R0_5 = fi(R0_data_5, 1, 14, 7, fm);
BRAM_in_R1_1 = fi(R1_data_1, 1, 14, 7, fm);
BRAM_in_R1_2 = fi(R1_data_2, 1, 14, 6, fm);
BRAM_in_R1_3 = fi(R1_data_3, 1, 14, 8, fm);
BRAM_in_R1_4 = fi(R1_data_4, 1, 14, 8, fm);
BRAM_in_R1_5 = fi(R1_data_5, 1, 14, 7, fm);
%---------------------- write BRAM
writeData_R0_1 = fi(BRAM_in_R0_1, 1, 14, 7, fm);
writeData_R0_2 = fi(BRAM_in_R0_2, 1, 14, 6, fm);
writeData_R0_3 = fi(BRAM_in_R0_3, 1, 14, 8, fm);
writeData_R0_4 = fi(BRAM_in_R0_4, 1, 14, 8, fm);
writeData_R0_5 = fi(BRAM_in_R0_5, 1, 14, 7, fm);
writeData_R1_1 = fi(BRAM_in_R1_1, 1, 14, 7, fm);
writeData_R1_2 = fi(BRAM_in_R1_2, 1, 14, 6, fm);
writeData_R1_3 = fi(BRAM_in_R1_3, 1, 14, 8, fm);
writeData_R1_4 = fi(BRAM_in_R1_4, 1, 14, 8, fm);
writeData_R1_5 = fi(BRAM_in_R1_5, 1, 14, 7, fm);

R0_Ram1(ctr) = writeData_R0_1;
R0_Ram2(ctr) = writeData_R0_2;
R0_Ram3(ctr) = writeData_R0_3;
R0_Ram4(ctr) = writeData_R0_4;
R0_Ram5(ctr) = writeData_R0_5;
R1_Ram1(ctr) = writeData_R1_1;
R1_Ram2(ctr) = writeData_R1_2;
R1_Ram3(ctr) = writeData_R1_3;
R1_Ram4(ctr) = writeData_R1_4;
R1_Ram5(ctr) = writeData_R1_5;
%---------------------- read BRAM
readData_R0_1 = fi(R0_Ram1(ctr), 1, 14, 7, fm);
readData_R0_2 = fi(R0_Ram2(ctr), 1, 14, 6, fm);
readData_R0_3 = fi(R0_Ram3(ctr), 1, 14, 8, fm);
readData_R0_4 = fi(R0_Ram4(ctr), 1, 14, 8, fm);
readData_R0_5 = fi(R0_Ram5(ctr), 1, 14, 7, fm);
readData_R1_1 = fi(R1_Ram1(ctr), 1, 14, 7, fm);
readData_R1_2 = fi(R1_Ram2(ctr), 1, 14, 6, fm);
readData_R1_3 = fi(R1_Ram3(ctr), 1, 14, 8, fm);
readData_R1_4 = fi(R1_Ram4(ctr), 1, 14, 8, fm);
readData_R1_5 = fi(R1_Ram5(ctr), 1, 14, 7, fm);

BRAM_out_R0_1 = fi(readData_R0_1, 1, 14, 7, fm);
BRAM_out_R0_2 = fi(readData_R0_2, 1, 14, 6, fm);
BRAM_out_R0_3 = fi(readData_R0_3, 1, 14, 8, fm);
BRAM_out_R0_4 = fi(readData_R0_4, 1, 14, 8, fm);
BRAM_out_R0_5 = fi(readData_R0_5, 1, 14, 7, fm);
BRAM_out_R1_1 = fi(readData_R1_1, 1, 14, 7, fm);
BRAM_out_R1_2 = fi(readData_R1_2, 1, 14, 6, fm);
BRAM_out_R1_3 = fi(readData_R1_3, 1, 14, 8, fm);
BRAM_out_R1_4 = fi(readData_R1_4, 1, 14, 8, fm);
BRAM_out_R1_5 = fi(readData_R1_5, 1, 14, 7, fm);
%--------------------------------------------	
% dx  = flow(y+1,x*2+1);
% dy  = flow(y+1,x*2+2);
dx = fi(0, 0, 1, 0, fm);
dy = fi(0, 0, 1, 0, fm);
fx = fi(h_cnt + dx, 0, 8, 0, fm);
fy = fi(v_cnt + dy, 0, 8, 0, fm);
x1 = fi(floor(fx), 0, 8, 0, fm);
y1 = fi(floor(fy), 0, 8, 0, fm);
fx(:) = fx-x1;
fy(:) = fy-y1;
%--------------------------------------------	
if h_cnt < width-fi(1, 0, 1, 0, fm) && v_cnt < height-fi(1, 0, 1, 0, fm)
	a00 = fi((fi(1.0, 0, 1, 0, fm) - fx)*(fi(1.0, 0, 1, 0, fm) - fy), 0, 1, 0, fm);
	a01 = fi(fx*(fi(1.0, 0, 1, 0, fm)-fy), 0, 1, 0, fm);
	a10 = fi((fi(1.0, 0, 1, 0, fm)-fx)*fy, 0, 1, 0, fm);
	a11 = fi(fx*fy, 0, 1, 0, fm);
	
	ptr00 = fi(BRAM_out_R1_1, 1, 14, 7, fm);
	ptr01 = fi(BRAM_out_R1_2, 1, 14, 6, fm);
	ptr02 = fi(BRAM_out_R1_3, 1, 14, 8, fm);
	ptr03 = fi(BRAM_out_R1_4, 1, 14, 8, fm);
	ptr04 = fi(BRAM_out_R1_5, 1, 14, 7, fm);

	r2 = fi(a00*ptr00, 1, 14, 7, fm);
	r3 = fi(a00*ptr01, 1, 14, 6, fm);
	r4 = fi(a00*ptr02, 1, 14, 8, fm);
	r5 = fi(a00*ptr03, 1, 14, 8, fm);
	r6 = fi(a00*ptr04, 1, 14, 7, fm);

	r4(:) = (BRAM_out_R0_3 + r4)*fi(0.5, 0, 14, 14, fm);
	r5(:) = (BRAM_out_R0_4 + r5)*fi(0.5, 0, 14, 14, fm);
	r6(:) = (BRAM_out_R0_5 + r6)*fi(0.25, 0, 14, 15, fm);
else
	r2 = fi(0.0, 1, 14, 7, fm);
	r3 = fi(0.0, 1, 14, 6, fm);
	r4 = fi(BRAM_out_R0_3, 1, 14, 8, fm);
	r5 = fi(BRAM_out_R0_4, 1, 14, 8, fm);
	r6 = fi(BRAM_out_R0_5*fi(0.5, 0, 14, 14, fm), 1, 14, 7, fm);
end
%--------------------------------------------	
r2 = fi((BRAM_out_R0_1 - r2)*fi(0.5, 0, 14, 14, fm), 1, 14, 7, fm);
r3 = fi((BRAM_out_R0_2 - r3)*fi(0.5, 0, 14, 14, fm), 1, 14, 6, fm);
r2(:) = r2 + r4*dy + r6*dx;
r3(:) = r3 + r6*dy + r5*dx;
%--------------------------------------------	
M_1 = fi(r4*r4 + r6*r6, 0, 14, 4, fm);
M_2 = fi((r4 + r5) *r6, 1, 14, 6, fm); 
M_3 = fi(r5*r5 + r6*r6, 0, 14, 4, fm);
M_4 = fi(r4*r2 + r6*r3, 1, 14, 5, fm);
M_5 = fi(r6*r2 + r5*r3, 1, 14, 4, fm);
%---------------------- ctr counter
if ctr == uint8(200)
	ctr(:) = uint8(1);
else
	ctr(:) = ctr + fi(1, 0, 1, 0, fm);
end
%--------------------------------------------
end



function y = fi_toint(u)
    coder.inline( 'always' );
    if isfi( u )
        nt = numerictype( u );
        s = nt.SignednessBool;
        wl = nt.WordLength;
        y = int32( fi( u, s, wl, 0, hdlfimath ) );
    else
        y = int32( u );
    end
end

function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Floor',...
	     'OverflowAction', 'Wrap',...
	     'ProductMode','FullPrecision',...
	     'MaxProductWordLength', 128,...
	     'SumMode','FullPrecision',...
	     'MaxSumWordLength', 128);
end

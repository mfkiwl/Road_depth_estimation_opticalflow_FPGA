-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\USER\Desktop\Farneback_blockRAM\blockram_v2\codegen\PolyExp_pipeline2\hdlsrc\PolyExp_pipeline2_fixpt.vhd
-- Created: 2020-06-19 13:42:56
-- 
-- Generated by MATLAB 9.7, MATLAB Coder 4.3 and HDL Coder 3.15
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- data_out_0                    ce_out        1
-- data_out_1                    ce_out        1
-- data_out_2                    ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: PolyExp_pipeline2_fixpt
-- Source Path: PolyExp_pipeline2_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.PolyExp_pipeline2_fixpt_pkg.ALL;

ENTITY PolyExp_pipeline2_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        indata_0                          :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        indata_1                          :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        indata_2                          :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        indata_3                          :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        indata_4                          :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        indata_5                          :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        indata_6                          :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        indata_7                          :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        indata_8                          :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        indata_9                          :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        indata_10                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        indata_11                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        indata_12                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        indata_13                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        indata_14                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        indata_15                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        int0                              :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En7
        int1                              :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        int2                              :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        ce_out                            :   OUT   std_logic;
        data_out_0                        :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14_En6
        data_out_1                        :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En6
        data_out_2                        :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14_En5
        );
END PolyExp_pipeline2_fixpt;


ARCHITECTURE rtl OF PolyExp_pipeline2_fixpt IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL indata_0_unsigned                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL in_0_pipe_reg                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL indata_0_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL indata_1_unsigned                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL in_1_pipe_reg                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL indata_1_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL indata_2_unsigned                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL in_2_pipe_reg                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL indata_2_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL indata_3_unsigned                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL in_3_pipe_reg                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL indata_3_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL indata_4_unsigned                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL in_4_pipe_reg                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL indata_4_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL indata_5_unsigned                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL in_5_pipe_reg                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL indata_5_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL indata_6_unsigned                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL in_6_pipe_reg                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL indata_6_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL indata_7_unsigned                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL in_7_pipe_reg                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL indata_7_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL indata_8_unsigned                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL in_8_pipe_reg                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL indata_8_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL indata_9_unsigned                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL in_9_pipe_reg                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL indata_9_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL indata_10_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL in_10_pipe_reg                   : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL indata_10_1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL indata_11_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL in_11_pipe_reg                   : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL indata_11_1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL indata_12_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL in_12_pipe_reg                   : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL indata_12_1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL indata_13_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL in_13_pipe_reg                   : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL indata_13_1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL indata_14_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL in_14_pipe_reg                   : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL indata_14_1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL indata_15_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL in_15_pipe_reg                   : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL indata_15_1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL int0_unsigned                    : unsigned(13 DOWNTO 0);  -- ufix14_En7
  SIGNAL in_16_pipe_reg                   : vector_of_unsigned14(0 TO 1);  -- ufix14 [2]
  SIGNAL int0_1                           : unsigned(13 DOWNTO 0);  -- ufix14_En7
  SIGNAL int1_unsigned                    : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL in_17_pipe_reg                   : vector_of_unsigned14(0 TO 1);  -- ufix14 [2]
  SIGNAL int1_1                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL int2_unsigned                    : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL in_18_pipe_reg                   : vector_of_unsigned14(0 TO 1);  -- ufix14 [2]
  SIGNAL int2_1                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL data_out_0_tmp                   : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL data_out_1_tmp                   : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL data_out_2_tmp                   : unsigned(13 DOWNTO 0);  -- ufix14_En5

BEGIN
  indata_0_unsigned <= unsigned(indata_0);

  enb <= clk_enable;

  in_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_0_pipe_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_0_pipe_reg(0) <= indata_0_unsigned;
        in_0_pipe_reg(1) <= in_0_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;

  indata_0_1 <= in_0_pipe_reg(1);

  indata_1_unsigned <= unsigned(indata_1);

  in_1_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_1_pipe_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_1_pipe_reg(0) <= indata_1_unsigned;
        in_1_pipe_reg(1) <= in_1_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;

  indata_1_1 <= in_1_pipe_reg(1);

  indata_2_unsigned <= unsigned(indata_2);

  in_2_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_2_pipe_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_2_pipe_reg(0) <= indata_2_unsigned;
        in_2_pipe_reg(1) <= in_2_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;

  indata_2_1 <= in_2_pipe_reg(1);

  indata_3_unsigned <= unsigned(indata_3);

  in_3_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_3_pipe_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_3_pipe_reg(0) <= indata_3_unsigned;
        in_3_pipe_reg(1) <= in_3_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_3_pipe_process;

  indata_3_1 <= in_3_pipe_reg(1);

  indata_4_unsigned <= unsigned(indata_4);

  in_4_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_4_pipe_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_4_pipe_reg(0) <= indata_4_unsigned;
        in_4_pipe_reg(1) <= in_4_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_4_pipe_process;

  indata_4_1 <= in_4_pipe_reg(1);

  indata_5_unsigned <= unsigned(indata_5);

  in_5_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_5_pipe_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_5_pipe_reg(0) <= indata_5_unsigned;
        in_5_pipe_reg(1) <= in_5_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_5_pipe_process;

  indata_5_1 <= in_5_pipe_reg(1);

  indata_6_unsigned <= unsigned(indata_6);

  in_6_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_6_pipe_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_6_pipe_reg(0) <= indata_6_unsigned;
        in_6_pipe_reg(1) <= in_6_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_6_pipe_process;

  indata_6_1 <= in_6_pipe_reg(1);

  indata_7_unsigned <= unsigned(indata_7);

  in_7_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_7_pipe_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_7_pipe_reg(0) <= indata_7_unsigned;
        in_7_pipe_reg(1) <= in_7_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_7_pipe_process;

  indata_7_1 <= in_7_pipe_reg(1);

  indata_8_unsigned <= unsigned(indata_8);

  in_8_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_8_pipe_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_8_pipe_reg(0) <= indata_8_unsigned;
        in_8_pipe_reg(1) <= in_8_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_8_pipe_process;

  indata_8_1 <= in_8_pipe_reg(1);

  indata_9_unsigned <= unsigned(indata_9);

  in_9_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_9_pipe_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_9_pipe_reg(0) <= indata_9_unsigned;
        in_9_pipe_reg(1) <= in_9_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_9_pipe_process;

  indata_9_1 <= in_9_pipe_reg(1);

  indata_10_unsigned <= unsigned(indata_10);

  in_10_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_10_pipe_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_10_pipe_reg(0) <= indata_10_unsigned;
        in_10_pipe_reg(1) <= in_10_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_10_pipe_process;

  indata_10_1 <= in_10_pipe_reg(1);

  indata_11_unsigned <= unsigned(indata_11);

  in_11_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_11_pipe_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_11_pipe_reg(0) <= indata_11_unsigned;
        in_11_pipe_reg(1) <= in_11_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_11_pipe_process;

  indata_11_1 <= in_11_pipe_reg(1);

  indata_12_unsigned <= unsigned(indata_12);

  in_12_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_12_pipe_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_12_pipe_reg(0) <= indata_12_unsigned;
        in_12_pipe_reg(1) <= in_12_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_12_pipe_process;

  indata_12_1 <= in_12_pipe_reg(1);

  indata_13_unsigned <= unsigned(indata_13);

  in_13_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_13_pipe_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_13_pipe_reg(0) <= indata_13_unsigned;
        in_13_pipe_reg(1) <= in_13_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_13_pipe_process;

  indata_13_1 <= in_13_pipe_reg(1);

  indata_14_unsigned <= unsigned(indata_14);

  in_14_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_14_pipe_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_14_pipe_reg(0) <= indata_14_unsigned;
        in_14_pipe_reg(1) <= in_14_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_14_pipe_process;

  indata_14_1 <= in_14_pipe_reg(1);

  indata_15_unsigned <= unsigned(indata_15);

  in_15_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_15_pipe_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_15_pipe_reg(0) <= indata_15_unsigned;
        in_15_pipe_reg(1) <= in_15_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_15_pipe_process;

  indata_15_1 <= in_15_pipe_reg(1);

  int0_unsigned <= unsigned(int0);

  in_16_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_16_pipe_reg <= (OTHERS => to_unsigned(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_16_pipe_reg(0) <= int0_unsigned;
        in_16_pipe_reg(1) <= in_16_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_16_pipe_process;

  int0_1 <= in_16_pipe_reg(1);

  int1_unsigned <= unsigned(int1);

  in_17_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_17_pipe_reg <= (OTHERS => to_unsigned(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_17_pipe_reg(0) <= int1_unsigned;
        in_17_pipe_reg(1) <= in_17_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_17_pipe_process;

  int1_1 <= in_17_pipe_reg(1);

  int2_unsigned <= unsigned(int2);

  in_18_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_18_pipe_reg <= (OTHERS => to_unsigned(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_18_pipe_reg(0) <= int2_unsigned;
        in_18_pipe_reg(1) <= in_18_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_18_pipe_process;

  int2_1 <= in_18_pipe_reg(1);

  PolyExp_pipeline2_fixpt_1_output : PROCESS (indata_0_1, indata_10_1, indata_11_1, indata_12_1, indata_13_1, indata_14_1,
       indata_15_1, indata_1_1, indata_2_1, indata_3_1, indata_4_1, indata_5_1,
       indata_6_1, indata_7_1, indata_8_1, indata_9_1, int0_1, int1_1, int2_1)
    VARIABLE g : vector_of_unsigned14(0 TO 16);
    VARIABLE xg : vector_of_signed14(0 TO 16);
    VARIABLE xxg : vector_of_unsigned14(0 TO 16);
    VARIABLE int2_buf : unsigned(13 DOWNTO 0);
    VARIABLE int1_buf : signed(13 DOWNTO 0);
    VARIABLE int0_buf : unsigned(13 DOWNTO 0);
    VARIABLE k : unsigned(3 DOWNTO 0);
    VARIABLE tmp : unsigned(7 DOWNTO 0);
    VARIABLE tmp_0 : unsigned(7 DOWNTO 0);
    VARIABLE k_1 : unsigned(3 DOWNTO 0);
    VARIABLE tmp_1 : unsigned(7 DOWNTO 0);
    VARIABLE tmp_2 : unsigned(7 DOWNTO 0);
    VARIABLE k_2 : unsigned(3 DOWNTO 0);
    VARIABLE tmp_3 : unsigned(7 DOWNTO 0);
    VARIABLE tmp_4 : unsigned(7 DOWNTO 0);
    VARIABLE add_temp : vector_of_signed32(0 TO 7);
    VARIABLE add_cast : vector_of_unsigned25(0 TO 7);
    VARIABLE add_temp_0 : vector_of_unsigned5(0 TO 7);
    VARIABLE sub_cast : vector_of_signed32(0 TO 7);
    VARIABLE cast : vector_of_unsigned14(0 TO 7);
    VARIABLE add_temp_1 : vector_of_unsigned9(0 TO 7);
    VARIABLE mul_temp : vector_of_unsigned23(0 TO 7);
    VARIABLE add_cast_0 : vector_of_unsigned25(0 TO 7);
    VARIABLE add_temp_2 : vector_of_unsigned25(0 TO 7);
    VARIABLE add_temp_3 : vector_of_signed32(0 TO 7);
    VARIABLE add_cast_1 : vector_of_signed25(0 TO 7);
    VARIABLE add_temp_4 : vector_of_unsigned5(0 TO 7);
    VARIABLE sub_cast_0 : vector_of_signed32(0 TO 7);
    VARIABLE cast_0 : vector_of_unsigned14(0 TO 7);
    VARIABLE cast_1 : vector_of_signed15(0 TO 7);
    VARIABLE sub_cast_1 : vector_of_signed11(0 TO 7);
    VARIABLE sub_cast_2 : vector_of_signed11(0 TO 7);
    VARIABLE sub_temp : vector_of_signed11(0 TO 7);
    VARIABLE cast_2 : vector_of_signed9(0 TO 7);
    VARIABLE mul_temp_0 : vector_of_signed24(0 TO 7);
    VARIABLE add_cast_2 : vector_of_signed23(0 TO 7);
    VARIABLE add_cast_3 : vector_of_signed25(0 TO 7);
    VARIABLE add_temp_5 : vector_of_signed25(0 TO 7);
    VARIABLE add_temp_6 : vector_of_signed32(0 TO 7);
    VARIABLE add_cast_4 : vector_of_unsigned25(0 TO 7);
    VARIABLE add_temp_7 : vector_of_unsigned5(0 TO 7);
    VARIABLE sub_cast_3 : vector_of_signed32(0 TO 7);
    VARIABLE add_temp_8 : vector_of_unsigned9(0 TO 7);
    VARIABLE mul_temp_1 : vector_of_unsigned23(0 TO 7);
    VARIABLE add_cast_5 : vector_of_unsigned25(0 TO 7);
    VARIABLE add_temp_9 : vector_of_unsigned25(0 TO 7);
  BEGIN
    --HDL code generation from MATLAB function: PolyExp_pipeline2_fixpt
    ------------------------
    ------------------------
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    --                                                                          %
    --           Generated by MATLAB 9.7 and Fixed-Point Designer 6.4           %
    --                                                                          %
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    ----------------------------------------------								
    ----------------------------------------------
    ----------------------------------------------
    g(0) := to_unsigned(16#0000#, 14);
    xg(0) := to_signed(-16#0001#, 14);
    xxg(0) := to_unsigned(16#0000#, 14);
    g(1) := to_unsigned(16#0000#, 14);
    xg(1) := to_signed(-16#0001#, 14);
    xxg(1) := to_unsigned(16#0000#, 14);
    g(2) := to_unsigned(16#0000#, 14);
    xg(2) := to_signed(-16#0001#, 14);
    xxg(2) := to_unsigned(16#0001#, 14);
    g(3) := to_unsigned(16#0001#, 14);
    xg(3) := to_signed(-16#000A#, 14);
    xxg(3) := to_unsigned(16#002E#, 14);
    g(4) := to_unsigned(16#002A#, 14);
    xg(4) := to_signed(-16#00A9#, 14);
    xxg(4) := to_unsigned(16#02A1#, 14);
    g(5) := to_unsigned(16#01DE#, 14);
    xg(5) := to_signed(-16#059C#, 14);
    xxg(5) := to_unsigned(16#10D3#, 14);
    g(6) := to_unsigned(16#0A9C#, 14);
    xg(6) := to_signed(-16#1539#, 14);
    xxg(6) := to_unsigned(16#2A71#, 14);
    g(7) := to_unsigned(16#1E12#, 14);
    xg(7) := to_signed(-16#1E13#, 14);
    xxg(7) := to_unsigned(16#1E12#, 14);
    g(8) := to_unsigned(16#2A8D#, 14);
    xg(8) := to_signed(16#0000#, 14);
    xxg(8) := to_unsigned(16#0000#, 14);
    g(9) := to_unsigned(16#1E12#, 14);
    xg(9) := to_signed(16#1E12#, 14);
    xxg(9) := to_unsigned(16#1E12#, 14);
    g(10) := to_unsigned(16#0A9C#, 14);
    xg(10) := to_signed(16#1538#, 14);
    xxg(10) := to_unsigned(16#2A71#, 14);
    g(11) := to_unsigned(16#01DE#, 14);
    xg(11) := to_signed(16#059B#, 14);
    xxg(11) := to_unsigned(16#10D3#, 14);
    g(12) := to_unsigned(16#002A#, 14);
    xg(12) := to_signed(16#00A8#, 14);
    xxg(12) := to_unsigned(16#02A1#, 14);
    g(13) := to_unsigned(16#0001#, 14);
    xg(13) := to_signed(16#0009#, 14);
    xxg(13) := to_unsigned(16#002E#, 14);
    g(14) := to_unsigned(16#0000#, 14);
    xg(14) := to_signed(16#0000#, 14);
    xxg(14) := to_unsigned(16#0001#, 14);
    g(15) := to_unsigned(16#0000#, 14);
    xg(15) := to_signed(16#0000#, 14);
    xxg(15) := to_unsigned(16#0000#, 14);
    g(16) := to_unsigned(16#0000#, 14);
    xg(16) := to_signed(16#0000#, 14);
    xxg(16) := to_unsigned(16#0000#, 14);
    ----------------------------------------------
    int0_buf := resize(int0_1(13 DOWNTO 1), 14);
    int1_buf := signed(int1_1(7 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0');
    int2_buf := int2_1(8 DOWNTO 0) & '0' & '0' & '0' & '0' & '0';

    FOR k_0 IN 0 TO 7 LOOP
      add_temp(k_0) := to_signed(k_0 + 1, 32);
      k := unsigned(add_temp(k_0)(3 DOWNTO 0));
      IF k = to_unsigned(16#8#, 4) THEN 
        tmp := indata_7_1;
        tmp_0 := indata_15_1;
      ELSE 
        tmp := to_unsigned(16#00#, 8);
        tmp_0 := to_unsigned(16#00#, 8);
      END IF;
      IF k = to_unsigned(16#7#, 4) THEN 
        tmp := indata_6_1;
        tmp_0 := indata_14_1;
      END IF;
      IF k = to_unsigned(16#6#, 4) THEN 
        tmp := indata_5_1;
        tmp_0 := indata_13_1;
      END IF;
      IF k = to_unsigned(16#5#, 4) THEN 
        tmp := indata_4_1;
        tmp_0 := indata_12_1;
      END IF;
      IF k = to_unsigned(16#4#, 4) THEN 
        tmp := indata_3_1;
        tmp_0 := indata_11_1;
      END IF;
      IF k = to_unsigned(16#3#, 4) THEN 
        tmp := indata_2_1;
        tmp_0 := indata_10_1;
      END IF;
      IF k = to_unsigned(16#2#, 4) THEN 
        tmp := indata_1_1;
        tmp_0 := indata_9_1;
      END IF;
      IF k = to_unsigned(16#1#, 4) THEN 
        tmp := indata_0_1;
        tmp_0 := indata_8_1;
      END IF;
      add_cast(k_0) := resize(int0_buf & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25);
      add_temp_0(k_0) := resize(k, 5) + to_unsigned(16#09#, 5);
      sub_cast(k_0) := signed(resize(add_temp_0(k_0), 32));
      cast(k_0) := g(to_integer(sub_cast(k_0) - 1))(12 DOWNTO 0) & '0';
      add_temp_1(k_0) := resize(tmp_0, 9) + resize(tmp, 9);
      mul_temp(k_0) := cast(k_0) * add_temp_1(k_0);
      add_cast_0(k_0) := resize(mul_temp(k_0), 25);
      add_temp_2(k_0) := add_cast(k_0) + add_cast_0(k_0);
      int0_buf := add_temp_2(k_0)(23 DOWNTO 10);
      add_temp_3(k_0) := to_signed(k_0 + 1, 32);
      k_1 := unsigned(add_temp_3(k_0)(3 DOWNTO 0));
      IF k_1 = to_unsigned(16#8#, 4) THEN 
        tmp_1 := indata_7_1;
        tmp_2 := indata_15_1;
      ELSE 
        tmp_1 := to_unsigned(16#00#, 8);
        tmp_2 := to_unsigned(16#00#, 8);
      END IF;
      IF k_1 = to_unsigned(16#7#, 4) THEN 
        tmp_1 := indata_6_1;
        tmp_2 := indata_14_1;
      END IF;
      IF k_1 = to_unsigned(16#6#, 4) THEN 
        tmp_1 := indata_5_1;
        tmp_2 := indata_13_1;
      END IF;
      IF k_1 = to_unsigned(16#5#, 4) THEN 
        tmp_1 := indata_4_1;
        tmp_2 := indata_12_1;
      END IF;
      IF k_1 = to_unsigned(16#4#, 4) THEN 
        tmp_1 := indata_3_1;
        tmp_2 := indata_11_1;
      END IF;
      IF k_1 = to_unsigned(16#3#, 4) THEN 
        tmp_1 := indata_2_1;
        tmp_2 := indata_10_1;
      END IF;
      IF k_1 = to_unsigned(16#2#, 4) THEN 
        tmp_1 := indata_1_1;
        tmp_2 := indata_9_1;
      END IF;
      IF k_1 = to_unsigned(16#1#, 4) THEN 
        tmp_1 := indata_0_1;
        tmp_2 := indata_8_1;
      END IF;
      add_cast_1(k_0) := resize(int1_buf & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25);
      add_temp_4(k_0) := resize(k_1, 5) + to_unsigned(16#09#, 5);
      sub_cast_0(k_0) := signed(resize(add_temp_4(k_0), 32));
      cast_0(k_0) := unsigned(xg(to_integer(sub_cast_0(k_0) - 1))(12 DOWNTO 0) & '0');
      cast_1(k_0) := signed(resize(cast_0(k_0), 15));
      sub_cast_1(k_0) := signed(resize(tmp_2, 11));
      sub_cast_2(k_0) := signed(resize(tmp_1, 11));
      sub_temp(k_0) := sub_cast_1(k_0) - sub_cast_2(k_0);
      cast_2(k_0) := sub_temp(k_0)(8 DOWNTO 0);
      mul_temp_0(k_0) := cast_1(k_0) * cast_2(k_0);
      add_cast_2(k_0) := mul_temp_0(k_0)(22 DOWNTO 0);
      add_cast_3(k_0) := resize(add_cast_2(k_0), 25);
      add_temp_5(k_0) := add_cast_1(k_0) + add_cast_3(k_0);
      int1_buf := add_temp_5(k_0)(23 DOWNTO 10);
      add_temp_6(k_0) := to_signed(k_0 + 1, 32);
      k_2 := unsigned(add_temp_6(k_0)(3 DOWNTO 0));
      IF k_2 = to_unsigned(16#8#, 4) THEN 
        tmp_3 := indata_7_1;
        tmp_4 := indata_15_1;
      ELSE 
        tmp_3 := to_unsigned(16#00#, 8);
        tmp_4 := to_unsigned(16#00#, 8);
      END IF;
      IF k_2 = to_unsigned(16#7#, 4) THEN 
        tmp_3 := indata_6_1;
        tmp_4 := indata_14_1;
      END IF;
      IF k_2 = to_unsigned(16#6#, 4) THEN 
        tmp_3 := indata_5_1;
        tmp_4 := indata_13_1;
      END IF;
      IF k_2 = to_unsigned(16#5#, 4) THEN 
        tmp_3 := indata_4_1;
        tmp_4 := indata_12_1;
      END IF;
      IF k_2 = to_unsigned(16#4#, 4) THEN 
        tmp_3 := indata_3_1;
        tmp_4 := indata_11_1;
      END IF;
      IF k_2 = to_unsigned(16#3#, 4) THEN 
        tmp_3 := indata_2_1;
        tmp_4 := indata_10_1;
      END IF;
      IF k_2 = to_unsigned(16#2#, 4) THEN 
        tmp_3 := indata_1_1;
        tmp_4 := indata_9_1;
      END IF;
      IF k_2 = to_unsigned(16#1#, 4) THEN 
        tmp_3 := indata_0_1;
        tmp_4 := indata_8_1;
      END IF;
      add_cast_4(k_0) := resize(int2_buf & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25);
      add_temp_7(k_0) := resize(k_2, 5) + to_unsigned(16#09#, 5);
      sub_cast_3(k_0) := signed(resize(add_temp_7(k_0), 32));
      add_temp_8(k_0) := resize(tmp_4, 9) + resize(tmp_3, 9);
      mul_temp_1(k_0) := xxg(to_integer(sub_cast_3(k_0) - 1)) * add_temp_8(k_0);
      add_cast_5(k_0) := resize(mul_temp_1(k_0), 25);
      add_temp_9(k_0) := add_cast_4(k_0) + add_cast_5(k_0);
      int2_buf := add_temp_9(k_0)(23 DOWNTO 10);
    END LOOP;

    data_out_0_tmp <= int0_buf;
    data_out_1_tmp <= int1_buf;
    data_out_2_tmp <= int2_buf;
  END PROCESS PolyExp_pipeline2_fixpt_1_output;


  data_out_0 <= std_logic_vector(data_out_0_tmp);

  data_out_1 <= std_logic_vector(data_out_1_tmp);

  data_out_2 <= std_logic_vector(data_out_2_tmp);

  ce_out <= clk_enable;

END rtl;


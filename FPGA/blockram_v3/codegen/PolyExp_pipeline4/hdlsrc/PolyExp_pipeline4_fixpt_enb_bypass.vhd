-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\USER\Desktop\Farneback_blockRAM\blockram_v2\codegen\PolyExp_pipeline4\hdlsrc\PolyExp_pipeline4_fixpt_enb_bypass.vhd
-- Created: 2020-06-19 13:28:53
-- 
-- Generated by MATLAB 9.7, MATLAB Coder 4.3 and HDL Coder 3.15
-- 
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: PolyExp_pipeline4_fixpt_enb_bypass
-- Source Path: 
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY PolyExp_pipeline4_fixpt_enb_bypass IS
  PORT( clk_1                             :   IN    std_logic;
        reset_1                           :   IN    std_logic;
        clk_enable_1                      :   IN    std_logic;
        clk_enable_2                      :   OUT   std_logic
        );
END PolyExp_pipeline4_fixpt_enb_bypass;


ARCHITECTURE rtl OF PolyExp_pipeline4_fixpt_enb_bypass IS

  -- Signals
  SIGNAL clk_enable_3                     : std_logic;
  SIGNAL ctr0_out                         : std_logic;
  SIGNAL ctr1_out                         : std_logic;
  SIGNAL ctr2_out                         : std_logic;
  SIGNAL ctr3_out                         : std_logic;
  SIGNAL ctr4_out                         : std_logic;
  SIGNAL ctr5_out                         : std_logic;
  SIGNAL ctr6_out                         : std_logic;
  SIGNAL ctr7_out                         : std_logic;
  SIGNAL ctr8_out                         : std_logic;
  SIGNAL ctr9_out                         : std_logic;
  SIGNAL ctr10_out                        : std_logic;
  SIGNAL ctr11_out                        : std_logic;
  SIGNAL ctr12_out                        : std_logic;
  SIGNAL ctr13_out                        : std_logic;
  SIGNAL ctr14_out                        : std_logic;
  SIGNAL ctr15_out                        : std_logic;
  SIGNAL ctr16_out                        : std_logic;
  SIGNAL ctrstate_out                     : std_logic;
  SIGNAL bypass_out                       : std_logic;
  SIGNAL clk_enable_4                     : std_logic;

BEGIN
  c_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      ctr0_out <= '0';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      ctr0_out <= clk_enable_3 AND clk_enable_1;
    END IF;
  END PROCESS c_process;

  c_1_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      ctr1_out <= '0';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      ctr1_out <= ctr0_out;
    END IF;
  END PROCESS c_1_process;

  c_2_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      ctr2_out <= '0';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      ctr2_out <= ctr1_out;
    END IF;
  END PROCESS c_2_process;

  c_3_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      ctr3_out <= '0';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      ctr3_out <= ctr2_out;
    END IF;
  END PROCESS c_3_process;

  c_4_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      ctr4_out <= '0';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      ctr4_out <= ctr3_out;
    END IF;
  END PROCESS c_4_process;

  c_5_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      ctr5_out <= '0';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      ctr5_out <= ctr4_out;
    END IF;
  END PROCESS c_5_process;

  c_6_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      ctr6_out <= '0';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      ctr6_out <= ctr5_out;
    END IF;
  END PROCESS c_6_process;

  c_7_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      ctr7_out <= '0';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      ctr7_out <= ctr6_out;
    END IF;
  END PROCESS c_7_process;

  c_8_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      ctr8_out <= '0';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      ctr8_out <= ctr7_out;
    END IF;
  END PROCESS c_8_process;

  c_9_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      ctr9_out <= '0';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      ctr9_out <= ctr8_out;
    END IF;
  END PROCESS c_9_process;

  c_10_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      ctr10_out <= '0';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      ctr10_out <= ctr9_out;
    END IF;
  END PROCESS c_10_process;

  c_11_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      ctr11_out <= '0';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      ctr11_out <= ctr10_out;
    END IF;
  END PROCESS c_11_process;

  c_12_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      ctr12_out <= '0';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      ctr12_out <= ctr11_out;
    END IF;
  END PROCESS c_12_process;

  c_13_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      ctr13_out <= '0';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      ctr13_out <= ctr12_out;
    END IF;
  END PROCESS c_13_process;

  c_14_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      ctr14_out <= '0';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      ctr14_out <= ctr13_out;
    END IF;
  END PROCESS c_14_process;

  c_15_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      ctr15_out <= '0';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      ctr15_out <= ctr14_out;
    END IF;
  END PROCESS c_15_process;

  c_16_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      ctr16_out <= '0';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      ctr16_out <= ctr15_out;
    END IF;
  END PROCESS c_16_process;

  ctrstate_out <= NOT clk_enable_1 WHEN clk_enable_3 = '1' ELSE
                  ctr16_out;

  c_17_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      clk_enable_3 <= '1';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      clk_enable_3 <= ctrstate_out;
    END IF;
  END PROCESS c_17_process;

  c_18_process: PROCESS (clk_1, reset_1)
  BEGIN
    IF reset_1 = '1' THEN
      bypass_out <= '0';
    ELSIF clk_1'event AND clk_1 = '1' THEN
      IF clk_enable_3 = '1' THEN
        bypass_out <= clk_enable_1;
      END IF;
    END IF;
  END PROCESS c_18_process;

  clk_enable_4 <= clk_enable_1 WHEN clk_enable_3 = '1' ELSE
                  bypass_out;

  clk_enable_2 <= clk_enable_4;

END rtl;


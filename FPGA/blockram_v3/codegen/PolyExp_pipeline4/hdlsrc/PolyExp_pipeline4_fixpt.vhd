-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\USER\Desktop\Farneback_blockRAM\blockram_v2\codegen\PolyExp_pipeline4\hdlsrc\PolyExp_pipeline4_fixpt.vhd
-- Created: 2020-06-19 13:28:53
-- 
-- Generated by MATLAB 9.7, MATLAB Coder 4.3 and HDL Coder 3.15
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 0.0555556
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- drow_1                        ce_out        1
-- drow_2                        ce_out        1
-- drow_3                        ce_out        1
-- drow_4                        ce_out        1
-- drow_5                        ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: PolyExp_pipeline4_fixpt
-- Source Path: PolyExp_pipeline4_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.PolyExp_pipeline4_fixpt_pkg.ALL;

ENTITY PolyExp_pipeline4_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        data_in_0                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En6
        data_in_1                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En6
        data_in_2                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En5
        ce_out                            :   OUT   std_logic;
        drow_1                            :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En6
        drow_2                            :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En7
        drow_3                            :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En8
        drow_4                            :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En8
        drow_5                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En7
        );
END PolyExp_pipeline4_fixpt;


ARCHITECTURE rtl OF PolyExp_pipeline4_fixpt IS

  -- Component Declarations
  COMPONENT PolyExp_pipeline4_fixpt_enb_bypass
    PORT( clk_1                           :   IN    std_logic;
          reset_1                         :   IN    std_logic;
          clk_enable_1                    :   IN    std_logic;
          clk_enable_2                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT PolyExp_pipeline4_fixpt_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_18_0                      :   OUT   std_logic;
          enb_1_18_1                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT SimpleDualPortRAM_generic_block
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb_1_18_0                      :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : PolyExp_pipeline4_fixpt_enb_bypass
    USE ENTITY work.PolyExp_pipeline4_fixpt_enb_bypass(rtl);

  FOR ALL : PolyExp_pipeline4_fixpt_tc
    USE ENTITY work.PolyExp_pipeline4_fixpt_tc(rtl);

  FOR ALL : SimpleDualPortRAM_generic_block
    USE ENTITY work.SimpleDualPortRAM_generic_block(rtl);

  FOR ALL : SimpleDualPortRAM_generic
    USE ENTITY work.SimpleDualPortRAM_generic(rtl);

  -- Signals
  SIGNAL enb_1_18_0                       : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_18_1                       : std_logic;
  SIGNAL clk_enable_1                     : std_logic;
  SIGNAL counterSig                       : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL rRam1_ram_wr_en_k_0_sig          : std_logic;
  SIGNAL rRam1_ram_wr_en_k_1_sig          : std_logic;
  SIGNAL rRam1_ram_wr_en_k_2_sig          : std_logic;
  SIGNAL rRam1_ram_wr_en_k_3_sig          : std_logic;
  SIGNAL rRam1_ram_wr_en_k_4_sig          : std_logic;
  SIGNAL rRam1_ram_wr_en_k_5_sig          : std_logic;
  SIGNAL rRam1_ram_wr_en_k_6_sig          : std_logic;
  SIGNAL rRam1_ram_wr_en_k_7_sig          : std_logic;
  SIGNAL rRam1_ram_wr_en_k_8_sig          : std_logic;
  SIGNAL rRam1_ram_wr_en_k_9_sig          : std_logic;
  SIGNAL rRam1_ram_wr_en_k_10_sig         : std_logic;
  SIGNAL rRam1_ram_wr_en_k_11_sig         : std_logic;
  SIGNAL rRam1_ram_wr_en_k_12_sig         : std_logic;
  SIGNAL rRam1_ram_wr_en_k_13_sig         : std_logic;
  SIGNAL rRam1_ram_wr_en_k_14_sig         : std_logic;
  SIGNAL rRam1_ram_wr_en_k_15_sig         : std_logic;
  SIGNAL rRam1_ram_wr_en_k_16_sig         : std_logic;
  SIGNAL data_in_0_unsigned               : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL data_in_1_signed                 : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL data_in_2_unsigned               : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL rRam1_ram_wr_en_k_17_sig         : std_logic;
  SIGNAL in_0_pipe_reg                    : vector_of_unsigned14(0 TO 1);  -- ufix14 [2]
  SIGNAL data_in_0_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL in_1_pipe_reg                    : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL data_in_1_1                      : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL in_2_pipe_reg                    : vector_of_unsigned14(0 TO 1);  -- ufix14 [2]
  SIGNAL data_in_2_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL ctr                              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ctr_1                            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp                              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_1                            : std_logic;
  SIGNAL tmp_2                            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_3                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL p278tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_4                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL p280tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL mergedInput                      : unsigned(123 DOWNTO 0);  -- ufix124
  SIGNAL mergedDelay_regin                : unsigned(123 DOWNTO 0);  -- ufix124
  SIGNAL mergedDelay_waddr                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb                : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout               : std_logic_vector(123 DOWNTO 0);  -- ufix124
  SIGNAL mergedDelay_regout_unsigned      : unsigned(123 DOWNTO 0);  -- ufix124
  SIGNAL mergedOutput                     : unsigned(123 DOWNTO 0);  -- ufix124
  SIGNAL slicedInput                      : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL writeData_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL wr_data                          : vector_of_unsigned14(0 TO 17);  -- ufix14_En6 [18]
  SIGNAL wr_data_overclock18              : vector_of_unsigned14(0 TO 17);  -- ufix14_En6 [18]
  SIGNAL ratechange_splitcomp_out0        : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out1        : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out2        : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out3        : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out4        : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out5        : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out6        : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out7        : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out8        : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out9        : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out10       : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out11       : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out12       : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out13       : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out14       : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out15       : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out16       : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out17       : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL slicedInput_1                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_5                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr                          : vector_of_unsigned8(0 TO 17);  -- ufix8 [18]
  SIGNAL wr_addr_overclock18              : vector_of_unsigned8(0 TO 17);  -- ufix8 [18]
  SIGNAL ratechange_splitcomp_out0_1      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_1      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out2_1      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out3_1      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out4_1      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out5_1      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out6_1      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out7_1      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out8_1      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out9_1      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out10_1     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out11_1     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out12_1     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out13_1     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out14_1     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out15_1     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out16_1     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out17_1     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_1                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL c                                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_6                            : std_logic;
  SIGNAL c_1                              : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_7                            : std_logic;
  SIGNAL c_2                              : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_8                            : std_logic;
  SIGNAL c_3                              : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_9                            : std_logic;
  SIGNAL maxval                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_10                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_11                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p389tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL maxval_1                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_12                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_13                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p395tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL minval                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_14                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_15                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p401tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL minval_1                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_16                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_17                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p407tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL mergedInput_1                    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin_1              : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr_1              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_1              : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_1              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_1             : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned_1    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput_1                   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput_2                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_18                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_1            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_3                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_19                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_2            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL c_4                              : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_20                           : std_logic;
  SIGNAL c_5                              : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_21                           : std_logic;
  SIGNAL c_6                              : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_22                           : std_logic;
  SIGNAL c_7                              : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_23                           : std_logic;
  SIGNAL maxval_2                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_24                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_25                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p365tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL maxval_3                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_26                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_27                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p371tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL maxval_4                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_28                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_29                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p377tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL maxval_5                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_30                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_31                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p383tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL mergedInput_2                    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin_2              : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr_2              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_2              : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_2              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_2             : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned_2    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput_2                   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput_4                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_32                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_3            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_5                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_33                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_4            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_6                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_34                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_5            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL c_8                              : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_35                           : std_logic;
  SIGNAL c_9                              : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_36                           : std_logic;
  SIGNAL c_10                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_37                           : std_logic;
  SIGNAL c_11                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_38                           : std_logic;
  SIGNAL minval_2                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_39                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_40                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p341tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL minval_3                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_41                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_42                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p347tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL maxval_6                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_43                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_44                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p353tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL maxval_7                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_45                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_46                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p359tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL mergedInput_3                    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin_3              : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr_3              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_3              : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_3              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_3             : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned_3    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput_3                   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput_7                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_47                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_6            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_8                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_48                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_7            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_9                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_49                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_8            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_10                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_50                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_9            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_11                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_51                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_10           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL c_12                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_52                           : std_logic;
  SIGNAL c_13                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_53                           : std_logic;
  SIGNAL c_14                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_54                           : std_logic;
  SIGNAL c_15                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_55                           : std_logic;
  SIGNAL minval_4                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_56                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_57                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p317tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL minval_5                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_58                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_59                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p323tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL minval_6                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_60                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_61                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p329tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL minval_7                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_62                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_63                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p335tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL mergedInput_4                    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin_4              : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr_4              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_4              : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_4              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_4             : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned_4    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput_4                   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput_12                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_64                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_11           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_13                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_65                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_12           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_14                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_66                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_13           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_15                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_67                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_14           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rRam3_ram_wr_en_k_0_sig          : std_logic;
  SIGNAL rRam3_ram_wr_en_k_1_sig          : std_logic;
  SIGNAL rRam3_ram_wr_en_k_2_sig          : std_logic;
  SIGNAL rRam3_ram_wr_en_k_3_sig          : std_logic;
  SIGNAL rRam3_ram_wr_en_k_4_sig          : std_logic;
  SIGNAL rRam3_ram_wr_en_k_5_sig          : std_logic;
  SIGNAL rRam3_ram_wr_en_k_6_sig          : std_logic;
  SIGNAL rRam3_ram_wr_en_k_7_sig          : std_logic;
  SIGNAL rRam3_ram_wr_en_k_8_sig          : std_logic;
  SIGNAL rRam3_ram_wr_en_k_9_sig          : std_logic;
  SIGNAL rRam3_ram_wr_en_k_10_sig         : std_logic;
  SIGNAL rRam3_ram_wr_en_k_11_sig         : std_logic;
  SIGNAL rRam3_ram_wr_en_k_12_sig         : std_logic;
  SIGNAL rRam3_ram_wr_en_k_13_sig         : std_logic;
  SIGNAL rRam3_ram_wr_en_k_14_sig         : std_logic;
  SIGNAL rRam3_ram_wr_en_k_15_sig         : std_logic;
  SIGNAL rRam3_ram_wr_en_k_16_sig         : std_logic;
  SIGNAL rRam3_ram_wr_en_k_17_sig         : std_logic;
  SIGNAL c_16                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_68                           : std_logic;
  SIGNAL c_17                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_69                           : std_logic;
  SIGNAL tmp_70                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p290tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL minval_8                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_71                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_72                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p305tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL minval_9                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_73                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_74                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p311tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL mergedInput_5                    : unsigned(113 DOWNTO 0);  -- ufix114
  SIGNAL mergedDelay_regin_5              : unsigned(113 DOWNTO 0);  -- ufix114
  SIGNAL mergedDelay_waddr_5              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_5              : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_5              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_5             : std_logic_vector(113 DOWNTO 0);  -- ufix114
  SIGNAL mergedDelay_regout_unsigned_5    : unsigned(113 DOWNTO 0);  -- ufix114
  SIGNAL mergedOutput_5                   : unsigned(113 DOWNTO 0);  -- ufix114
  SIGNAL slicedInput_16                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_75                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_15           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_17                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_76                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_16           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rRam2_ram_wr_en_k_0_sig          : std_logic;
  SIGNAL rRam2_ram_wr_en_k_1_sig          : std_logic;
  SIGNAL rRam2_ram_wr_en_k_2_sig          : std_logic;
  SIGNAL rRam2_ram_wr_en_k_3_sig          : std_logic;
  SIGNAL rRam2_ram_wr_en_k_4_sig          : std_logic;
  SIGNAL rRam2_ram_wr_en_k_5_sig          : std_logic;
  SIGNAL rRam2_ram_wr_en_k_6_sig          : std_logic;
  SIGNAL rRam2_ram_wr_en_k_7_sig          : std_logic;
  SIGNAL rRam2_ram_wr_en_k_8_sig          : std_logic;
  SIGNAL rRam2_ram_wr_en_k_9_sig          : std_logic;
  SIGNAL rRam2_ram_wr_en_k_10_sig         : std_logic;
  SIGNAL rRam2_ram_wr_en_k_11_sig         : std_logic;
  SIGNAL rRam2_ram_wr_en_k_12_sig         : std_logic;
  SIGNAL rRam2_ram_wr_en_k_13_sig         : std_logic;
  SIGNAL rRam2_ram_wr_en_k_14_sig         : std_logic;
  SIGNAL rRam2_ram_wr_en_k_15_sig         : std_logic;
  SIGNAL rRam2_ram_wr_en_k_16_sig         : std_logic;
  SIGNAL rRam2_ram_wr_en_k_17_sig         : std_logic;
  SIGNAL tmp_77                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p282tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_78                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p284tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_79                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p287tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL mergedInput_6                    : unsigned(113 DOWNTO 0);  -- ufix114
  SIGNAL mergedDelay_regin_6              : unsigned(113 DOWNTO 0);  -- ufix114
  SIGNAL mergedDelay_waddr_6              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_6              : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_6              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_6             : std_logic_vector(113 DOWNTO 0);  -- ufix114
  SIGNAL mergedDelay_regout_unsigned_6    : unsigned(113 DOWNTO 0);  -- ufix114
  SIGNAL mergedOutput_6                   : unsigned(113 DOWNTO 0);  -- ufix114
  SIGNAL slicedInput_18                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_80                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_17           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr                          : vector_of_unsigned8(0 TO 17);  -- ufix8 [18]
  SIGNAL rd_addr_overclock18              : vector_of_unsigned8(0 TO 17);  -- ufix8 [18]
  SIGNAL ratechange_splitcomp_out0_2      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_2      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out2_2      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out3_2      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out4_2      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out5_2      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out6_2      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out7_2      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out8_2      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out9_2      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out10_2     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out11_2     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out12_2     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out13_2     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out14_2     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out15_2     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out16_2     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out17_2     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_1                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_19                   : std_logic;  -- ufix1
  SIGNAL delayOut0                        : std_logic;
  SIGNAL slicedInput_20                   : std_logic;  -- ufix1
  SIGNAL delayOut1                        : std_logic;
  SIGNAL slicedInput_21                   : std_logic;  -- ufix1
  SIGNAL delayOut2                        : std_logic;
  SIGNAL slicedInput_22                   : std_logic;  -- ufix1
  SIGNAL delayOut3                        : std_logic;
  SIGNAL slicedInput_23                   : std_logic;  -- ufix1
  SIGNAL delayOut4                        : std_logic;
  SIGNAL slicedInput_24                   : std_logic;  -- ufix1
  SIGNAL delayOut5                        : std_logic;
  SIGNAL slicedInput_25                   : std_logic;  -- ufix1
  SIGNAL delayOut6                        : std_logic;
  SIGNAL slicedInput_26                   : std_logic;  -- ufix1
  SIGNAL delayOut7                        : std_logic;
  SIGNAL slicedInput_27                   : std_logic;  -- ufix1
  SIGNAL delayOut8                        : std_logic;
  SIGNAL slicedInput_28                   : std_logic;  -- ufix1
  SIGNAL delayOut9                        : std_logic;
  SIGNAL slicedInput_29                   : std_logic;  -- ufix1
  SIGNAL delayOut10                       : std_logic;
  SIGNAL slicedInput_30                   : std_logic;  -- ufix1
  SIGNAL delayOut11                       : std_logic;
  SIGNAL slicedInput_31                   : std_logic;  -- ufix1
  SIGNAL delayOut12                       : std_logic;
  SIGNAL slicedInput_32                   : std_logic;  -- ufix1
  SIGNAL delayOut13                       : std_logic;
  SIGNAL slicedInput_33                   : std_logic;  -- ufix1
  SIGNAL delayOut14                       : std_logic;
  SIGNAL slicedInput_34                   : std_logic;  -- ufix1
  SIGNAL delayOut15                       : std_logic;
  SIGNAL slicedInput_35                   : std_logic;  -- ufix1
  SIGNAL delayOut16                       : std_logic;
  SIGNAL slicedInput_36                   : std_logic;  -- ufix1
  SIGNAL delayOut17                       : std_logic;
  SIGNAL rRam1_ram_wr_en_sig              : std_logic_vector(0 TO 17);  -- boolean [18]
  SIGNAL rRam1_ram_wr_en_sig_overclock18  : std_logic_vector(0 TO 17);  -- boolean [18]
  SIGNAL ratechange_splitcomp_out0_3      : std_logic;
  SIGNAL ratechange_splitcomp_out1_3      : std_logic;
  SIGNAL ratechange_splitcomp_out2_3      : std_logic;
  SIGNAL ratechange_splitcomp_out3_3      : std_logic;
  SIGNAL ratechange_splitcomp_out4_3      : std_logic;
  SIGNAL ratechange_splitcomp_out5_3      : std_logic;
  SIGNAL ratechange_splitcomp_out6_3      : std_logic;
  SIGNAL ratechange_splitcomp_out7_3      : std_logic;
  SIGNAL ratechange_splitcomp_out8_3      : std_logic;
  SIGNAL ratechange_splitcomp_out9_3      : std_logic;
  SIGNAL ratechange_splitcomp_out10_3     : std_logic;
  SIGNAL ratechange_splitcomp_out11_3     : std_logic;
  SIGNAL ratechange_splitcomp_out12_3     : std_logic;
  SIGNAL ratechange_splitcomp_out13_3     : std_logic;
  SIGNAL ratechange_splitcomp_out14_3     : std_logic;
  SIGNAL ratechange_splitcomp_out15_3     : std_logic;
  SIGNAL ratechange_splitcomp_out16_3     : std_logic;
  SIGNAL ratechange_splitcomp_out17_3     : std_logic;
  SIGNAL rRam1_ram_wr_en_sig_1            : std_logic;
  SIGNAL slicedInput_37                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_81                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_18           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_2                        : vector_of_unsigned8(0 TO 17);  -- ufix8 [18]
  SIGNAL wr_addr_overclock18_1            : vector_of_unsigned8(0 TO 17);  -- ufix8 [18]
  SIGNAL ratechange_splitcomp_out0_4      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_4      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out2_4      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out3_4      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out4_4      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out5_4      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out6_4      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out7_4      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out8_4      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out9_4      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out10_4     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out11_4     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out12_4     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out13_4     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out14_4     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out15_4     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out16_4     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out17_4     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_3                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL c_18                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_82                           : std_logic;
  SIGNAL c_19                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_83                           : std_logic;
  SIGNAL c_20                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_84                           : std_logic;
  SIGNAL c_21                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_85                           : std_logic;
  SIGNAL maxval_8                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_86                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_87                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p485tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL maxval_9                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_88                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_89                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p491tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL minval_10                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_90                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_91                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p497tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL minval_11                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_92                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_93                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p503tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL mergedInput_7                    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin_7              : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr_7              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_7              : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_7              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_7             : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned_7    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput_7                   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput_38                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_94                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_19           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_39                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_95                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_20           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL c_22                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_96                           : std_logic;
  SIGNAL c_23                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_97                           : std_logic;
  SIGNAL c_24                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_98                           : std_logic;
  SIGNAL c_25                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_99                           : std_logic;
  SIGNAL maxval_10                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_100                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_101                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p461tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL maxval_11                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_102                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_103                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p467tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL maxval_12                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_104                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_105                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p473tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL maxval_13                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_106                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_107                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p479tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL mergedInput_8                    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin_8              : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr_8              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_8              : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_8              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_8             : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned_8    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput_8                   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput_40                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_108                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_21           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_41                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_109                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_22           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_42                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_110                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_23           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_43                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_111                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_24           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL c_26                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_112                          : std_logic;
  SIGNAL c_27                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_113                          : std_logic;
  SIGNAL c_28                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_114                          : std_logic;
  SIGNAL c_29                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_115                          : std_logic;
  SIGNAL minval_12                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_116                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_117                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p437tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL minval_13                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_118                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_119                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p443tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL maxval_14                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_120                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_121                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p449tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL maxval_15                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_122                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_123                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p455tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL mergedInput_9                    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin_9              : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr_9              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_9              : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_9              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_9             : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned_9    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput_9                   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput_44                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_124                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_25           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_45                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_125                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_26           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_46                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_126                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_27           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_47                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_127                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_28           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL c_30                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_128                          : std_logic;
  SIGNAL c_31                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_129                          : std_logic;
  SIGNAL c_32                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_130                          : std_logic;
  SIGNAL c_33                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_131                          : std_logic;
  SIGNAL minval_14                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_132                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_133                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p413tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL minval_15                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_134                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_135                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p419tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL minval_16                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_136                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_137                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p425tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL minval_17                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_138                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_139                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p431tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL mergedInput_10                   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin_10             : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr_10             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_10             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_10             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_10            : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned_10   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput_10                  : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput_48                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_140                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_29           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_49                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_141                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_30           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_50                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_142                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_31           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_51                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_143                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_32           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_52                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_144                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_33           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_53                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_145                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_34           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_54                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_146                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_35           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_2                        : vector_of_unsigned8(0 TO 17);  -- ufix8 [18]
  SIGNAL rd_addr_overclock18_1            : vector_of_unsigned8(0 TO 17);  -- ufix8 [18]
  SIGNAL ratechange_splitcomp_out0_5      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_5      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out2_5      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out3_5      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out4_5      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out5_5      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out6_5      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out7_5      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out8_5      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out9_5      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out10_5     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out11_5     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out12_5     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out13_5     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out14_5     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out15_5     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out16_5     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out17_5     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_3                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_55                   : std_logic;  -- ufix1
  SIGNAL delayOut0_1                      : std_logic;
  SIGNAL slicedInput_56                   : std_logic;  -- ufix1
  SIGNAL delayOut1_1                      : std_logic;
  SIGNAL slicedInput_57                   : std_logic;  -- ufix1
  SIGNAL delayOut2_1                      : std_logic;
  SIGNAL slicedInput_58                   : std_logic;  -- ufix1
  SIGNAL delayOut3_1                      : std_logic;
  SIGNAL slicedInput_59                   : std_logic;  -- ufix1
  SIGNAL delayOut4_1                      : std_logic;
  SIGNAL slicedInput_60                   : std_logic;  -- ufix1
  SIGNAL delayOut5_1                      : std_logic;
  SIGNAL slicedInput_61                   : std_logic;  -- ufix1
  SIGNAL delayOut6_1                      : std_logic;
  SIGNAL slicedInput_62                   : std_logic;  -- ufix1
  SIGNAL delayOut7_1                      : std_logic;
  SIGNAL slicedInput_63                   : std_logic;  -- ufix1
  SIGNAL delayOut8_1                      : std_logic;
  SIGNAL slicedInput_64                   : std_logic;  -- ufix1
  SIGNAL delayOut9_1                      : std_logic;
  SIGNAL slicedInput_65                   : std_logic;  -- ufix1
  SIGNAL delayOut10_1                     : std_logic;
  SIGNAL slicedInput_66                   : std_logic;  -- ufix1
  SIGNAL delayOut11_1                     : std_logic;
  SIGNAL slicedInput_67                   : std_logic;  -- ufix1
  SIGNAL delayOut12_1                     : std_logic;
  SIGNAL slicedInput_68                   : std_logic;  -- ufix1
  SIGNAL delayOut13_1                     : std_logic;
  SIGNAL slicedInput_69                   : std_logic;  -- ufix1
  SIGNAL delayOut14_1                     : std_logic;
  SIGNAL slicedInput_70                   : std_logic;  -- ufix1
  SIGNAL delayOut15_1                     : std_logic;
  SIGNAL slicedInput_71                   : std_logic;  -- ufix1
  SIGNAL delayOut16_1                     : std_logic;
  SIGNAL slicedInput_72                   : std_logic;  -- ufix1
  SIGNAL delayOut17_1                     : std_logic;
  SIGNAL rRam2_ram_wr_en_sig              : std_logic_vector(0 TO 17);  -- boolean [18]
  SIGNAL rRam2_ram_wr_en_sig_overclock18  : std_logic_vector(0 TO 17);  -- boolean [18]
  SIGNAL ratechange_splitcomp_out0_6      : std_logic;
  SIGNAL ratechange_splitcomp_out1_6      : std_logic;
  SIGNAL ratechange_splitcomp_out2_6      : std_logic;
  SIGNAL ratechange_splitcomp_out3_6      : std_logic;
  SIGNAL ratechange_splitcomp_out4_6      : std_logic;
  SIGNAL ratechange_splitcomp_out5_6      : std_logic;
  SIGNAL ratechange_splitcomp_out6_6      : std_logic;
  SIGNAL ratechange_splitcomp_out7_6      : std_logic;
  SIGNAL ratechange_splitcomp_out8_6      : std_logic;
  SIGNAL ratechange_splitcomp_out9_6      : std_logic;
  SIGNAL ratechange_splitcomp_out10_6     : std_logic;
  SIGNAL ratechange_splitcomp_out11_6     : std_logic;
  SIGNAL ratechange_splitcomp_out12_6     : std_logic;
  SIGNAL ratechange_splitcomp_out13_6     : std_logic;
  SIGNAL ratechange_splitcomp_out14_6     : std_logic;
  SIGNAL ratechange_splitcomp_out15_6     : std_logic;
  SIGNAL ratechange_splitcomp_out16_6     : std_logic;
  SIGNAL ratechange_splitcomp_out17_6     : std_logic;
  SIGNAL rRam2_ram_wr_en_sig_1            : std_logic;
  SIGNAL slicedInput_73                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_147                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_36           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_4                        : vector_of_unsigned8(0 TO 17);  -- ufix8 [18]
  SIGNAL wr_addr_overclock18_2            : vector_of_unsigned8(0 TO 17);  -- ufix8 [18]
  SIGNAL ratechange_splitcomp_out0_7      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_7      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out2_7      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out3_7      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out4_7      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out5_7      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out6_7      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out7_7      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out8_7      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out9_7      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out10_7     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out11_7     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out12_7     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out13_7     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out14_7     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out15_7     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out16_7     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out17_7     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_5                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL c_34                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_148                          : std_logic;
  SIGNAL c_35                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_149                          : std_logic;
  SIGNAL c_36                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_150                          : std_logic;
  SIGNAL c_37                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_151                          : std_logic;
  SIGNAL minval_18                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_152                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_153                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p509tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL minval_19                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_154                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_155                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p515tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL minval_20                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_156                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_157                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p521tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL minval_21                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_158                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_159                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p527tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL mergedInput_11                   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin_11             : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr_11             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_11             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_11             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_11            : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned_11   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput_11                  : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput_74                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_160                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_37           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_75                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_161                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_38           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_76                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_162                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_39           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_77                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_163                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_40           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_78                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_164                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_41           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL c_38                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_165                          : std_logic;
  SIGNAL c_39                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_166                          : std_logic;
  SIGNAL maxval_16                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_167                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_168                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p581tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL maxval_17                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_169                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_170                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p587tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL mergedInput_12                   : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mergedDelay_regin_12             : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mergedDelay_waddr_12             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_12             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_12             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_12            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL mergedDelay_regout_unsigned_12   : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mergedOutput_12                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL slicedInput_79                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_171                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_42           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_80                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_172                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_43           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL c_40                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_173                          : std_logic;
  SIGNAL c_41                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_174                          : std_logic;
  SIGNAL c_42                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_175                          : std_logic;
  SIGNAL c_43                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_176                          : std_logic;
  SIGNAL maxval_18                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_177                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_178                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p557tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL maxval_19                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_179                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_180                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p563tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL maxval_20                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_181                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_182                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p569tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL maxval_21                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_183                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_184                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p575tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL mergedInput_13                   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin_13             : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr_13             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_13             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_13             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_13            : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned_13   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput_13                  : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput_81                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_185                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_44           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_82                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_186                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_45           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_83                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_187                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_46           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL c_44                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_188                          : std_logic;
  SIGNAL c_45                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_189                          : std_logic;
  SIGNAL c_46                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_190                          : std_logic;
  SIGNAL c_47                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_191                          : std_logic;
  SIGNAL minval_22                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_192                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_193                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p533tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL minval_23                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_194                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_195                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p539tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL maxval_22                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_196                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_197                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p545tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL maxval_23                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_198                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_199                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL p551tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL mergedInput_14                   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin_14             : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr_14             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_14             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_14             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_14            : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned_14   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput_14                  : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput_84                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_200                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_47           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_85                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_201                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_48           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_86                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_202                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_49           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_87                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_203                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_50           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_88                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_204                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_51           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_89                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_205                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_52           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_90                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_206                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_53           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_4                        : vector_of_unsigned8(0 TO 17);  -- ufix8 [18]
  SIGNAL rd_addr_overclock18_2            : vector_of_unsigned8(0 TO 17);  -- ufix8 [18]
  SIGNAL ratechange_splitcomp_out0_8      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out1_8      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out2_8      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out3_8      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out4_8      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out5_8      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out6_8      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out7_8      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out8_8      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out9_8      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out10_8     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out11_8     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out12_8     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out13_8     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out14_8     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out15_8     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out16_8     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ratechange_splitcomp_out17_8     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_addr_5                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_91                   : std_logic;  -- ufix1
  SIGNAL delayOut0_2                      : std_logic;
  SIGNAL slicedInput_92                   : std_logic;  -- ufix1
  SIGNAL delayOut1_2                      : std_logic;
  SIGNAL slicedInput_93                   : std_logic;  -- ufix1
  SIGNAL delayOut2_2                      : std_logic;
  SIGNAL slicedInput_94                   : std_logic;  -- ufix1
  SIGNAL delayOut3_2                      : std_logic;
  SIGNAL slicedInput_95                   : std_logic;  -- ufix1
  SIGNAL delayOut4_2                      : std_logic;
  SIGNAL slicedInput_96                   : std_logic;  -- ufix1
  SIGNAL delayOut5_2                      : std_logic;
  SIGNAL slicedInput_97                   : std_logic;  -- ufix1
  SIGNAL delayOut6_2                      : std_logic;
  SIGNAL slicedInput_98                   : std_logic;  -- ufix1
  SIGNAL delayOut7_2                      : std_logic;
  SIGNAL slicedInput_99                   : std_logic;  -- ufix1
  SIGNAL delayOut8_2                      : std_logic;
  SIGNAL slicedInput_100                  : std_logic;  -- ufix1
  SIGNAL delayOut9_2                      : std_logic;
  SIGNAL slicedInput_101                  : std_logic;  -- ufix1
  SIGNAL delayOut10_2                     : std_logic;
  SIGNAL slicedInput_102                  : std_logic;  -- ufix1
  SIGNAL delayOut11_2                     : std_logic;
  SIGNAL slicedInput_103                  : std_logic;  -- ufix1
  SIGNAL delayOut12_2                     : std_logic;
  SIGNAL slicedInput_104                  : std_logic;  -- ufix1
  SIGNAL delayOut13_2                     : std_logic;
  SIGNAL slicedInput_105                  : std_logic;  -- ufix1
  SIGNAL delayOut14_2                     : std_logic;
  SIGNAL slicedInput_106                  : std_logic;  -- ufix1
  SIGNAL delayOut15_2                     : std_logic;
  SIGNAL slicedInput_107                  : std_logic;  -- ufix1
  SIGNAL delayOut16_2                     : std_logic;
  SIGNAL slicedInput_108                  : std_logic;  -- ufix1
  SIGNAL delayOut17_2                     : std_logic;
  SIGNAL rRam3_ram_wr_en_sig              : std_logic_vector(0 TO 17);  -- boolean [18]
  SIGNAL rRam3_ram_wr_en_sig_overclock18  : std_logic_vector(0 TO 17);  -- boolean [18]
  SIGNAL ratechange_splitcomp_out0_9      : std_logic;
  SIGNAL ratechange_splitcomp_out1_9      : std_logic;
  SIGNAL ratechange_splitcomp_out2_9      : std_logic;
  SIGNAL ratechange_splitcomp_out3_9      : std_logic;
  SIGNAL ratechange_splitcomp_out4_9      : std_logic;
  SIGNAL ratechange_splitcomp_out5_9      : std_logic;
  SIGNAL ratechange_splitcomp_out6_9      : std_logic;
  SIGNAL ratechange_splitcomp_out7_9      : std_logic;
  SIGNAL ratechange_splitcomp_out8_9      : std_logic;
  SIGNAL ratechange_splitcomp_out9_9      : std_logic;
  SIGNAL ratechange_splitcomp_out10_9     : std_logic;
  SIGNAL ratechange_splitcomp_out11_9     : std_logic;
  SIGNAL ratechange_splitcomp_out12_9     : std_logic;
  SIGNAL ratechange_splitcomp_out13_9     : std_logic;
  SIGNAL ratechange_splitcomp_out14_9     : std_logic;
  SIGNAL ratechange_splitcomp_out15_9     : std_logic;
  SIGNAL ratechange_splitcomp_out16_9     : std_logic;
  SIGNAL ratechange_splitcomp_out17_9     : std_logic;
  SIGNAL rRam3_ram_wr_en_sig_1            : std_logic;
  SIGNAL mergedInput_15                   : unsigned(50 DOWNTO 0);  -- ufix51
  SIGNAL mergedDelay_regin_15             : unsigned(50 DOWNTO 0);  -- ufix51
  SIGNAL mergedDelay_waddr_15             : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL mergedDelay_wrenb_15             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_15             : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL mergedDelay_regout_15            : std_logic_vector(50 DOWNTO 0);  -- ufix51
  SIGNAL mergedDelay_regout_unsigned_15   : unsigned(50 DOWNTO 0);  -- ufix51
  SIGNAL mergedOutput_15                  : unsigned(50 DOWNTO 0);  -- ufix51
  SIGNAL wr_data_1                        : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL slicedInput_109                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_110                  : std_logic;  -- ufix1
  SIGNAL rRam1_ram_wr_en_sig_2            : std_logic;
  SIGNAL slicedInput_111                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL sel                              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL mergedInput_16                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL mergedDelay_regin_16             : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL mergedDelay_waddr_16             : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL mergedDelay_wrenb_16             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_16             : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL mergedDelay_regout_16            : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL mergedDelay_regout_unsigned_16   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL mergedOutput_16                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rd_data                          : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL rd_data_unsigned                 : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL slicedInput_112                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rRam1_ram_demux_yreg             : vector_of_unsigned14(0 TO 17);  -- ufix14 [18]
  SIGNAL rRam1_ram_demux_yreg_next        : vector_of_unsigned14(0 TO 17);  -- ufix14_En6 [18]
  SIGNAL rRam1_ram_demux_ctr1             : signed(31 DOWNTO 0);  -- int32
  SIGNAL rRam1_ram_demux_ytmp             : vector_of_unsigned14(0 TO 17);  -- ufix14_En6 [18]
  SIGNAL rRam1_ram_demux_add_cast         : signed(31 DOWNTO 0);  -- int32
  SIGNAL rd_data_overclock18              : vector_of_unsigned14(0 TO 17);  -- ufix14_En6 [18]
  SIGNAL rd_data_downsample18_bypass_reg  : vector_of_unsigned14(0 TO 17);  -- ufix14 [18]
  SIGNAL rd_data_1                        : vector_of_unsigned14(0 TO 17);  -- ufix14_En6 [18]
  SIGNAL rRam1                            : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL rRam1_1                          : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL rRam1_2                          : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL rRam1_3                          : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL rRam1_4                          : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL rRam1_5                          : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL rRam1_6                          : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL rRam1_7                          : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL rRam1_8                          : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL rRam1_9                          : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL rRam1_10                         : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL rRam1_11                         : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL rRam1_12                         : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL rRam1_13                         : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL rRam1_14                         : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL rRam1_15                         : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL xg                               : vector_of_signed14(0 TO 75);  -- sfix14_En15 [76]
  SIGNAL xg_1                             : vector_of_signed14(0 TO 75);  -- sfix14_En15 [76]
  SIGNAL xg_2                             : vector_of_signed14(0 TO 75);  -- sfix14_En15 [76]
  SIGNAL xg_3                             : vector_of_signed14(0 TO 75);  -- sfix14_En15 [76]
  SIGNAL xg_4                             : vector_of_signed14(0 TO 75);  -- sfix14_En15 [76]
  SIGNAL xg_5                             : vector_of_signed14(0 TO 75);  -- sfix14_En15 [76]
  SIGNAL xg_6                             : vector_of_signed14(0 TO 75);  -- sfix14_En15 [76]
  SIGNAL xg_7                             : vector_of_signed14(0 TO 75);  -- sfix14_En15 [76]
  SIGNAL xg_8                             : vector_of_signed14(0 TO 75);  -- sfix14_En15 [76]
  SIGNAL xg_9                             : vector_of_signed14(0 TO 75);  -- sfix14_En15 [76]
  SIGNAL xg_10                            : vector_of_signed14(0 TO 75);  -- sfix14_En15 [76]
  SIGNAL xg_11                            : vector_of_signed14(0 TO 75);  -- sfix14_En15 [76]
  SIGNAL xg_12                            : vector_of_signed14(0 TO 75);  -- sfix14_En15 [76]
  SIGNAL xg_13                            : vector_of_signed14(0 TO 75);  -- sfix14_En15 [76]
  SIGNAL xg_14                            : vector_of_signed14(0 TO 75);  -- sfix14_En15 [76]
  SIGNAL xg_15                            : vector_of_signed14(0 TO 75);  -- sfix14_En15 [76]
  SIGNAL xg_16                            : vector_of_signed14(0 TO 75);  -- sfix14_En15 [76]
  SIGNAL delayIn0                         : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn1                         : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn2                         : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn3                         : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn4                         : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn5                         : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn6                         : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn7                         : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn8                         : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL mergedInput_17                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_17             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_17             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_17             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_17             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_17            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_17   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_17                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL g                                : vector_of_unsigned14(0 TO 58);  -- ufix14_En15 [59]
  SIGNAL g_1                              : vector_of_unsigned14(0 TO 58);  -- ufix14_En15 [59]
  SIGNAL g_2                              : vector_of_unsigned14(0 TO 58);  -- ufix14_En15 [59]
  SIGNAL g_3                              : vector_of_unsigned14(0 TO 58);  -- ufix14_En15 [59]
  SIGNAL g_4                              : vector_of_unsigned14(0 TO 58);  -- ufix14_En15 [59]
  SIGNAL g_5                              : vector_of_unsigned14(0 TO 58);  -- ufix14_En15 [59]
  SIGNAL g_6                              : vector_of_unsigned14(0 TO 58);  -- ufix14_En15 [59]
  SIGNAL g_7                              : vector_of_unsigned14(0 TO 58);  -- ufix14_En15 [59]
  SIGNAL g_8                              : vector_of_unsigned14(0 TO 58);  -- ufix14_En15 [59]
  SIGNAL g_9                              : vector_of_unsigned14(0 TO 58);  -- ufix14_En15 [59]
  SIGNAL g_10                             : vector_of_unsigned14(0 TO 58);  -- ufix14_En15 [59]
  SIGNAL g_11                             : vector_of_unsigned14(0 TO 58);  -- ufix14_En15 [59]
  SIGNAL g_12                             : vector_of_unsigned14(0 TO 58);  -- ufix14_En15 [59]
  SIGNAL g_13                             : vector_of_unsigned14(0 TO 58);  -- ufix14_En15 [59]
  SIGNAL g_14                             : vector_of_unsigned14(0 TO 58);  -- ufix14_En15 [59]
  SIGNAL g_15                             : vector_of_unsigned14(0 TO 58);  -- ufix14_En15 [59]
  SIGNAL g_16                             : vector_of_unsigned14(0 TO 58);  -- ufix14_En15 [59]
  SIGNAL delayIn51                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn52                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn53                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn54                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn55                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn56                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn57                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn58                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn9                         : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL mergedInput_18                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_18             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_18             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_18             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_18             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_18            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_18   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_18                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn10                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn11                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn12                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn13                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn14                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn15                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn16                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn17                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn18                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL mergedInput_19                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_19             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_19             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_19             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_19             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_19            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_19   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_19                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn19                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn20                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn21                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn22                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn23                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn24                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn25                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn26                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn27                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL mergedInput_20                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_20             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_20             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_20             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_20             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_20            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_20   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_20                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn28                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn29                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn30                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn31                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn32                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn33                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn34                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn35                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn36                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL mergedInput_21                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_21             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_21             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_21             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_21             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_21            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_21   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_21                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn37                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn38                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn39                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn40                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn41                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn42                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn43                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn44                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn45                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL mergedInput_22                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_22             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_22             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_22             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_22             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_22            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_22   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_22                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn46                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn47                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn48                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn49                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn50                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn51_1                      : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn52_1                      : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn53_1                      : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn54_1                      : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL mergedInput_23                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_23             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_23             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_23             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_23             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_23            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_23   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_23                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn55_1                      : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn56_1                      : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn57_1                      : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn58_1                      : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn59                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn60                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn61                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn62                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn63                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL mergedInput_24                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_24             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_24             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_24             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_24             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_24            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_24   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_24                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn64                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn65                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn66                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn67                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn68                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn69                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn70                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn71                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn72                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL mergedInput_25                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_25             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_25             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_25             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_25             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_25            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_25   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_25                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn73                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn74                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL delayIn75                        : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL mergedInput_26                   : unsigned(41 DOWNTO 0);  -- ufix42
  SIGNAL mergedDelay_regin_26             : unsigned(41 DOWNTO 0);  -- ufix42
  SIGNAL mergedDelay_waddr_26             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_26             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_26             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_26            : std_logic_vector(41 DOWNTO 0);  -- ufix42
  SIGNAL mergedDelay_regout_unsigned_26   : unsigned(41 DOWNTO 0);  -- ufix42
  SIGNAL mergedOutput_26                  : unsigned(41 DOWNTO 0);  -- ufix42
  SIGNAL slicedInput_113                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut0_3                      : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_114                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut1_3                      : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_115                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut2_3                      : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_116                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut3_3                      : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_117                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut4_3                      : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_118                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut5_3                      : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_119                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut6_3                      : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_120                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut7_3                      : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_121                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut8_3                      : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_122                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut9_3                      : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_123                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut10_3                     : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_124                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut11_3                     : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_125                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut12_3                     : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_126                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut13_3                     : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_127                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut14_3                     : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_128                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut15_3                     : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_129                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut16_3                     : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_130                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut17_3                     : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_131                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut18                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_132                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut19                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_133                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut20                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_134                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut21                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_135                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut22                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_136                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut23                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_137                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut24                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_138                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut25                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_139                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut26                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_140                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut27                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_141                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut28                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_142                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut29                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_143                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut30                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_144                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut31                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_145                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut32                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_146                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut33                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_147                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut34                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_148                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut35                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_149                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut36                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_150                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut37                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_151                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut38                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_152                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut39                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_153                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut40                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_154                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut41                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_155                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut42                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_156                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut43                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_157                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut44                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_158                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut45                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_159                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut46                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_160                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut47                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_161                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut48                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_162                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut49                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_163                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut50                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_164                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut51                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_165                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut52                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_166                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut53                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_167                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut54                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_168                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut55                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_169                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut56                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_170                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut57                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_171                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut58                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_172                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut59                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_173                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut60                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_174                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut61                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_175                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut62                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_176                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut63                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_177                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut64                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_178                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut65                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_179                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut66                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_180                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut67                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_181                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut68                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_182                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut69                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_183                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut70                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_184                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut71                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_185                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut72                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_186                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut73                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_187                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut74                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL slicedInput_188                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut75                       : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL xg_17                            : vector_of_signed14(0 TO 75);  -- sfix14_En15 [76]
  SIGNAL inb1_P                           : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL reduced_reg                      : vector_of_unsigned14(0 TO 19);  -- ufix14 [20]
  SIGNAL inb1_P_1                         : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL inb1_N                           : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL reduced_reg_1                    : vector_of_unsigned14(0 TO 19);  -- ufix14 [20]
  SIGNAL inb1_N_1                         : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL inb2_1                           : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL drow_1_1                         : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL p12drow_1_mul_temp               : signed(28 DOWNTO 0);  -- sfix29_En20
  SIGNAL p12drow_1_cast                   : signed(27 DOWNTO 0);  -- sfix28_En20
  SIGNAL drow_1_tmp                       : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL slicedInput_189                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL writeData_2                      : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL wr_data_2                        : vector_of_signed14(0 TO 17);  -- sfix14_En6 [18]
  SIGNAL wr_data_overclock18_1            : vector_of_signed14(0 TO 17);  -- sfix14_En6 [18]
  SIGNAL ratechange_splitcomp_out0_10     : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out1_10     : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out2_10     : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out3_10     : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out4_10     : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out5_10     : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out6_10     : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out7_10     : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out8_10     : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out9_10     : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out10_10    : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out11_10    : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out12_10    : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out13_10    : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out14_10    : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out15_10    : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out16_10    : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL ratechange_splitcomp_out17_10    : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL wr_data_3                        : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL slicedInput_190                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_191                  : std_logic;  -- ufix1
  SIGNAL rRam2_ram_wr_en_sig_2            : std_logic;
  SIGNAL slicedInput_192                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_data_2                        : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL rd_data_signed                   : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL slicedInput_193                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rRam2_ram_demux_yreg             : vector_of_signed14(0 TO 17);  -- sfix14 [18]
  SIGNAL rRam2_ram_demux_yreg_next        : vector_of_signed14(0 TO 17);  -- sfix14_En6 [18]
  SIGNAL rRam2_ram_demux_ctr1             : signed(31 DOWNTO 0);  -- int32
  SIGNAL rRam2_ram_demux_ytmp             : vector_of_signed14(0 TO 17);  -- sfix14_En6 [18]
  SIGNAL rRam2_ram_demux_add_cast         : signed(31 DOWNTO 0);  -- int32
  SIGNAL rd_data_overclock18_1            : vector_of_signed14(0 TO 17);  -- sfix14_En6 [18]
  SIGNAL rd_data_downsample18_bypass_reg_1 : vector_of_signed14(0 TO 17);  -- sfix14 [18]
  SIGNAL rd_data_3                        : vector_of_signed14(0 TO 17);  -- sfix14_En6 [18]
  SIGNAL rRam2                            : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL rRam2_1                          : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL rRam2_2                          : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL rRam2_3                          : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL rRam2_4                          : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL rRam2_5                          : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL rRam2_6                          : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL rRam2_7                          : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL rRam2_8                          : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL rRam2_9                          : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL rRam2_10                         : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL rRam2_11                         : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL rRam2_12                         : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL rRam2_13                         : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL rRam2_14                         : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL rRam2_15                         : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL delayIn0_1                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn1_1                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn2_1                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn3_1                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn4_1                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn5_1                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn6_1                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn7_1                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn8_1                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL mergedInput_27                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_27             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_27             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_27             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_27             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_27            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_27   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_27                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL xxg                              : vector_of_unsigned14(0 TO 92);  -- ufix14_En15 [93]
  SIGNAL xxg_1                            : vector_of_unsigned14(0 TO 92);  -- ufix14_En15 [93]
  SIGNAL xxg_2                            : vector_of_unsigned14(0 TO 92);  -- ufix14_En15 [93]
  SIGNAL xxg_3                            : vector_of_unsigned14(0 TO 92);  -- ufix14_En15 [93]
  SIGNAL xxg_4                            : vector_of_unsigned14(0 TO 92);  -- ufix14_En15 [93]
  SIGNAL xxg_5                            : vector_of_unsigned14(0 TO 92);  -- ufix14_En15 [93]
  SIGNAL xxg_6                            : vector_of_unsigned14(0 TO 92);  -- ufix14_En15 [93]
  SIGNAL xxg_7                            : vector_of_unsigned14(0 TO 92);  -- ufix14_En15 [93]
  SIGNAL xxg_8                            : vector_of_unsigned14(0 TO 92);  -- ufix14_En15 [93]
  SIGNAL xxg_9                            : vector_of_unsigned14(0 TO 92);  -- ufix14_En15 [93]
  SIGNAL xxg_10                           : vector_of_unsigned14(0 TO 92);  -- ufix14_En15 [93]
  SIGNAL xxg_11                           : vector_of_unsigned14(0 TO 92);  -- ufix14_En15 [93]
  SIGNAL xxg_12                           : vector_of_unsigned14(0 TO 92);  -- ufix14_En15 [93]
  SIGNAL xxg_13                           : vector_of_unsigned14(0 TO 92);  -- ufix14_En15 [93]
  SIGNAL xxg_14                           : vector_of_unsigned14(0 TO 92);  -- ufix14_En15 [93]
  SIGNAL xxg_15                           : vector_of_unsigned14(0 TO 92);  -- ufix14_En15 [93]
  SIGNAL xxg_16                           : vector_of_unsigned14(0 TO 92);  -- ufix14_En15 [93]
  SIGNAL delayIn90                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn91                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn92                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn9_1                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn10_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn11_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn12_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn13_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn14_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL mergedInput_28                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_28             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_28             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_28             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_28             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_28            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_28   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_28                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn15_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn16_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn17_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn18_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn19_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn20_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn21_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn22_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn23_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL mergedInput_29                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_29             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_29             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_29             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_29             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_29            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_29   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_29                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn24_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn25_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn26_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn27_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn28_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn29_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn30_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn31_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn32_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL mergedInput_30                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_30             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_30             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_30             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_30             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_30            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_30   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_30                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn33_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn34_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn35_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn36_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn37_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn38_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn39_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn40_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn41_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL mergedInput_31                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_31             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_31             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_31             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_31             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_31            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_31   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_31                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn42_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn43_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn44_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn45_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn46_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn47_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn48_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn49_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn50_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL mergedInput_32                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_32             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_32             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_32             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_32             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_32            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_32   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_32                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL slicedInput_194                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut0_4                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_195                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut1_4                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_196                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut2_4                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_197                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut3_4                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_198                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut4_4                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_199                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut5_4                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_200                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut6_4                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_201                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut7_4                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_202                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut8_4                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_203                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut9_4                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_204                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut10_4                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_205                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut11_4                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_206                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut12_4                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_207                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut13_4                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_208                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut14_4                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_209                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut15_4                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_210                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut16_4                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_211                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut17_4                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_212                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut18_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_213                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut19_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_214                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut20_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_215                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut21_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_216                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut22_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_217                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut23_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_218                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut24_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_219                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut25_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_220                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut26_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_221                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut27_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_222                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut28_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_223                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut29_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_224                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut30_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_225                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut31_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_226                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut32_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_227                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut33_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_228                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut34_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_229                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut35_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_230                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut36_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_231                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut37_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_232                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut38_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_233                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut39_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_234                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut40_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_235                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut41_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_236                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut42_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_237                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut43_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_238                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut44_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_239                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut45_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_240                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut46_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_241                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut47_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_242                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut48_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_243                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut49_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_244                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut50_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_245                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut51_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_246                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut52_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_247                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut53_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_248                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut54_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_249                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut55_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_250                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut56_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_251                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut57_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_252                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut58_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL g_17                             : vector_of_unsigned14(0 TO 58);  -- ufix14_En15 [59]
  SIGNAL rRam2_16                         : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL inb3                             : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL p297inb3_mul_temp                : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL p297inb3_cast                    : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL inb2_P                           : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL reduced_reg_2                    : vector_of_signed14(0 TO 19);  -- sfix14 [20]
  SIGNAL inb2_P_1                         : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL inb2_N                           : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL reduced_reg_3                    : vector_of_signed14(0 TO 19);  -- sfix14 [20]
  SIGNAL inb2_N_1                         : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL inb3_1                           : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL drow_2_1                         : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL p11drow_2_mul_temp               : signed(28 DOWNTO 0);  -- sfix29_En20
  SIGNAL p11drow_2_cast                   : signed(27 DOWNTO 0);  -- sfix28_En20
  SIGNAL drow_2_tmp                       : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL rRam1_16                         : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL inb1                             : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL p295inb1_mul_temp                : unsigned(27 DOWNTO 0);  -- ufix28_En21
  SIGNAL inb1_1                           : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL delayIn0_2                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn1_2                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn2_2                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn3_2                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn4_2                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn5_2                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn6_2                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn7_2                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn8_2                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL mergedInput_33                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_33             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_33             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_33             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_33             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_33            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_33   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_33                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn9_2                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn10_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn11_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn12_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn13_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn14_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn15_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn16_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn17_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL mergedInput_34                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_34             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_34             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_34             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_34             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_34            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_34   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_34                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn18_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn19_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn20_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn21_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn22_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn23_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn24_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn25_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn26_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL mergedInput_35                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_35             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_35             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_35             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_35             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_35            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_35   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_35                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn27_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn28_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn29_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn30_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn31_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn32_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn33_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn34_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn35_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL mergedInput_36                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_36             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_36             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_36             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_36             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_36            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_36   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_36                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn36_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn37_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn38_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn39_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn40_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn41_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn42_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn43_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn44_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL mergedInput_37                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_37             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_37             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_37             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_37             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_37            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_37   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_37                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn45_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn46_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn47_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn48_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn49_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn50_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn51_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn52_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn53_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL mergedInput_38                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_38             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_38             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_38             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_38             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_38            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_38   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_38                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn54_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn55_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn56_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn57_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn58_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn59_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn60_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn61_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn62_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL mergedInput_39                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_39             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_39             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_39             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_39             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_39            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_39   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_39                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn63_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn64_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn65_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn66_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn67_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn68_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn69_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn70_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn71_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL mergedInput_40                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_40             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_40             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_40             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_40             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_40            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_40   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_40                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn72_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn73_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn74_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn75_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn76                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn77                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn78                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn79                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn80                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL mergedInput_41                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_41             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_41             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_41             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_41             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_41            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_41   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_41                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL delayIn81                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn82                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn83                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn84                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn85                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn86                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn87                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn88                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL delayIn89                        : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL mergedInput_42                   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regin_42             : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_waddr_42             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_wrenb_42             : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_42             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL mergedDelay_regout_42            : std_logic_vector(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedDelay_regout_unsigned_42   : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL mergedOutput_42                  : unsigned(125 DOWNTO 0);  -- ufix126
  SIGNAL slicedInput_253                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut0_5                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_254                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut1_5                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_255                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut2_5                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_256                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut3_5                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_257                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut4_5                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_258                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut5_5                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_259                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut6_5                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_260                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut7_5                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_261                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut8_5                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_262                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut9_5                      : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_263                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut10_5                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_264                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut11_5                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_265                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut12_5                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_266                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut13_5                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_267                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut14_5                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_268                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut15_5                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_269                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut16_5                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_270                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut17_5                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_271                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut18_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_272                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut19_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_273                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut20_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_274                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut21_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_275                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut22_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_276                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut23_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_277                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut24_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_278                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut25_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_279                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut26_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_280                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut27_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_281                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut28_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_282                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut29_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_283                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut30_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_284                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut31_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_285                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut32_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_286                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut33_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_287                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut34_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_288                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut35_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_289                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut36_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_290                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut37_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_291                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut38_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_292                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut39_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_293                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut40_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_294                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut41_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_295                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut42_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_296                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut43_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_297                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut44_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_298                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut45_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_299                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut46_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_300                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut47_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_301                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut48_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_302                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut49_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_303                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut50_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_304                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut51_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_305                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut52_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_306                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut53_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_307                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut54_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_308                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut55_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_309                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut56_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_310                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut57_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_311                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut58_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_312                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut59_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_313                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut60_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_314                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut61_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_315                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut62_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_316                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut63_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_317                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut64_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_318                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut65_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_319                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut66_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_320                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut67_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_321                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut68_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_322                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut69_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_323                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut70_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_324                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut71_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_325                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut72_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_326                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut73_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_327                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut74_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_328                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut75_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_329                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut76                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_330                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut77                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_331                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut78                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_332                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut79                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_333                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut80                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_334                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut81                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_335                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut82                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_336                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut83                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_337                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut84                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_338                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut85                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_339                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut86                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_340                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut87                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_341                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut88                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_342                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut89                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_343                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut90                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_344                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut91                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL slicedInput_345                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayOut92                       : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL xxg_17                           : vector_of_unsigned14(0 TO 92);  -- ufix14_En15 [93]
  SIGNAL inb4_1                           : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL drow_3_1                         : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL p10drow_3_cast                   : signed(14 DOWNTO 0);  -- sfix15_En6
  SIGNAL p10drow_3_mul_temp               : signed(28 DOWNTO 0);  -- sfix29_En20
  SIGNAL p10drow_3_add_cast               : signed(27 DOWNTO 0);  -- sfix28_En20
  SIGNAL p10drow_3_add_cast_1             : signed(30 DOWNTO 0);  -- sfix31_En21
  SIGNAL p10drow_3_mul_temp_1             : unsigned(27 DOWNTO 0);  -- ufix28_En21
  SIGNAL p10drow_3_add_cast_2             : signed(30 DOWNTO 0);  -- sfix31_En21
  SIGNAL p10drow_3_add_temp               : signed(30 DOWNTO 0);  -- sfix31_En21
  SIGNAL drow_3_tmp                       : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL slicedInput_346                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL writeData_3                      : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL wr_data_4                        : vector_of_unsigned14(0 TO 17);  -- ufix14_En5 [18]
  SIGNAL wr_data_overclock18_2            : vector_of_unsigned14(0 TO 17);  -- ufix14_En5 [18]
  SIGNAL ratechange_splitcomp_out0_11     : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL ratechange_splitcomp_out1_11     : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL ratechange_splitcomp_out2_11     : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL ratechange_splitcomp_out3_11     : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL ratechange_splitcomp_out4_11     : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL ratechange_splitcomp_out5_11     : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL ratechange_splitcomp_out6_11     : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL ratechange_splitcomp_out7_11     : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL ratechange_splitcomp_out8_11     : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL ratechange_splitcomp_out9_11     : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL ratechange_splitcomp_out10_11    : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL ratechange_splitcomp_out11_11    : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL ratechange_splitcomp_out12_11    : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL ratechange_splitcomp_out13_11    : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL ratechange_splitcomp_out14_11    : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL ratechange_splitcomp_out15_11    : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL ratechange_splitcomp_out16_11    : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL ratechange_splitcomp_out17_11    : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL wr_data_5                        : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL slicedInput_347                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL slicedInput_348                  : std_logic;  -- ufix1
  SIGNAL rRam3_ram_wr_en_sig_2            : std_logic;
  SIGNAL slicedInput_349                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_data_4                        : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL rd_data_unsigned_1               : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL slicedInput_350                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rRam3_ram_demux_yreg             : vector_of_unsigned14(0 TO 17);  -- ufix14 [18]
  SIGNAL rRam3_ram_demux_yreg_next        : vector_of_unsigned14(0 TO 17);  -- ufix14_En5 [18]
  SIGNAL rRam3_ram_demux_ctr1             : signed(31 DOWNTO 0);  -- int32
  SIGNAL rRam3_ram_demux_ytmp             : vector_of_unsigned14(0 TO 17);  -- ufix14_En5 [18]
  SIGNAL rRam3_ram_demux_add_cast         : signed(31 DOWNTO 0);  -- int32
  SIGNAL rd_data_overclock18_2            : vector_of_unsigned14(0 TO 17);  -- ufix14_En5 [18]
  SIGNAL rd_data_downsample18_bypass_reg_2 : vector_of_unsigned14(0 TO 17);  -- ufix14 [18]
  SIGNAL rd_data_5                        : vector_of_unsigned14(0 TO 17);  -- ufix14_En5 [18]
  SIGNAL rRam3                            : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL rRam3_1                          : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL rRam3_2                          : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL rRam3_3                          : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL rRam3_4                          : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL rRam3_5                          : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL rRam3_6                          : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL rRam3_7                          : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL rRam3_8                          : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL rRam3_9                          : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL rRam3_10                         : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL rRam3_11                         : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL rRam3_12                         : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL rRam3_13                         : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL rRam3_14                         : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL rRam3_15                         : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL rRam3_16                         : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL inb5                             : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL p299inb5_mul_temp                : unsigned(27 DOWNTO 0);  -- ufix28_En20
  SIGNAL inb5_1                           : unsigned(13 DOWNTO 0);  -- ufix14_En5
  SIGNAL drow_4_1                         : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL p9drow_4_cast                    : signed(14 DOWNTO 0);  -- sfix15_En6
  SIGNAL p9drow_4_mul_temp                : signed(28 DOWNTO 0);  -- sfix29_En20
  SIGNAL p9drow_4_add_cast                : signed(27 DOWNTO 0);  -- sfix28_En20
  SIGNAL p9drow_4_add_cast_1              : signed(30 DOWNTO 0);  -- sfix31_En21
  SIGNAL p9drow_4_mul_temp_1              : unsigned(27 DOWNTO 0);  -- ufix28_En21
  SIGNAL p9drow_4_add_cast_2              : signed(30 DOWNTO 0);  -- sfix31_En21
  SIGNAL p9drow_4_add_temp                : signed(30 DOWNTO 0);  -- sfix31_En21
  SIGNAL drow_4_tmp                       : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL inb6_1                           : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL drow_5_1                         : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL p8drow_5_mul_temp                : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL p8drow_5_cast                    : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL drow_5_tmp                       : signed(13 DOWNTO 0);  -- sfix14_En7

BEGIN
  u_PolyExp_pipeline4_fixpt_enb_bypass : PolyExp_pipeline4_fixpt_enb_bypass
    PORT MAP( clk_1 => clk,
              reset_1 => reset,
              clk_enable_1 => clk_enable,
              clk_enable_2 => clk_enable_1
              );

  u_PolyExp_pipeline4_fixpt_tc : PolyExp_pipeline4_fixpt_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable_1,
              enb => enb,
              enb_1_18_0 => enb_1_18_0,
              enb_1_18_1 => enb_1_18_1
              );

  u_ShiftRegisterRAM_generic : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 124
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin),
              wr_addr => std_logic_vector(mergedDelay_waddr),
              wr_en => mergedDelay_wrenb,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr),
              rd_dout => mergedDelay_regout
              );

  u_ShiftRegisterRAM : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_1),
              wr_addr => std_logic_vector(mergedDelay_waddr_1),
              wr_en => mergedDelay_wrenb_1,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_1),
              rd_dout => mergedDelay_regout_1
              );

  u_ShiftRegisterRAM_1 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_2),
              wr_addr => std_logic_vector(mergedDelay_waddr_2),
              wr_en => mergedDelay_wrenb_2,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_2),
              rd_dout => mergedDelay_regout_2
              );

  u_ShiftRegisterRAM_2 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_3),
              wr_addr => std_logic_vector(mergedDelay_waddr_3),
              wr_en => mergedDelay_wrenb_3,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_3),
              rd_dout => mergedDelay_regout_3
              );

  u_ShiftRegisterRAM_3 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_4),
              wr_addr => std_logic_vector(mergedDelay_waddr_4),
              wr_en => mergedDelay_wrenb_4,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_4),
              rd_dout => mergedDelay_regout_4
              );

  u_ShiftRegisterRAM_4 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 114
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_5),
              wr_addr => std_logic_vector(mergedDelay_waddr_5),
              wr_en => mergedDelay_wrenb_5,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_5),
              rd_dout => mergedDelay_regout_5
              );

  u_ShiftRegisterRAM_5 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 114
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_6),
              wr_addr => std_logic_vector(mergedDelay_waddr_6),
              wr_en => mergedDelay_wrenb_6,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_6),
              rd_dout => mergedDelay_regout_6
              );

  u_ShiftRegisterRAM_6 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_7),
              wr_addr => std_logic_vector(mergedDelay_waddr_7),
              wr_en => mergedDelay_wrenb_7,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_7),
              rd_dout => mergedDelay_regout_7
              );

  u_ShiftRegisterRAM_7 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_8),
              wr_addr => std_logic_vector(mergedDelay_waddr_8),
              wr_en => mergedDelay_wrenb_8,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_8),
              rd_dout => mergedDelay_regout_8
              );

  u_ShiftRegisterRAM_8 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_9),
              wr_addr => std_logic_vector(mergedDelay_waddr_9),
              wr_en => mergedDelay_wrenb_9,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_9),
              rd_dout => mergedDelay_regout_9
              );

  u_ShiftRegisterRAM_9 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_10),
              wr_addr => std_logic_vector(mergedDelay_waddr_10),
              wr_en => mergedDelay_wrenb_10,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_10),
              rd_dout => mergedDelay_regout_10
              );

  u_ShiftRegisterRAM_10 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_11),
              wr_addr => std_logic_vector(mergedDelay_waddr_11),
              wr_en => mergedDelay_wrenb_11,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_11),
              rd_dout => mergedDelay_regout_11
              );

  u_ShiftRegisterRAM_11 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 64
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_12),
              wr_addr => std_logic_vector(mergedDelay_waddr_12),
              wr_en => mergedDelay_wrenb_12,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_12),
              rd_dout => mergedDelay_regout_12
              );

  u_ShiftRegisterRAM_12 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_13),
              wr_addr => std_logic_vector(mergedDelay_waddr_13),
              wr_en => mergedDelay_wrenb_13,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_13),
              rd_dout => mergedDelay_regout_13
              );

  u_ShiftRegisterRAM_13 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_14),
              wr_addr => std_logic_vector(mergedDelay_waddr_14),
              wr_en => mergedDelay_wrenb_14,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_14),
              rd_dout => mergedDelay_regout_14
              );

  u_ShiftRegisterRAM_14 : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 6,
                 DataWidth => 51
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(mergedDelay_regin_15),
              wr_addr => std_logic_vector(mergedDelay_waddr_15),
              wr_en => mergedDelay_wrenb_15,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_15),
              rd_dout => mergedDelay_regout_15
              );

  u_ShiftRegisterRAM_15 : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 6,
                 DataWidth => 24
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(mergedDelay_regin_16),
              wr_addr => std_logic_vector(mergedDelay_waddr_16),
              wr_en => mergedDelay_wrenb_16,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_16),
              rd_dout => mergedDelay_regout_16
              );

  u_rRam1_ram_generic : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 14
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(wr_data_1),
              wr_addr => std_logic_vector(slicedInput_109),
              wr_en => rRam1_ram_wr_en_sig_2,
              rd_addr => std_logic_vector(slicedInput_111),
              rd_dout => rd_data
              );

  u_ShiftRegisterRAM_16 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_17),
              wr_addr => std_logic_vector(mergedDelay_waddr_17),
              wr_en => mergedDelay_wrenb_17,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_17),
              rd_dout => mergedDelay_regout_17
              );

  u_ShiftRegisterRAM_17 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_18),
              wr_addr => std_logic_vector(mergedDelay_waddr_18),
              wr_en => mergedDelay_wrenb_18,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_18),
              rd_dout => mergedDelay_regout_18
              );

  u_ShiftRegisterRAM_18 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_19),
              wr_addr => std_logic_vector(mergedDelay_waddr_19),
              wr_en => mergedDelay_wrenb_19,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_19),
              rd_dout => mergedDelay_regout_19
              );

  u_ShiftRegisterRAM_19 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_20),
              wr_addr => std_logic_vector(mergedDelay_waddr_20),
              wr_en => mergedDelay_wrenb_20,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_20),
              rd_dout => mergedDelay_regout_20
              );

  u_ShiftRegisterRAM_20 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_21),
              wr_addr => std_logic_vector(mergedDelay_waddr_21),
              wr_en => mergedDelay_wrenb_21,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_21),
              rd_dout => mergedDelay_regout_21
              );

  u_ShiftRegisterRAM_21 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_22),
              wr_addr => std_logic_vector(mergedDelay_waddr_22),
              wr_en => mergedDelay_wrenb_22,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_22),
              rd_dout => mergedDelay_regout_22
              );

  u_ShiftRegisterRAM_22 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_23),
              wr_addr => std_logic_vector(mergedDelay_waddr_23),
              wr_en => mergedDelay_wrenb_23,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_23),
              rd_dout => mergedDelay_regout_23
              );

  u_ShiftRegisterRAM_23 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_24),
              wr_addr => std_logic_vector(mergedDelay_waddr_24),
              wr_en => mergedDelay_wrenb_24,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_24),
              rd_dout => mergedDelay_regout_24
              );

  u_ShiftRegisterRAM_24 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_25),
              wr_addr => std_logic_vector(mergedDelay_waddr_25),
              wr_en => mergedDelay_wrenb_25,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_25),
              rd_dout => mergedDelay_regout_25
              );

  u_ShiftRegisterRAM_25 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 42
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_26),
              wr_addr => std_logic_vector(mergedDelay_waddr_26),
              wr_en => mergedDelay_wrenb_26,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_26),
              rd_dout => mergedDelay_regout_26
              );

  u_rRam2_ram : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 14
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(wr_data_3),
              wr_addr => std_logic_vector(slicedInput_190),
              wr_en => rRam2_ram_wr_en_sig_2,
              rd_addr => std_logic_vector(slicedInput_192),
              rd_dout => rd_data_2
              );

  u_ShiftRegisterRAM_26 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_27),
              wr_addr => std_logic_vector(mergedDelay_waddr_27),
              wr_en => mergedDelay_wrenb_27,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_27),
              rd_dout => mergedDelay_regout_27
              );

  u_ShiftRegisterRAM_27 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_28),
              wr_addr => std_logic_vector(mergedDelay_waddr_28),
              wr_en => mergedDelay_wrenb_28,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_28),
              rd_dout => mergedDelay_regout_28
              );

  u_ShiftRegisterRAM_28 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_29),
              wr_addr => std_logic_vector(mergedDelay_waddr_29),
              wr_en => mergedDelay_wrenb_29,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_29),
              rd_dout => mergedDelay_regout_29
              );

  u_ShiftRegisterRAM_29 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_30),
              wr_addr => std_logic_vector(mergedDelay_waddr_30),
              wr_en => mergedDelay_wrenb_30,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_30),
              rd_dout => mergedDelay_regout_30
              );

  u_ShiftRegisterRAM_30 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_31),
              wr_addr => std_logic_vector(mergedDelay_waddr_31),
              wr_en => mergedDelay_wrenb_31,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_31),
              rd_dout => mergedDelay_regout_31
              );

  u_ShiftRegisterRAM_31 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_32),
              wr_addr => std_logic_vector(mergedDelay_waddr_32),
              wr_en => mergedDelay_wrenb_32,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_32),
              rd_dout => mergedDelay_regout_32
              );

  u_ShiftRegisterRAM_32 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_33),
              wr_addr => std_logic_vector(mergedDelay_waddr_33),
              wr_en => mergedDelay_wrenb_33,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_33),
              rd_dout => mergedDelay_regout_33
              );

  u_ShiftRegisterRAM_33 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_34),
              wr_addr => std_logic_vector(mergedDelay_waddr_34),
              wr_en => mergedDelay_wrenb_34,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_34),
              rd_dout => mergedDelay_regout_34
              );

  u_ShiftRegisterRAM_34 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_35),
              wr_addr => std_logic_vector(mergedDelay_waddr_35),
              wr_en => mergedDelay_wrenb_35,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_35),
              rd_dout => mergedDelay_regout_35
              );

  u_ShiftRegisterRAM_35 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_36),
              wr_addr => std_logic_vector(mergedDelay_waddr_36),
              wr_en => mergedDelay_wrenb_36,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_36),
              rd_dout => mergedDelay_regout_36
              );

  u_ShiftRegisterRAM_36 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_37),
              wr_addr => std_logic_vector(mergedDelay_waddr_37),
              wr_en => mergedDelay_wrenb_37,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_37),
              rd_dout => mergedDelay_regout_37
              );

  u_ShiftRegisterRAM_37 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_38),
              wr_addr => std_logic_vector(mergedDelay_waddr_38),
              wr_en => mergedDelay_wrenb_38,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_38),
              rd_dout => mergedDelay_regout_38
              );

  u_ShiftRegisterRAM_38 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_39),
              wr_addr => std_logic_vector(mergedDelay_waddr_39),
              wr_en => mergedDelay_wrenb_39,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_39),
              rd_dout => mergedDelay_regout_39
              );

  u_ShiftRegisterRAM_39 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_40),
              wr_addr => std_logic_vector(mergedDelay_waddr_40),
              wr_en => mergedDelay_wrenb_40,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_40),
              rd_dout => mergedDelay_regout_40
              );

  u_ShiftRegisterRAM_40 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_41),
              wr_addr => std_logic_vector(mergedDelay_waddr_41),
              wr_en => mergedDelay_wrenb_41,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_41),
              rd_dout => mergedDelay_regout_41
              );

  u_ShiftRegisterRAM_41 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 126
                 )
    PORT MAP( clk => clk,
              enb_1_18_0 => enb_1_18_0,
              wr_din => std_logic_vector(mergedDelay_regin_42),
              wr_addr => std_logic_vector(mergedDelay_waddr_42),
              wr_en => mergedDelay_wrenb_42,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_42),
              rd_dout => mergedDelay_regout_42
              );

  u_rRam3_ram : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 14
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(wr_data_5),
              wr_addr => std_logic_vector(slicedInput_347),
              wr_en => rRam3_ram_wr_en_sig_2,
              rd_addr => std_logic_vector(slicedInput_349),
              rd_dout => rd_data_4
              );

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  ctr_0_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      counterSig <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF counterSig >= to_unsigned(16#11#, 5) THEN 
          counterSig <= to_unsigned(16#00#, 5);
        ELSE 
          counterSig <= counterSig + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS ctr_0_17_process;


  rRam1_ram_wr_en_k_0_sig <= '1';

  rRam1_ram_wr_en_k_1_sig <= '0';

  rRam1_ram_wr_en_k_2_sig <= '0';

  rRam1_ram_wr_en_k_3_sig <= '0';

  rRam1_ram_wr_en_k_4_sig <= '0';

  rRam1_ram_wr_en_k_5_sig <= '0';

  rRam1_ram_wr_en_k_6_sig <= '0';

  rRam1_ram_wr_en_k_7_sig <= '0';

  rRam1_ram_wr_en_k_8_sig <= '0';

  rRam1_ram_wr_en_k_9_sig <= '0';

  rRam1_ram_wr_en_k_10_sig <= '0';

  rRam1_ram_wr_en_k_11_sig <= '0';

  rRam1_ram_wr_en_k_12_sig <= '0';

  rRam1_ram_wr_en_k_13_sig <= '0';

  rRam1_ram_wr_en_k_14_sig <= '0';

  rRam1_ram_wr_en_k_15_sig <= '0';

  rRam1_ram_wr_en_k_16_sig <= '0';

  data_in_0_unsigned <= unsigned(data_in_0);

  data_in_1_signed <= signed(data_in_1);

  data_in_2_unsigned <= unsigned(data_in_2);

  rRam1_ram_wr_en_k_17_sig <= '0';

  ----------------------
  -- 
  ---------------------- write BRAM
  in_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_0_pipe_reg <= (OTHERS => to_unsigned(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        in_0_pipe_reg(0) <= data_in_0_unsigned;
        in_0_pipe_reg(1) <= in_0_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;

  data_in_0_1 <= in_0_pipe_reg(1);

  in_1_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_1_pipe_reg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        in_1_pipe_reg(0) <= data_in_1_signed;
        in_1_pipe_reg(1) <= in_1_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;

  data_in_1_1 <= in_1_pipe_reg(1);

  in_2_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_2_pipe_reg <= (OTHERS => to_unsigned(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        in_2_pipe_reg(0) <= data_in_2_unsigned;
        in_2_pipe_reg(1) <= in_2_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;

  data_in_2_1 <= in_2_pipe_reg(1);

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp4
  ctr <= to_unsigned(16#01#, 8);

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp4
  tmp <= ctr_1 + to_unsigned(16#01#, 8);

  ---------------------- ctr counter
  
  tmp_1 <= '1' WHEN ctr_1 = to_unsigned(16#C8#, 8) ELSE
      '0';

  
  tmp_2 <= tmp WHEN tmp_1 = '0' ELSE
      ctr;

  ----------------------
  -- 
  ---------------------- read BRAM
  -- 
  ----------------------
  -- 
  ----------------------
  -- 
  ----------------------
  -- 
  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt
  ctr_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ctr_1 <= to_unsigned(16#01#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        ctr_1 <= tmp_2;
      END IF;
    END IF;
  END PROCESS ctr_reg_process;


  p278tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_3 <= p278tmp_sub_cast - 1;

  p280tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_4 <= p280tmp_sub_cast - 1;

  mergedInput <= rRam1_ram_wr_en_k_0_sig & rRam1_ram_wr_en_k_1_sig & rRam1_ram_wr_en_k_2_sig & rRam1_ram_wr_en_k_3_sig & rRam1_ram_wr_en_k_4_sig & rRam1_ram_wr_en_k_5_sig & rRam1_ram_wr_en_k_6_sig & rRam1_ram_wr_en_k_7_sig & rRam1_ram_wr_en_k_8_sig & rRam1_ram_wr_en_k_9_sig & rRam1_ram_wr_en_k_10_sig & rRam1_ram_wr_en_k_11_sig & rRam1_ram_wr_en_k_12_sig & rRam1_ram_wr_en_k_13_sig & rRam1_ram_wr_en_k_14_sig & rRam1_ram_wr_en_k_15_sig & rRam1_ram_wr_en_k_16_sig & rRam1_ram_wr_en_k_17_sig & data_in_0_1 & unsigned(data_in_1_1) & data_in_2_1 & unsigned(tmp_3) & unsigned(tmp_4);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin <= to_unsigned(0, 124);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin <= mergedInput;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_waddr <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr <= mergedDelay_waddr + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_process;


  mergedDelay_wrenb <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_raddr <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr <= mergedDelay_raddr + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_process;


  mergedDelay_regout_unsigned <= unsigned(mergedDelay_regout);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput <= to_unsigned(0, 124);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput <= mergedDelay_regout_unsigned;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_process;


  slicedInput <= mergedOutput(105 DOWNTO 92);

  writeData_1 <= slicedInput;

  wr_data(0) <= writeData_1;
  wr_data(1) <= writeData_1;
  wr_data(2) <= writeData_1;
  wr_data(3) <= writeData_1;
  wr_data(4) <= writeData_1;
  wr_data(5) <= writeData_1;
  wr_data(6) <= writeData_1;
  wr_data(7) <= writeData_1;
  wr_data(8) <= writeData_1;
  wr_data(9) <= writeData_1;
  wr_data(10) <= writeData_1;
  wr_data(11) <= writeData_1;
  wr_data(12) <= writeData_1;
  wr_data(13) <= writeData_1;
  wr_data(14) <= writeData_1;
  wr_data(15) <= writeData_1;
  wr_data(16) <= writeData_1;
  wr_data(17) <= writeData_1;

  wr_data_overclock18 <= wr_data;

  ratechange_splitcomp_out0 <= wr_data_overclock18(0);

  ratechange_splitcomp_out1 <= wr_data_overclock18(1);

  ratechange_splitcomp_out2 <= wr_data_overclock18(2);

  ratechange_splitcomp_out3 <= wr_data_overclock18(3);

  ratechange_splitcomp_out4 <= wr_data_overclock18(4);

  ratechange_splitcomp_out5 <= wr_data_overclock18(5);

  ratechange_splitcomp_out6 <= wr_data_overclock18(6);

  ratechange_splitcomp_out7 <= wr_data_overclock18(7);

  ratechange_splitcomp_out8 <= wr_data_overclock18(8);

  ratechange_splitcomp_out9 <= wr_data_overclock18(9);

  ratechange_splitcomp_out10 <= wr_data_overclock18(10);

  ratechange_splitcomp_out11 <= wr_data_overclock18(11);

  ratechange_splitcomp_out12 <= wr_data_overclock18(12);

  ratechange_splitcomp_out13 <= wr_data_overclock18(13);

  ratechange_splitcomp_out14 <= wr_data_overclock18(14);

  ratechange_splitcomp_out15 <= wr_data_overclock18(15);

  ratechange_splitcomp_out16 <= wr_data_overclock18(16);

  ratechange_splitcomp_out17 <= wr_data_overclock18(17);

  slicedInput_1 <= mergedOutput(63 DOWNTO 32);

  tmp_5 <= signed(slicedInput_1);

  indexLogic_fixptsig <= unsigned(tmp_5(7 DOWNTO 0));

  wr_addr(0) <= indexLogic_fixptsig;
  wr_addr(1) <= indexLogic_fixptsig;
  wr_addr(2) <= indexLogic_fixptsig;
  wr_addr(3) <= indexLogic_fixptsig;
  wr_addr(4) <= indexLogic_fixptsig;
  wr_addr(5) <= indexLogic_fixptsig;
  wr_addr(6) <= indexLogic_fixptsig;
  wr_addr(7) <= indexLogic_fixptsig;
  wr_addr(8) <= indexLogic_fixptsig;
  wr_addr(9) <= indexLogic_fixptsig;
  wr_addr(10) <= indexLogic_fixptsig;
  wr_addr(11) <= indexLogic_fixptsig;
  wr_addr(12) <= indexLogic_fixptsig;
  wr_addr(13) <= indexLogic_fixptsig;
  wr_addr(14) <= indexLogic_fixptsig;
  wr_addr(15) <= indexLogic_fixptsig;
  wr_addr(16) <= indexLogic_fixptsig;
  wr_addr(17) <= indexLogic_fixptsig;

  wr_addr_overclock18 <= wr_addr;

  ratechange_splitcomp_out0_1 <= wr_addr_overclock18(0);

  ratechange_splitcomp_out1_1 <= wr_addr_overclock18(1);

  ratechange_splitcomp_out2_1 <= wr_addr_overclock18(2);

  ratechange_splitcomp_out3_1 <= wr_addr_overclock18(3);

  ratechange_splitcomp_out4_1 <= wr_addr_overclock18(4);

  ratechange_splitcomp_out5_1 <= wr_addr_overclock18(5);

  ratechange_splitcomp_out6_1 <= wr_addr_overclock18(6);

  ratechange_splitcomp_out7_1 <= wr_addr_overclock18(7);

  ratechange_splitcomp_out8_1 <= wr_addr_overclock18(8);

  ratechange_splitcomp_out9_1 <= wr_addr_overclock18(9);

  ratechange_splitcomp_out10_1 <= wr_addr_overclock18(10);

  ratechange_splitcomp_out11_1 <= wr_addr_overclock18(11);

  ratechange_splitcomp_out12_1 <= wr_addr_overclock18(12);

  ratechange_splitcomp_out13_1 <= wr_addr_overclock18(13);

  ratechange_splitcomp_out14_1 <= wr_addr_overclock18(14);

  ratechange_splitcomp_out15_1 <= wr_addr_overclock18(15);

  ratechange_splitcomp_out16_1 <= wr_addr_overclock18(16);

  ratechange_splitcomp_out17_1 <= wr_addr_overclock18(17);

  
  wr_addr_1 <= ratechange_splitcomp_out0_1 WHEN counterSig = to_unsigned(16#00#, 5) ELSE
      ratechange_splitcomp_out1_1 WHEN counterSig = to_unsigned(16#01#, 5) ELSE
      ratechange_splitcomp_out2_1 WHEN counterSig = to_unsigned(16#02#, 5) ELSE
      ratechange_splitcomp_out3_1 WHEN counterSig = to_unsigned(16#03#, 5) ELSE
      ratechange_splitcomp_out4_1 WHEN counterSig = to_unsigned(16#04#, 5) ELSE
      ratechange_splitcomp_out5_1 WHEN counterSig = to_unsigned(16#05#, 5) ELSE
      ratechange_splitcomp_out6_1 WHEN counterSig = to_unsigned(16#06#, 5) ELSE
      ratechange_splitcomp_out7_1 WHEN counterSig = to_unsigned(16#07#, 5) ELSE
      ratechange_splitcomp_out8_1 WHEN counterSig = to_unsigned(16#08#, 5) ELSE
      ratechange_splitcomp_out9_1 WHEN counterSig = to_unsigned(16#09#, 5) ELSE
      ratechange_splitcomp_out10_1 WHEN counterSig = to_unsigned(16#0A#, 5) ELSE
      ratechange_splitcomp_out11_1 WHEN counterSig = to_unsigned(16#0B#, 5) ELSE
      ratechange_splitcomp_out12_1 WHEN counterSig = to_unsigned(16#0C#, 5) ELSE
      ratechange_splitcomp_out13_1 WHEN counterSig = to_unsigned(16#0D#, 5) ELSE
      ratechange_splitcomp_out14_1 WHEN counterSig = to_unsigned(16#0E#, 5) ELSE
      ratechange_splitcomp_out15_1 WHEN counterSig = to_unsigned(16#0F#, 5) ELSE
      ratechange_splitcomp_out16_1 WHEN counterSig = to_unsigned(16#10#, 5) ELSE
      ratechange_splitcomp_out17_1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp119
  c <= resize(ctr_1, 9) - to_unsigned(16#007#, 9);

  
  tmp_6 <= '1' WHEN c < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp116
  c_1 <= resize(ctr_1, 9) - to_unsigned(16#008#, 9);

  
  tmp_7 <= '1' WHEN c_1 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp113
  c_2 <= resize(ctr_1, 9) + to_unsigned(16#001#, 9);

  
  tmp_8 <= '1' WHEN c_2 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp110
  c_3 <= resize(ctr_1, 9) + to_unsigned(16#002#, 9);

  
  tmp_9 <= '1' WHEN c_3 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp119
  maxval <= to_unsigned(16#001#, 9);

  
  tmp_10 <= c WHEN tmp_6 = '0' ELSE
      maxval;

  p389tmp_sub_cast <= signed(resize(tmp_10, 32));
  tmp_11 <= p389tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp116
  maxval_1 <= to_unsigned(16#001#, 9);

  
  tmp_12 <= c_1 WHEN tmp_7 = '0' ELSE
      maxval_1;

  p395tmp_sub_cast <= signed(resize(tmp_12, 32));
  tmp_13 <= p395tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp113
  minval <= to_unsigned(16#0C8#, 9);

  
  tmp_14 <= c_2 WHEN tmp_8 = '0' ELSE
      minval;

  p401tmp_sub_cast <= signed(resize(tmp_14, 32));
  tmp_15 <= p401tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp110
  minval_1 <= to_unsigned(16#0C8#, 9);

  
  tmp_16 <= c_3 WHEN tmp_9 = '0' ELSE
      minval_1;

  p407tmp_sub_cast <= signed(resize(tmp_16, 32));
  tmp_17 <= p407tmp_sub_cast - 1;

  mergedInput_1 <= unsigned(tmp_11) & unsigned(tmp_13) & unsigned(tmp_15) & unsigned(tmp_17);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_1 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_1 <= mergedInput_1;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_1_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_1 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_1 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_waddr_1 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_1 <= mergedDelay_waddr_1 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_1_process;


  mergedDelay_wrenb_1 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_1 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_1 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_raddr_1 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_1 <= mergedDelay_raddr_1 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_1_process;


  mergedDelay_regout_unsigned_1 <= unsigned(mergedDelay_regout_1);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_1 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_1 <= mergedDelay_regout_unsigned_1;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_1_process;


  slicedInput_2 <= mergedOutput_1(95 DOWNTO 64);

  tmp_18 <= signed(slicedInput_2);

  indexLogic_fixptsig_1 <= unsigned(tmp_18(7 DOWNTO 0));

  slicedInput_3 <= mergedOutput_1(127 DOWNTO 96);

  tmp_19 <= signed(slicedInput_3);

  indexLogic_fixptsig_2 <= unsigned(tmp_19(7 DOWNTO 0));

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp131
  c_4 <= resize(ctr_1, 9) - to_unsigned(16#003#, 9);

  
  tmp_20 <= '1' WHEN c_4 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp128
  c_5 <= resize(ctr_1, 9) - to_unsigned(16#004#, 9);

  
  tmp_21 <= '1' WHEN c_5 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp125
  c_6 <= resize(ctr_1, 9) - to_unsigned(16#005#, 9);

  
  tmp_22 <= '1' WHEN c_6 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp122
  c_7 <= resize(ctr_1, 9) - to_unsigned(16#006#, 9);

  
  tmp_23 <= '1' WHEN c_7 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp131
  maxval_2 <= to_unsigned(16#001#, 9);

  
  tmp_24 <= c_4 WHEN tmp_20 = '0' ELSE
      maxval_2;

  p365tmp_sub_cast <= signed(resize(tmp_24, 32));
  tmp_25 <= p365tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp128
  maxval_3 <= to_unsigned(16#001#, 9);

  
  tmp_26 <= c_5 WHEN tmp_21 = '0' ELSE
      maxval_3;

  p371tmp_sub_cast <= signed(resize(tmp_26, 32));
  tmp_27 <= p371tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp125
  maxval_4 <= to_unsigned(16#001#, 9);

  
  tmp_28 <= c_6 WHEN tmp_22 = '0' ELSE
      maxval_4;

  p377tmp_sub_cast <= signed(resize(tmp_28, 32));
  tmp_29 <= p377tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp122
  maxval_5 <= to_unsigned(16#001#, 9);

  
  tmp_30 <= c_7 WHEN tmp_23 = '0' ELSE
      maxval_5;

  p383tmp_sub_cast <= signed(resize(tmp_30, 32));
  tmp_31 <= p383tmp_sub_cast - 1;

  mergedInput_2 <= unsigned(tmp_25) & unsigned(tmp_27) & unsigned(tmp_29) & unsigned(tmp_31);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_2 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_2 <= mergedInput_2;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_2_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_2 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_2 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_waddr_2 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_2 <= mergedDelay_waddr_2 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_2_process;


  mergedDelay_wrenb_2 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_2 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_2 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_raddr_2 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_2 <= mergedDelay_raddr_2 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_2_process;


  mergedDelay_regout_unsigned_2 <= unsigned(mergedDelay_regout_2);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_2 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_2 <= mergedDelay_regout_unsigned_2;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_2_process;


  slicedInput_4 <= mergedOutput_2(63 DOWNTO 32);

  tmp_32 <= signed(slicedInput_4);

  indexLogic_fixptsig_3 <= unsigned(tmp_32(7 DOWNTO 0));

  slicedInput_5 <= mergedOutput_2(31 DOWNTO 0);

  tmp_33 <= signed(slicedInput_5);

  indexLogic_fixptsig_4 <= unsigned(tmp_33(7 DOWNTO 0));

  slicedInput_6 <= mergedOutput_2(95 DOWNTO 64);

  tmp_34 <= signed(slicedInput_6);

  indexLogic_fixptsig_5 <= unsigned(tmp_34(7 DOWNTO 0));

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp143
  c_8 <= resize(ctr_1, 9) + to_unsigned(16#007#, 9);

  
  tmp_35 <= '1' WHEN c_8 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp140
  c_9 <= resize(ctr_1, 9) + to_unsigned(16#008#, 9);

  
  tmp_36 <= '1' WHEN c_9 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp137
  c_10 <= resize(ctr_1, 9) - to_unsigned(16#001#, 9);

  
  tmp_37 <= '1' WHEN c_10 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp134
  c_11 <= resize(ctr_1, 9) - to_unsigned(16#002#, 9);

  
  tmp_38 <= '1' WHEN c_11 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp143
  minval_2 <= to_unsigned(16#0C8#, 9);

  
  tmp_39 <= c_8 WHEN tmp_35 = '0' ELSE
      minval_2;

  p341tmp_sub_cast <= signed(resize(tmp_39, 32));
  tmp_40 <= p341tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp140
  minval_3 <= to_unsigned(16#0C8#, 9);

  
  tmp_41 <= c_9 WHEN tmp_36 = '0' ELSE
      minval_3;

  p347tmp_sub_cast <= signed(resize(tmp_41, 32));
  tmp_42 <= p347tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp137
  maxval_6 <= to_unsigned(16#001#, 9);

  
  tmp_43 <= c_10 WHEN tmp_37 = '0' ELSE
      maxval_6;

  p353tmp_sub_cast <= signed(resize(tmp_43, 32));
  tmp_44 <= p353tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp134
  maxval_7 <= to_unsigned(16#001#, 9);

  
  tmp_45 <= c_11 WHEN tmp_38 = '0' ELSE
      maxval_7;

  p359tmp_sub_cast <= signed(resize(tmp_45, 32));
  tmp_46 <= p359tmp_sub_cast - 1;

  mergedInput_3 <= unsigned(tmp_40) & unsigned(tmp_42) & unsigned(tmp_44) & unsigned(tmp_46);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_3 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_3 <= mergedInput_3;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_3_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_3 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_3 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_waddr_3 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_3 <= mergedDelay_waddr_3 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_3_process;


  mergedDelay_wrenb_3 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_3 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_3 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_raddr_3 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_3 <= mergedDelay_raddr_3 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_3_process;


  mergedDelay_regout_unsigned_3 <= unsigned(mergedDelay_regout_3);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_3 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_3 <= mergedDelay_regout_unsigned_3;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_3_process;


  slicedInput_7 <= mergedOutput_3(31 DOWNTO 0);

  tmp_47 <= signed(slicedInput_7);

  indexLogic_fixptsig_6 <= unsigned(tmp_47(7 DOWNTO 0));

  slicedInput_8 <= mergedOutput_2(127 DOWNTO 96);

  tmp_48 <= signed(slicedInput_8);

  indexLogic_fixptsig_7 <= unsigned(tmp_48(7 DOWNTO 0));

  slicedInput_9 <= mergedOutput_3(63 DOWNTO 32);

  tmp_49 <= signed(slicedInput_9);

  indexLogic_fixptsig_8 <= unsigned(tmp_49(7 DOWNTO 0));

  slicedInput_10 <= mergedOutput_3(95 DOWNTO 64);

  tmp_50 <= signed(slicedInput_10);

  indexLogic_fixptsig_9 <= unsigned(tmp_50(7 DOWNTO 0));

  slicedInput_11 <= mergedOutput_3(127 DOWNTO 96);

  tmp_51 <= signed(slicedInput_11);

  indexLogic_fixptsig_10 <= unsigned(tmp_51(7 DOWNTO 0));

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp155
  c_12 <= resize(ctr_1, 9) + to_unsigned(16#003#, 9);

  
  tmp_52 <= '1' WHEN c_12 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp152
  c_13 <= resize(ctr_1, 9) + to_unsigned(16#004#, 9);

  
  tmp_53 <= '1' WHEN c_13 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp149
  c_14 <= resize(ctr_1, 9) + to_unsigned(16#005#, 9);

  
  tmp_54 <= '1' WHEN c_14 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp146
  c_15 <= resize(ctr_1, 9) + to_unsigned(16#006#, 9);

  
  tmp_55 <= '1' WHEN c_15 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp155
  minval_4 <= to_unsigned(16#0C8#, 9);

  
  tmp_56 <= c_12 WHEN tmp_52 = '0' ELSE
      minval_4;

  p317tmp_sub_cast <= signed(resize(tmp_56, 32));
  tmp_57 <= p317tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp152
  minval_5 <= to_unsigned(16#0C8#, 9);

  
  tmp_58 <= c_13 WHEN tmp_53 = '0' ELSE
      minval_5;

  p323tmp_sub_cast <= signed(resize(tmp_58, 32));
  tmp_59 <= p323tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp149
  minval_6 <= to_unsigned(16#0C8#, 9);

  
  tmp_60 <= c_14 WHEN tmp_54 = '0' ELSE
      minval_6;

  p329tmp_sub_cast <= signed(resize(tmp_60, 32));
  tmp_61 <= p329tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp146
  minval_7 <= to_unsigned(16#0C8#, 9);

  
  tmp_62 <= c_15 WHEN tmp_55 = '0' ELSE
      minval_7;

  p335tmp_sub_cast <= signed(resize(tmp_62, 32));
  tmp_63 <= p335tmp_sub_cast - 1;

  mergedInput_4 <= unsigned(tmp_57) & unsigned(tmp_59) & unsigned(tmp_61) & unsigned(tmp_63);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_4 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_4 <= mergedInput_4;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_4_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_4 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_4 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_waddr_4 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_4 <= mergedDelay_waddr_4 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_4_process;


  mergedDelay_wrenb_4 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_4 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_4 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_raddr_4 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_4 <= mergedDelay_raddr_4 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_4_process;


  mergedDelay_regout_unsigned_4 <= unsigned(mergedDelay_regout_4);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_4 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_4 <= mergedDelay_regout_unsigned_4;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_4_process;


  slicedInput_12 <= mergedOutput_4(63 DOWNTO 32);

  tmp_64 <= signed(slicedInput_12);

  indexLogic_fixptsig_11 <= unsigned(tmp_64(7 DOWNTO 0));

  slicedInput_13 <= mergedOutput_4(127 DOWNTO 96);

  tmp_65 <= signed(slicedInput_13);

  indexLogic_fixptsig_12 <= unsigned(tmp_65(7 DOWNTO 0));

  slicedInput_14 <= mergedOutput_4(31 DOWNTO 0);

  tmp_66 <= signed(slicedInput_14);

  indexLogic_fixptsig_13 <= unsigned(tmp_66(7 DOWNTO 0));

  slicedInput_15 <= mergedOutput_4(95 DOWNTO 64);

  tmp_67 <= signed(slicedInput_15);

  indexLogic_fixptsig_14 <= unsigned(tmp_67(7 DOWNTO 0));

  rRam3_ram_wr_en_k_0_sig <= '1';

  rRam3_ram_wr_en_k_1_sig <= '0';

  rRam3_ram_wr_en_k_2_sig <= '0';

  rRam3_ram_wr_en_k_3_sig <= '0';

  rRam3_ram_wr_en_k_4_sig <= '0';

  rRam3_ram_wr_en_k_5_sig <= '0';

  rRam3_ram_wr_en_k_6_sig <= '0';

  rRam3_ram_wr_en_k_7_sig <= '0';

  rRam3_ram_wr_en_k_8_sig <= '0';

  rRam3_ram_wr_en_k_9_sig <= '0';

  rRam3_ram_wr_en_k_10_sig <= '0';

  rRam3_ram_wr_en_k_11_sig <= '0';

  rRam3_ram_wr_en_k_12_sig <= '0';

  rRam3_ram_wr_en_k_13_sig <= '0';

  rRam3_ram_wr_en_k_14_sig <= '0';

  rRam3_ram_wr_en_k_15_sig <= '0';

  rRam3_ram_wr_en_k_16_sig <= '0';

  rRam3_ram_wr_en_k_17_sig <= '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp161
  c_16 <= resize(ctr_1, 9) + to_unsigned(16#001#, 9);

  
  tmp_68 <= '1' WHEN c_16 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp158
  c_17 <= resize(ctr_1, 9) + to_unsigned(16#002#, 9);

  
  tmp_69 <= '1' WHEN c_17 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  p290tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_70 <= p290tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp161
  minval_8 <= to_unsigned(16#0C8#, 9);

  
  tmp_71 <= c_16 WHEN tmp_68 = '0' ELSE
      minval_8;

  p305tmp_sub_cast <= signed(resize(tmp_71, 32));
  tmp_72 <= p305tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp158
  minval_9 <= to_unsigned(16#0C8#, 9);

  
  tmp_73 <= c_17 WHEN tmp_69 = '0' ELSE
      minval_9;

  p311tmp_sub_cast <= signed(resize(tmp_73, 32));
  tmp_74 <= p311tmp_sub_cast - 1;

  mergedInput_5 <= rRam3_ram_wr_en_k_0_sig & rRam3_ram_wr_en_k_1_sig & rRam3_ram_wr_en_k_2_sig & rRam3_ram_wr_en_k_3_sig & rRam3_ram_wr_en_k_4_sig & rRam3_ram_wr_en_k_5_sig & rRam3_ram_wr_en_k_6_sig & rRam3_ram_wr_en_k_7_sig & rRam3_ram_wr_en_k_8_sig & rRam3_ram_wr_en_k_9_sig & rRam3_ram_wr_en_k_10_sig & rRam3_ram_wr_en_k_11_sig & rRam3_ram_wr_en_k_12_sig & rRam3_ram_wr_en_k_13_sig & rRam3_ram_wr_en_k_14_sig & rRam3_ram_wr_en_k_15_sig & rRam3_ram_wr_en_k_16_sig & rRam3_ram_wr_en_k_17_sig & unsigned(tmp_70) & unsigned(tmp_72) & unsigned(tmp_74);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_5 <= to_unsigned(0, 114);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_5 <= mergedInput_5;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_5_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_5 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_5 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_waddr_5 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_5 <= mergedDelay_waddr_5 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_5_process;


  mergedDelay_wrenb_5 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_5 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_5 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_raddr_5 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_5 <= mergedDelay_raddr_5 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_5_process;


  mergedDelay_regout_unsigned_5 <= unsigned(mergedDelay_regout_5);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_5 <= to_unsigned(0, 114);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_5 <= mergedDelay_regout_unsigned_5;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_5_process;


  slicedInput_16 <= mergedOutput_5(31 DOWNTO 0);

  tmp_75 <= signed(slicedInput_16);

  indexLogic_fixptsig_15 <= unsigned(tmp_75(7 DOWNTO 0));

  slicedInput_17 <= mergedOutput_5(63 DOWNTO 32);

  tmp_76 <= signed(slicedInput_17);

  indexLogic_fixptsig_16 <= unsigned(tmp_76(7 DOWNTO 0));

  rRam2_ram_wr_en_k_0_sig <= '1';

  rRam2_ram_wr_en_k_1_sig <= '0';

  rRam2_ram_wr_en_k_2_sig <= '0';

  rRam2_ram_wr_en_k_3_sig <= '0';

  rRam2_ram_wr_en_k_4_sig <= '0';

  rRam2_ram_wr_en_k_5_sig <= '0';

  rRam2_ram_wr_en_k_6_sig <= '0';

  rRam2_ram_wr_en_k_7_sig <= '0';

  rRam2_ram_wr_en_k_8_sig <= '0';

  rRam2_ram_wr_en_k_9_sig <= '0';

  rRam2_ram_wr_en_k_10_sig <= '0';

  rRam2_ram_wr_en_k_11_sig <= '0';

  rRam2_ram_wr_en_k_12_sig <= '0';

  rRam2_ram_wr_en_k_13_sig <= '0';

  rRam2_ram_wr_en_k_14_sig <= '0';

  rRam2_ram_wr_en_k_15_sig <= '0';

  rRam2_ram_wr_en_k_16_sig <= '0';

  rRam2_ram_wr_en_k_17_sig <= '0';

  p282tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_77 <= p282tmp_sub_cast - 1;

  p284tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_78 <= p284tmp_sub_cast - 1;

  p287tmp_sub_cast <= signed(resize(ctr_1, 32));
  tmp_79 <= p287tmp_sub_cast - 1;

  mergedInput_6 <= rRam2_ram_wr_en_k_0_sig & rRam2_ram_wr_en_k_1_sig & rRam2_ram_wr_en_k_2_sig & rRam2_ram_wr_en_k_3_sig & rRam2_ram_wr_en_k_4_sig & rRam2_ram_wr_en_k_5_sig & rRam2_ram_wr_en_k_6_sig & rRam2_ram_wr_en_k_7_sig & rRam2_ram_wr_en_k_8_sig & rRam2_ram_wr_en_k_9_sig & rRam2_ram_wr_en_k_10_sig & rRam2_ram_wr_en_k_11_sig & rRam2_ram_wr_en_k_12_sig & rRam2_ram_wr_en_k_13_sig & rRam2_ram_wr_en_k_14_sig & rRam2_ram_wr_en_k_15_sig & rRam2_ram_wr_en_k_16_sig & rRam2_ram_wr_en_k_17_sig & unsigned(tmp_77) & unsigned(tmp_78) & unsigned(tmp_79);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_6 <= to_unsigned(0, 114);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_6 <= mergedInput_6;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_6_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_6 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_6 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_waddr_6 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_6 <= mergedDelay_waddr_6 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_6_process;


  mergedDelay_wrenb_6 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_6 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_6 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_raddr_6 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_6 <= mergedDelay_raddr_6 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_6_process;


  mergedDelay_regout_unsigned_6 <= unsigned(mergedDelay_regout_6);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_6 <= to_unsigned(0, 114);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_6 <= mergedDelay_regout_unsigned_6;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_6_process;


  slicedInput_18 <= mergedOutput_6(63 DOWNTO 32);

  tmp_80 <= signed(slicedInput_18);

  indexLogic_fixptsig_17 <= unsigned(tmp_80(7 DOWNTO 0));

  rd_addr(0) <= indexLogic_fixptsig_1;
  rd_addr(1) <= indexLogic_fixptsig_1;
  rd_addr(2) <= indexLogic_fixptsig_2;
  rd_addr(3) <= indexLogic_fixptsig_3;
  rd_addr(4) <= indexLogic_fixptsig_4;
  rd_addr(5) <= indexLogic_fixptsig_5;
  rd_addr(6) <= indexLogic_fixptsig_6;
  rd_addr(7) <= indexLogic_fixptsig_7;
  rd_addr(8) <= indexLogic_fixptsig_8;
  rd_addr(9) <= indexLogic_fixptsig_9;
  rd_addr(10) <= indexLogic_fixptsig_10;
  rd_addr(11) <= indexLogic_fixptsig_11;
  rd_addr(12) <= indexLogic_fixptsig_12;
  rd_addr(13) <= indexLogic_fixptsig_13;
  rd_addr(14) <= indexLogic_fixptsig_14;
  rd_addr(15) <= indexLogic_fixptsig_15;
  rd_addr(16) <= indexLogic_fixptsig_16;
  rd_addr(17) <= indexLogic_fixptsig_17;

  rd_addr_overclock18 <= rd_addr;

  ratechange_splitcomp_out0_2 <= rd_addr_overclock18(0);

  ratechange_splitcomp_out1_2 <= rd_addr_overclock18(1);

  ratechange_splitcomp_out2_2 <= rd_addr_overclock18(2);

  ratechange_splitcomp_out3_2 <= rd_addr_overclock18(3);

  ratechange_splitcomp_out4_2 <= rd_addr_overclock18(4);

  ratechange_splitcomp_out5_2 <= rd_addr_overclock18(5);

  ratechange_splitcomp_out6_2 <= rd_addr_overclock18(6);

  ratechange_splitcomp_out7_2 <= rd_addr_overclock18(7);

  ratechange_splitcomp_out8_2 <= rd_addr_overclock18(8);

  ratechange_splitcomp_out9_2 <= rd_addr_overclock18(9);

  ratechange_splitcomp_out10_2 <= rd_addr_overclock18(10);

  ratechange_splitcomp_out11_2 <= rd_addr_overclock18(11);

  ratechange_splitcomp_out12_2 <= rd_addr_overclock18(12);

  ratechange_splitcomp_out13_2 <= rd_addr_overclock18(13);

  ratechange_splitcomp_out14_2 <= rd_addr_overclock18(14);

  ratechange_splitcomp_out15_2 <= rd_addr_overclock18(15);

  ratechange_splitcomp_out16_2 <= rd_addr_overclock18(16);

  ratechange_splitcomp_out17_2 <= rd_addr_overclock18(17);

  
  rd_addr_1 <= ratechange_splitcomp_out0_2 WHEN counterSig = to_unsigned(16#00#, 5) ELSE
      ratechange_splitcomp_out1_2 WHEN counterSig = to_unsigned(16#01#, 5) ELSE
      ratechange_splitcomp_out2_2 WHEN counterSig = to_unsigned(16#02#, 5) ELSE
      ratechange_splitcomp_out3_2 WHEN counterSig = to_unsigned(16#03#, 5) ELSE
      ratechange_splitcomp_out4_2 WHEN counterSig = to_unsigned(16#04#, 5) ELSE
      ratechange_splitcomp_out5_2 WHEN counterSig = to_unsigned(16#05#, 5) ELSE
      ratechange_splitcomp_out6_2 WHEN counterSig = to_unsigned(16#06#, 5) ELSE
      ratechange_splitcomp_out7_2 WHEN counterSig = to_unsigned(16#07#, 5) ELSE
      ratechange_splitcomp_out8_2 WHEN counterSig = to_unsigned(16#08#, 5) ELSE
      ratechange_splitcomp_out9_2 WHEN counterSig = to_unsigned(16#09#, 5) ELSE
      ratechange_splitcomp_out10_2 WHEN counterSig = to_unsigned(16#0A#, 5) ELSE
      ratechange_splitcomp_out11_2 WHEN counterSig = to_unsigned(16#0B#, 5) ELSE
      ratechange_splitcomp_out12_2 WHEN counterSig = to_unsigned(16#0C#, 5) ELSE
      ratechange_splitcomp_out13_2 WHEN counterSig = to_unsigned(16#0D#, 5) ELSE
      ratechange_splitcomp_out14_2 WHEN counterSig = to_unsigned(16#0E#, 5) ELSE
      ratechange_splitcomp_out15_2 WHEN counterSig = to_unsigned(16#0F#, 5) ELSE
      ratechange_splitcomp_out16_2 WHEN counterSig = to_unsigned(16#10#, 5) ELSE
      ratechange_splitcomp_out17_2;

  slicedInput_19 <= mergedOutput(123);

  
  delayOut0 <= '1' WHEN slicedInput_19 /= '0' ELSE
      '0';

  slicedInput_20 <= mergedOutput(122);

  
  delayOut1 <= '1' WHEN slicedInput_20 /= '0' ELSE
      '0';

  slicedInput_21 <= mergedOutput(121);

  
  delayOut2 <= '1' WHEN slicedInput_21 /= '0' ELSE
      '0';

  slicedInput_22 <= mergedOutput(120);

  
  delayOut3 <= '1' WHEN slicedInput_22 /= '0' ELSE
      '0';

  slicedInput_23 <= mergedOutput(119);

  
  delayOut4 <= '1' WHEN slicedInput_23 /= '0' ELSE
      '0';

  slicedInput_24 <= mergedOutput(118);

  
  delayOut5 <= '1' WHEN slicedInput_24 /= '0' ELSE
      '0';

  slicedInput_25 <= mergedOutput(117);

  
  delayOut6 <= '1' WHEN slicedInput_25 /= '0' ELSE
      '0';

  slicedInput_26 <= mergedOutput(116);

  
  delayOut7 <= '1' WHEN slicedInput_26 /= '0' ELSE
      '0';

  slicedInput_27 <= mergedOutput(115);

  
  delayOut8 <= '1' WHEN slicedInput_27 /= '0' ELSE
      '0';

  slicedInput_28 <= mergedOutput(114);

  
  delayOut9 <= '1' WHEN slicedInput_28 /= '0' ELSE
      '0';

  slicedInput_29 <= mergedOutput(113);

  
  delayOut10 <= '1' WHEN slicedInput_29 /= '0' ELSE
      '0';

  slicedInput_30 <= mergedOutput(112);

  
  delayOut11 <= '1' WHEN slicedInput_30 /= '0' ELSE
      '0';

  slicedInput_31 <= mergedOutput(111);

  
  delayOut12 <= '1' WHEN slicedInput_31 /= '0' ELSE
      '0';

  slicedInput_32 <= mergedOutput(110);

  
  delayOut13 <= '1' WHEN slicedInput_32 /= '0' ELSE
      '0';

  slicedInput_33 <= mergedOutput(109);

  
  delayOut14 <= '1' WHEN slicedInput_33 /= '0' ELSE
      '0';

  slicedInput_34 <= mergedOutput(108);

  
  delayOut15 <= '1' WHEN slicedInput_34 /= '0' ELSE
      '0';

  slicedInput_35 <= mergedOutput(107);

  
  delayOut16 <= '1' WHEN slicedInput_35 /= '0' ELSE
      '0';

  slicedInput_36 <= mergedOutput(106);

  
  delayOut17 <= '1' WHEN slicedInput_36 /= '0' ELSE
      '0';

  rRam1_ram_wr_en_sig(0) <= delayOut0;
  rRam1_ram_wr_en_sig(1) <= delayOut1;
  rRam1_ram_wr_en_sig(2) <= delayOut2;
  rRam1_ram_wr_en_sig(3) <= delayOut3;
  rRam1_ram_wr_en_sig(4) <= delayOut4;
  rRam1_ram_wr_en_sig(5) <= delayOut5;
  rRam1_ram_wr_en_sig(6) <= delayOut6;
  rRam1_ram_wr_en_sig(7) <= delayOut7;
  rRam1_ram_wr_en_sig(8) <= delayOut8;
  rRam1_ram_wr_en_sig(9) <= delayOut9;
  rRam1_ram_wr_en_sig(10) <= delayOut10;
  rRam1_ram_wr_en_sig(11) <= delayOut11;
  rRam1_ram_wr_en_sig(12) <= delayOut12;
  rRam1_ram_wr_en_sig(13) <= delayOut13;
  rRam1_ram_wr_en_sig(14) <= delayOut14;
  rRam1_ram_wr_en_sig(15) <= delayOut15;
  rRam1_ram_wr_en_sig(16) <= delayOut16;
  rRam1_ram_wr_en_sig(17) <= delayOut17;

  rRam1_ram_wr_en_sig_overclock18 <= rRam1_ram_wr_en_sig;

  ratechange_splitcomp_out0_3 <= rRam1_ram_wr_en_sig_overclock18(0);

  ratechange_splitcomp_out1_3 <= rRam1_ram_wr_en_sig_overclock18(1);

  ratechange_splitcomp_out2_3 <= rRam1_ram_wr_en_sig_overclock18(2);

  ratechange_splitcomp_out3_3 <= rRam1_ram_wr_en_sig_overclock18(3);

  ratechange_splitcomp_out4_3 <= rRam1_ram_wr_en_sig_overclock18(4);

  ratechange_splitcomp_out5_3 <= rRam1_ram_wr_en_sig_overclock18(5);

  ratechange_splitcomp_out6_3 <= rRam1_ram_wr_en_sig_overclock18(6);

  ratechange_splitcomp_out7_3 <= rRam1_ram_wr_en_sig_overclock18(7);

  ratechange_splitcomp_out8_3 <= rRam1_ram_wr_en_sig_overclock18(8);

  ratechange_splitcomp_out9_3 <= rRam1_ram_wr_en_sig_overclock18(9);

  ratechange_splitcomp_out10_3 <= rRam1_ram_wr_en_sig_overclock18(10);

  ratechange_splitcomp_out11_3 <= rRam1_ram_wr_en_sig_overclock18(11);

  ratechange_splitcomp_out12_3 <= rRam1_ram_wr_en_sig_overclock18(12);

  ratechange_splitcomp_out13_3 <= rRam1_ram_wr_en_sig_overclock18(13);

  ratechange_splitcomp_out14_3 <= rRam1_ram_wr_en_sig_overclock18(14);

  ratechange_splitcomp_out15_3 <= rRam1_ram_wr_en_sig_overclock18(15);

  ratechange_splitcomp_out16_3 <= rRam1_ram_wr_en_sig_overclock18(16);

  ratechange_splitcomp_out17_3 <= rRam1_ram_wr_en_sig_overclock18(17);

  
  rRam1_ram_wr_en_sig_1 <= ratechange_splitcomp_out0_3 WHEN counterSig = to_unsigned(16#00#, 5) ELSE
      ratechange_splitcomp_out1_3 WHEN counterSig = to_unsigned(16#01#, 5) ELSE
      ratechange_splitcomp_out2_3 WHEN counterSig = to_unsigned(16#02#, 5) ELSE
      ratechange_splitcomp_out3_3 WHEN counterSig = to_unsigned(16#03#, 5) ELSE
      ratechange_splitcomp_out4_3 WHEN counterSig = to_unsigned(16#04#, 5) ELSE
      ratechange_splitcomp_out5_3 WHEN counterSig = to_unsigned(16#05#, 5) ELSE
      ratechange_splitcomp_out6_3 WHEN counterSig = to_unsigned(16#06#, 5) ELSE
      ratechange_splitcomp_out7_3 WHEN counterSig = to_unsigned(16#07#, 5) ELSE
      ratechange_splitcomp_out8_3 WHEN counterSig = to_unsigned(16#08#, 5) ELSE
      ratechange_splitcomp_out9_3 WHEN counterSig = to_unsigned(16#09#, 5) ELSE
      ratechange_splitcomp_out10_3 WHEN counterSig = to_unsigned(16#0A#, 5) ELSE
      ratechange_splitcomp_out11_3 WHEN counterSig = to_unsigned(16#0B#, 5) ELSE
      ratechange_splitcomp_out12_3 WHEN counterSig = to_unsigned(16#0C#, 5) ELSE
      ratechange_splitcomp_out13_3 WHEN counterSig = to_unsigned(16#0D#, 5) ELSE
      ratechange_splitcomp_out14_3 WHEN counterSig = to_unsigned(16#0E#, 5) ELSE
      ratechange_splitcomp_out15_3 WHEN counterSig = to_unsigned(16#0F#, 5) ELSE
      ratechange_splitcomp_out16_3 WHEN counterSig = to_unsigned(16#10#, 5) ELSE
      ratechange_splitcomp_out17_3;

  slicedInput_37 <= mergedOutput(31 DOWNTO 0);

  tmp_81 <= signed(slicedInput_37);

  indexLogic_fixptsig_18 <= unsigned(tmp_81(7 DOWNTO 0));

  wr_addr_2(0) <= indexLogic_fixptsig_18;
  wr_addr_2(1) <= indexLogic_fixptsig_18;
  wr_addr_2(2) <= indexLogic_fixptsig_18;
  wr_addr_2(3) <= indexLogic_fixptsig_18;
  wr_addr_2(4) <= indexLogic_fixptsig_18;
  wr_addr_2(5) <= indexLogic_fixptsig_18;
  wr_addr_2(6) <= indexLogic_fixptsig_18;
  wr_addr_2(7) <= indexLogic_fixptsig_18;
  wr_addr_2(8) <= indexLogic_fixptsig_18;
  wr_addr_2(9) <= indexLogic_fixptsig_18;
  wr_addr_2(10) <= indexLogic_fixptsig_18;
  wr_addr_2(11) <= indexLogic_fixptsig_18;
  wr_addr_2(12) <= indexLogic_fixptsig_18;
  wr_addr_2(13) <= indexLogic_fixptsig_18;
  wr_addr_2(14) <= indexLogic_fixptsig_18;
  wr_addr_2(15) <= indexLogic_fixptsig_18;
  wr_addr_2(16) <= indexLogic_fixptsig_18;
  wr_addr_2(17) <= indexLogic_fixptsig_18;

  wr_addr_overclock18_1 <= wr_addr_2;

  ratechange_splitcomp_out0_4 <= wr_addr_overclock18_1(0);

  ratechange_splitcomp_out1_4 <= wr_addr_overclock18_1(1);

  ratechange_splitcomp_out2_4 <= wr_addr_overclock18_1(2);

  ratechange_splitcomp_out3_4 <= wr_addr_overclock18_1(3);

  ratechange_splitcomp_out4_4 <= wr_addr_overclock18_1(4);

  ratechange_splitcomp_out5_4 <= wr_addr_overclock18_1(5);

  ratechange_splitcomp_out6_4 <= wr_addr_overclock18_1(6);

  ratechange_splitcomp_out7_4 <= wr_addr_overclock18_1(7);

  ratechange_splitcomp_out8_4 <= wr_addr_overclock18_1(8);

  ratechange_splitcomp_out9_4 <= wr_addr_overclock18_1(9);

  ratechange_splitcomp_out10_4 <= wr_addr_overclock18_1(10);

  ratechange_splitcomp_out11_4 <= wr_addr_overclock18_1(11);

  ratechange_splitcomp_out12_4 <= wr_addr_overclock18_1(12);

  ratechange_splitcomp_out13_4 <= wr_addr_overclock18_1(13);

  ratechange_splitcomp_out14_4 <= wr_addr_overclock18_1(14);

  ratechange_splitcomp_out15_4 <= wr_addr_overclock18_1(15);

  ratechange_splitcomp_out16_4 <= wr_addr_overclock18_1(16);

  ratechange_splitcomp_out17_4 <= wr_addr_overclock18_1(17);

  
  wr_addr_3 <= ratechange_splitcomp_out0_4 WHEN counterSig = to_unsigned(16#00#, 5) ELSE
      ratechange_splitcomp_out1_4 WHEN counterSig = to_unsigned(16#01#, 5) ELSE
      ratechange_splitcomp_out2_4 WHEN counterSig = to_unsigned(16#02#, 5) ELSE
      ratechange_splitcomp_out3_4 WHEN counterSig = to_unsigned(16#03#, 5) ELSE
      ratechange_splitcomp_out4_4 WHEN counterSig = to_unsigned(16#04#, 5) ELSE
      ratechange_splitcomp_out5_4 WHEN counterSig = to_unsigned(16#05#, 5) ELSE
      ratechange_splitcomp_out6_4 WHEN counterSig = to_unsigned(16#06#, 5) ELSE
      ratechange_splitcomp_out7_4 WHEN counterSig = to_unsigned(16#07#, 5) ELSE
      ratechange_splitcomp_out8_4 WHEN counterSig = to_unsigned(16#08#, 5) ELSE
      ratechange_splitcomp_out9_4 WHEN counterSig = to_unsigned(16#09#, 5) ELSE
      ratechange_splitcomp_out10_4 WHEN counterSig = to_unsigned(16#0A#, 5) ELSE
      ratechange_splitcomp_out11_4 WHEN counterSig = to_unsigned(16#0B#, 5) ELSE
      ratechange_splitcomp_out12_4 WHEN counterSig = to_unsigned(16#0C#, 5) ELSE
      ratechange_splitcomp_out13_4 WHEN counterSig = to_unsigned(16#0D#, 5) ELSE
      ratechange_splitcomp_out14_4 WHEN counterSig = to_unsigned(16#0E#, 5) ELSE
      ratechange_splitcomp_out15_4 WHEN counterSig = to_unsigned(16#0F#, 5) ELSE
      ratechange_splitcomp_out16_4 WHEN counterSig = to_unsigned(16#10#, 5) ELSE
      ratechange_splitcomp_out17_4;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp71
  c_18 <= resize(ctr_1, 9) - to_unsigned(16#007#, 9);

  
  tmp_82 <= '1' WHEN c_18 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp68
  c_19 <= resize(ctr_1, 9) - to_unsigned(16#008#, 9);

  
  tmp_83 <= '1' WHEN c_19 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp65
  c_20 <= resize(ctr_1, 9) + to_unsigned(16#001#, 9);

  
  tmp_84 <= '1' WHEN c_20 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp62
  c_21 <= resize(ctr_1, 9) + to_unsigned(16#002#, 9);

  
  tmp_85 <= '1' WHEN c_21 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp71
  maxval_8 <= to_unsigned(16#001#, 9);

  
  tmp_86 <= c_18 WHEN tmp_82 = '0' ELSE
      maxval_8;

  p485tmp_sub_cast <= signed(resize(tmp_86, 32));
  tmp_87 <= p485tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp68
  maxval_9 <= to_unsigned(16#001#, 9);

  
  tmp_88 <= c_19 WHEN tmp_83 = '0' ELSE
      maxval_9;

  p491tmp_sub_cast <= signed(resize(tmp_88, 32));
  tmp_89 <= p491tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp65
  minval_10 <= to_unsigned(16#0C8#, 9);

  
  tmp_90 <= c_20 WHEN tmp_84 = '0' ELSE
      minval_10;

  p497tmp_sub_cast <= signed(resize(tmp_90, 32));
  tmp_91 <= p497tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp62
  minval_11 <= to_unsigned(16#0C8#, 9);

  
  tmp_92 <= c_21 WHEN tmp_85 = '0' ELSE
      minval_11;

  p503tmp_sub_cast <= signed(resize(tmp_92, 32));
  tmp_93 <= p503tmp_sub_cast - 1;

  mergedInput_7 <= unsigned(tmp_87) & unsigned(tmp_89) & unsigned(tmp_91) & unsigned(tmp_93);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_7 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_7 <= mergedInput_7;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_7_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_7 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_7 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_waddr_7 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_7 <= mergedDelay_waddr_7 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_7_process;


  mergedDelay_wrenb_7 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_7 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_7 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_raddr_7 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_7 <= mergedDelay_raddr_7 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_7_process;


  mergedDelay_regout_unsigned_7 <= unsigned(mergedDelay_regout_7);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_7 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_7 <= mergedDelay_regout_unsigned_7;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_7_process;


  slicedInput_38 <= mergedOutput_7(95 DOWNTO 64);

  tmp_94 <= signed(slicedInput_38);

  indexLogic_fixptsig_19 <= unsigned(tmp_94(7 DOWNTO 0));

  slicedInput_39 <= mergedOutput_7(127 DOWNTO 96);

  tmp_95 <= signed(slicedInput_39);

  indexLogic_fixptsig_20 <= unsigned(tmp_95(7 DOWNTO 0));

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp83
  c_22 <= resize(ctr_1, 9) - to_unsigned(16#003#, 9);

  
  tmp_96 <= '1' WHEN c_22 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp80
  c_23 <= resize(ctr_1, 9) - to_unsigned(16#004#, 9);

  
  tmp_97 <= '1' WHEN c_23 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp77
  c_24 <= resize(ctr_1, 9) - to_unsigned(16#005#, 9);

  
  tmp_98 <= '1' WHEN c_24 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp74
  c_25 <= resize(ctr_1, 9) - to_unsigned(16#006#, 9);

  
  tmp_99 <= '1' WHEN c_25 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp83
  maxval_10 <= to_unsigned(16#001#, 9);

  
  tmp_100 <= c_22 WHEN tmp_96 = '0' ELSE
      maxval_10;

  p461tmp_sub_cast <= signed(resize(tmp_100, 32));
  tmp_101 <= p461tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp80
  maxval_11 <= to_unsigned(16#001#, 9);

  
  tmp_102 <= c_23 WHEN tmp_97 = '0' ELSE
      maxval_11;

  p467tmp_sub_cast <= signed(resize(tmp_102, 32));
  tmp_103 <= p467tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp77
  maxval_12 <= to_unsigned(16#001#, 9);

  
  tmp_104 <= c_24 WHEN tmp_98 = '0' ELSE
      maxval_12;

  p473tmp_sub_cast <= signed(resize(tmp_104, 32));
  tmp_105 <= p473tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp74
  maxval_13 <= to_unsigned(16#001#, 9);

  
  tmp_106 <= c_25 WHEN tmp_99 = '0' ELSE
      maxval_13;

  p479tmp_sub_cast <= signed(resize(tmp_106, 32));
  tmp_107 <= p479tmp_sub_cast - 1;

  mergedInput_8 <= unsigned(tmp_101) & unsigned(tmp_103) & unsigned(tmp_105) & unsigned(tmp_107);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_8 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_8 <= mergedInput_8;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_8_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_8 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_8 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_waddr_8 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_8 <= mergedDelay_waddr_8 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_8_process;


  mergedDelay_wrenb_8 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_8 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_8 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_raddr_8 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_8 <= mergedDelay_raddr_8 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_8_process;


  mergedDelay_regout_unsigned_8 <= unsigned(mergedDelay_regout_8);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_8 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_8 <= mergedDelay_regout_unsigned_8;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_8_process;


  slicedInput_40 <= mergedOutput_8(31 DOWNTO 0);

  tmp_108 <= signed(slicedInput_40);

  indexLogic_fixptsig_21 <= unsigned(tmp_108(7 DOWNTO 0));

  slicedInput_41 <= mergedOutput_8(63 DOWNTO 32);

  tmp_109 <= signed(slicedInput_41);

  indexLogic_fixptsig_22 <= unsigned(tmp_109(7 DOWNTO 0));

  slicedInput_42 <= mergedOutput_8(95 DOWNTO 64);

  tmp_110 <= signed(slicedInput_42);

  indexLogic_fixptsig_23 <= unsigned(tmp_110(7 DOWNTO 0));

  slicedInput_43 <= mergedOutput_8(127 DOWNTO 96);

  tmp_111 <= signed(slicedInput_43);

  indexLogic_fixptsig_24 <= unsigned(tmp_111(7 DOWNTO 0));

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp95
  c_26 <= resize(ctr_1, 9) + to_unsigned(16#007#, 9);

  
  tmp_112 <= '1' WHEN c_26 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp92
  c_27 <= resize(ctr_1, 9) + to_unsigned(16#008#, 9);

  
  tmp_113 <= '1' WHEN c_27 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp89
  c_28 <= resize(ctr_1, 9) - to_unsigned(16#001#, 9);

  
  tmp_114 <= '1' WHEN c_28 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp86
  c_29 <= resize(ctr_1, 9) - to_unsigned(16#002#, 9);

  
  tmp_115 <= '1' WHEN c_29 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp95
  minval_12 <= to_unsigned(16#0C8#, 9);

  
  tmp_116 <= c_26 WHEN tmp_112 = '0' ELSE
      minval_12;

  p437tmp_sub_cast <= signed(resize(tmp_116, 32));
  tmp_117 <= p437tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp92
  minval_13 <= to_unsigned(16#0C8#, 9);

  
  tmp_118 <= c_27 WHEN tmp_113 = '0' ELSE
      minval_13;

  p443tmp_sub_cast <= signed(resize(tmp_118, 32));
  tmp_119 <= p443tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp89
  maxval_14 <= to_unsigned(16#001#, 9);

  
  tmp_120 <= c_28 WHEN tmp_114 = '0' ELSE
      maxval_14;

  p449tmp_sub_cast <= signed(resize(tmp_120, 32));
  tmp_121 <= p449tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp86
  maxval_15 <= to_unsigned(16#001#, 9);

  
  tmp_122 <= c_29 WHEN tmp_115 = '0' ELSE
      maxval_15;

  p455tmp_sub_cast <= signed(resize(tmp_122, 32));
  tmp_123 <= p455tmp_sub_cast - 1;

  mergedInput_9 <= unsigned(tmp_117) & unsigned(tmp_119) & unsigned(tmp_121) & unsigned(tmp_123);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_9 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_9 <= mergedInput_9;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_9_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_9 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_9 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_waddr_9 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_9 <= mergedDelay_waddr_9 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_9_process;


  mergedDelay_wrenb_9 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_9 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_9 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_raddr_9 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_9 <= mergedDelay_raddr_9 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_9_process;


  mergedDelay_regout_unsigned_9 <= unsigned(mergedDelay_regout_9);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_9 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_9 <= mergedDelay_regout_unsigned_9;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_9_process;


  slicedInput_44 <= mergedOutput_9(95 DOWNTO 64);

  tmp_124 <= signed(slicedInput_44);

  indexLogic_fixptsig_25 <= unsigned(tmp_124(7 DOWNTO 0));

  slicedInput_45 <= mergedOutput_9(63 DOWNTO 32);

  tmp_125 <= signed(slicedInput_45);

  indexLogic_fixptsig_26 <= unsigned(tmp_125(7 DOWNTO 0));

  slicedInput_46 <= mergedOutput_9(127 DOWNTO 96);

  tmp_126 <= signed(slicedInput_46);

  indexLogic_fixptsig_27 <= unsigned(tmp_126(7 DOWNTO 0));

  slicedInput_47 <= mergedOutput_9(31 DOWNTO 0);

  tmp_127 <= signed(slicedInput_47);

  indexLogic_fixptsig_28 <= unsigned(tmp_127(7 DOWNTO 0));

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp107
  c_30 <= resize(ctr_1, 9) + to_unsigned(16#003#, 9);

  
  tmp_128 <= '1' WHEN c_30 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp104
  c_31 <= resize(ctr_1, 9) + to_unsigned(16#004#, 9);

  
  tmp_129 <= '1' WHEN c_31 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp101
  c_32 <= resize(ctr_1, 9) + to_unsigned(16#005#, 9);

  
  tmp_130 <= '1' WHEN c_32 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp98
  c_33 <= resize(ctr_1, 9) + to_unsigned(16#006#, 9);

  
  tmp_131 <= '1' WHEN c_33 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp107
  minval_14 <= to_unsigned(16#0C8#, 9);

  
  tmp_132 <= c_30 WHEN tmp_128 = '0' ELSE
      minval_14;

  p413tmp_sub_cast <= signed(resize(tmp_132, 32));
  tmp_133 <= p413tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp104
  minval_15 <= to_unsigned(16#0C8#, 9);

  
  tmp_134 <= c_31 WHEN tmp_129 = '0' ELSE
      minval_15;

  p419tmp_sub_cast <= signed(resize(tmp_134, 32));
  tmp_135 <= p419tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp101
  minval_16 <= to_unsigned(16#0C8#, 9);

  
  tmp_136 <= c_32 WHEN tmp_130 = '0' ELSE
      minval_16;

  p425tmp_sub_cast <= signed(resize(tmp_136, 32));
  tmp_137 <= p425tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp98
  minval_17 <= to_unsigned(16#0C8#, 9);

  
  tmp_138 <= c_33 WHEN tmp_131 = '0' ELSE
      minval_17;

  p431tmp_sub_cast <= signed(resize(tmp_138, 32));
  tmp_139 <= p431tmp_sub_cast - 1;

  mergedInput_10 <= unsigned(tmp_133) & unsigned(tmp_135) & unsigned(tmp_137) & unsigned(tmp_139);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_10 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_10 <= mergedInput_10;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_10_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_10 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_10 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_waddr_10 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_10 <= mergedDelay_waddr_10 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_10_process;


  mergedDelay_wrenb_10 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_10 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_10 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_raddr_10 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_10 <= mergedDelay_raddr_10 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_10_process;


  mergedDelay_regout_unsigned_10 <= unsigned(mergedDelay_regout_10);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_10 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_10 <= mergedDelay_regout_unsigned_10;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_10_process;


  slicedInput_48 <= mergedOutput_10(95 DOWNTO 64);

  tmp_140 <= signed(slicedInput_48);

  indexLogic_fixptsig_29 <= unsigned(tmp_140(7 DOWNTO 0));

  slicedInput_49 <= mergedOutput_10(63 DOWNTO 32);

  tmp_141 <= signed(slicedInput_49);

  indexLogic_fixptsig_30 <= unsigned(tmp_141(7 DOWNTO 0));

  slicedInput_50 <= mergedOutput_10(31 DOWNTO 0);

  tmp_142 <= signed(slicedInput_50);

  indexLogic_fixptsig_31 <= unsigned(tmp_142(7 DOWNTO 0));

  slicedInput_51 <= mergedOutput_10(127 DOWNTO 96);

  tmp_143 <= signed(slicedInput_51);

  indexLogic_fixptsig_32 <= unsigned(tmp_143(7 DOWNTO 0));

  slicedInput_52 <= mergedOutput_1(31 DOWNTO 0);

  tmp_144 <= signed(slicedInput_52);

  indexLogic_fixptsig_33 <= unsigned(tmp_144(7 DOWNTO 0));

  slicedInput_53 <= mergedOutput_1(63 DOWNTO 32);

  tmp_145 <= signed(slicedInput_53);

  indexLogic_fixptsig_34 <= unsigned(tmp_145(7 DOWNTO 0));

  slicedInput_54 <= mergedOutput_6(31 DOWNTO 0);

  tmp_146 <= signed(slicedInput_54);

  indexLogic_fixptsig_35 <= unsigned(tmp_146(7 DOWNTO 0));

  rd_addr_2(0) <= indexLogic_fixptsig_19;
  rd_addr_2(1) <= indexLogic_fixptsig_19;
  rd_addr_2(2) <= indexLogic_fixptsig_20;
  rd_addr_2(3) <= indexLogic_fixptsig_21;
  rd_addr_2(4) <= indexLogic_fixptsig_22;
  rd_addr_2(5) <= indexLogic_fixptsig_23;
  rd_addr_2(6) <= indexLogic_fixptsig_24;
  rd_addr_2(7) <= indexLogic_fixptsig_25;
  rd_addr_2(8) <= indexLogic_fixptsig_26;
  rd_addr_2(9) <= indexLogic_fixptsig_27;
  rd_addr_2(10) <= indexLogic_fixptsig_28;
  rd_addr_2(11) <= indexLogic_fixptsig_29;
  rd_addr_2(12) <= indexLogic_fixptsig_30;
  rd_addr_2(13) <= indexLogic_fixptsig_31;
  rd_addr_2(14) <= indexLogic_fixptsig_32;
  rd_addr_2(15) <= indexLogic_fixptsig_33;
  rd_addr_2(16) <= indexLogic_fixptsig_34;
  rd_addr_2(17) <= indexLogic_fixptsig_35;

  rd_addr_overclock18_1 <= rd_addr_2;

  ratechange_splitcomp_out0_5 <= rd_addr_overclock18_1(0);

  ratechange_splitcomp_out1_5 <= rd_addr_overclock18_1(1);

  ratechange_splitcomp_out2_5 <= rd_addr_overclock18_1(2);

  ratechange_splitcomp_out3_5 <= rd_addr_overclock18_1(3);

  ratechange_splitcomp_out4_5 <= rd_addr_overclock18_1(4);

  ratechange_splitcomp_out5_5 <= rd_addr_overclock18_1(5);

  ratechange_splitcomp_out6_5 <= rd_addr_overclock18_1(6);

  ratechange_splitcomp_out7_5 <= rd_addr_overclock18_1(7);

  ratechange_splitcomp_out8_5 <= rd_addr_overclock18_1(8);

  ratechange_splitcomp_out9_5 <= rd_addr_overclock18_1(9);

  ratechange_splitcomp_out10_5 <= rd_addr_overclock18_1(10);

  ratechange_splitcomp_out11_5 <= rd_addr_overclock18_1(11);

  ratechange_splitcomp_out12_5 <= rd_addr_overclock18_1(12);

  ratechange_splitcomp_out13_5 <= rd_addr_overclock18_1(13);

  ratechange_splitcomp_out14_5 <= rd_addr_overclock18_1(14);

  ratechange_splitcomp_out15_5 <= rd_addr_overclock18_1(15);

  ratechange_splitcomp_out16_5 <= rd_addr_overclock18_1(16);

  ratechange_splitcomp_out17_5 <= rd_addr_overclock18_1(17);

  
  rd_addr_3 <= ratechange_splitcomp_out0_5 WHEN counterSig = to_unsigned(16#00#, 5) ELSE
      ratechange_splitcomp_out1_5 WHEN counterSig = to_unsigned(16#01#, 5) ELSE
      ratechange_splitcomp_out2_5 WHEN counterSig = to_unsigned(16#02#, 5) ELSE
      ratechange_splitcomp_out3_5 WHEN counterSig = to_unsigned(16#03#, 5) ELSE
      ratechange_splitcomp_out4_5 WHEN counterSig = to_unsigned(16#04#, 5) ELSE
      ratechange_splitcomp_out5_5 WHEN counterSig = to_unsigned(16#05#, 5) ELSE
      ratechange_splitcomp_out6_5 WHEN counterSig = to_unsigned(16#06#, 5) ELSE
      ratechange_splitcomp_out7_5 WHEN counterSig = to_unsigned(16#07#, 5) ELSE
      ratechange_splitcomp_out8_5 WHEN counterSig = to_unsigned(16#08#, 5) ELSE
      ratechange_splitcomp_out9_5 WHEN counterSig = to_unsigned(16#09#, 5) ELSE
      ratechange_splitcomp_out10_5 WHEN counterSig = to_unsigned(16#0A#, 5) ELSE
      ratechange_splitcomp_out11_5 WHEN counterSig = to_unsigned(16#0B#, 5) ELSE
      ratechange_splitcomp_out12_5 WHEN counterSig = to_unsigned(16#0C#, 5) ELSE
      ratechange_splitcomp_out13_5 WHEN counterSig = to_unsigned(16#0D#, 5) ELSE
      ratechange_splitcomp_out14_5 WHEN counterSig = to_unsigned(16#0E#, 5) ELSE
      ratechange_splitcomp_out15_5 WHEN counterSig = to_unsigned(16#0F#, 5) ELSE
      ratechange_splitcomp_out16_5 WHEN counterSig = to_unsigned(16#10#, 5) ELSE
      ratechange_splitcomp_out17_5;

  slicedInput_55 <= mergedOutput_6(113);

  
  delayOut0_1 <= '1' WHEN slicedInput_55 /= '0' ELSE
      '0';

  slicedInput_56 <= mergedOutput_6(112);

  
  delayOut1_1 <= '1' WHEN slicedInput_56 /= '0' ELSE
      '0';

  slicedInput_57 <= mergedOutput_6(111);

  
  delayOut2_1 <= '1' WHEN slicedInput_57 /= '0' ELSE
      '0';

  slicedInput_58 <= mergedOutput_6(110);

  
  delayOut3_1 <= '1' WHEN slicedInput_58 /= '0' ELSE
      '0';

  slicedInput_59 <= mergedOutput_6(109);

  
  delayOut4_1 <= '1' WHEN slicedInput_59 /= '0' ELSE
      '0';

  slicedInput_60 <= mergedOutput_6(108);

  
  delayOut5_1 <= '1' WHEN slicedInput_60 /= '0' ELSE
      '0';

  slicedInput_61 <= mergedOutput_6(107);

  
  delayOut6_1 <= '1' WHEN slicedInput_61 /= '0' ELSE
      '0';

  slicedInput_62 <= mergedOutput_6(106);

  
  delayOut7_1 <= '1' WHEN slicedInput_62 /= '0' ELSE
      '0';

  slicedInput_63 <= mergedOutput_6(105);

  
  delayOut8_1 <= '1' WHEN slicedInput_63 /= '0' ELSE
      '0';

  slicedInput_64 <= mergedOutput_6(104);

  
  delayOut9_1 <= '1' WHEN slicedInput_64 /= '0' ELSE
      '0';

  slicedInput_65 <= mergedOutput_6(103);

  
  delayOut10_1 <= '1' WHEN slicedInput_65 /= '0' ELSE
      '0';

  slicedInput_66 <= mergedOutput_6(102);

  
  delayOut11_1 <= '1' WHEN slicedInput_66 /= '0' ELSE
      '0';

  slicedInput_67 <= mergedOutput_6(101);

  
  delayOut12_1 <= '1' WHEN slicedInput_67 /= '0' ELSE
      '0';

  slicedInput_68 <= mergedOutput_6(100);

  
  delayOut13_1 <= '1' WHEN slicedInput_68 /= '0' ELSE
      '0';

  slicedInput_69 <= mergedOutput_6(99);

  
  delayOut14_1 <= '1' WHEN slicedInput_69 /= '0' ELSE
      '0';

  slicedInput_70 <= mergedOutput_6(98);

  
  delayOut15_1 <= '1' WHEN slicedInput_70 /= '0' ELSE
      '0';

  slicedInput_71 <= mergedOutput_6(97);

  
  delayOut16_1 <= '1' WHEN slicedInput_71 /= '0' ELSE
      '0';

  slicedInput_72 <= mergedOutput_6(96);

  
  delayOut17_1 <= '1' WHEN slicedInput_72 /= '0' ELSE
      '0';

  rRam2_ram_wr_en_sig(0) <= delayOut0_1;
  rRam2_ram_wr_en_sig(1) <= delayOut1_1;
  rRam2_ram_wr_en_sig(2) <= delayOut2_1;
  rRam2_ram_wr_en_sig(3) <= delayOut3_1;
  rRam2_ram_wr_en_sig(4) <= delayOut4_1;
  rRam2_ram_wr_en_sig(5) <= delayOut5_1;
  rRam2_ram_wr_en_sig(6) <= delayOut6_1;
  rRam2_ram_wr_en_sig(7) <= delayOut7_1;
  rRam2_ram_wr_en_sig(8) <= delayOut8_1;
  rRam2_ram_wr_en_sig(9) <= delayOut9_1;
  rRam2_ram_wr_en_sig(10) <= delayOut10_1;
  rRam2_ram_wr_en_sig(11) <= delayOut11_1;
  rRam2_ram_wr_en_sig(12) <= delayOut12_1;
  rRam2_ram_wr_en_sig(13) <= delayOut13_1;
  rRam2_ram_wr_en_sig(14) <= delayOut14_1;
  rRam2_ram_wr_en_sig(15) <= delayOut15_1;
  rRam2_ram_wr_en_sig(16) <= delayOut16_1;
  rRam2_ram_wr_en_sig(17) <= delayOut17_1;

  rRam2_ram_wr_en_sig_overclock18 <= rRam2_ram_wr_en_sig;

  ratechange_splitcomp_out0_6 <= rRam2_ram_wr_en_sig_overclock18(0);

  ratechange_splitcomp_out1_6 <= rRam2_ram_wr_en_sig_overclock18(1);

  ratechange_splitcomp_out2_6 <= rRam2_ram_wr_en_sig_overclock18(2);

  ratechange_splitcomp_out3_6 <= rRam2_ram_wr_en_sig_overclock18(3);

  ratechange_splitcomp_out4_6 <= rRam2_ram_wr_en_sig_overclock18(4);

  ratechange_splitcomp_out5_6 <= rRam2_ram_wr_en_sig_overclock18(5);

  ratechange_splitcomp_out6_6 <= rRam2_ram_wr_en_sig_overclock18(6);

  ratechange_splitcomp_out7_6 <= rRam2_ram_wr_en_sig_overclock18(7);

  ratechange_splitcomp_out8_6 <= rRam2_ram_wr_en_sig_overclock18(8);

  ratechange_splitcomp_out9_6 <= rRam2_ram_wr_en_sig_overclock18(9);

  ratechange_splitcomp_out10_6 <= rRam2_ram_wr_en_sig_overclock18(10);

  ratechange_splitcomp_out11_6 <= rRam2_ram_wr_en_sig_overclock18(11);

  ratechange_splitcomp_out12_6 <= rRam2_ram_wr_en_sig_overclock18(12);

  ratechange_splitcomp_out13_6 <= rRam2_ram_wr_en_sig_overclock18(13);

  ratechange_splitcomp_out14_6 <= rRam2_ram_wr_en_sig_overclock18(14);

  ratechange_splitcomp_out15_6 <= rRam2_ram_wr_en_sig_overclock18(15);

  ratechange_splitcomp_out16_6 <= rRam2_ram_wr_en_sig_overclock18(16);

  ratechange_splitcomp_out17_6 <= rRam2_ram_wr_en_sig_overclock18(17);

  
  rRam2_ram_wr_en_sig_1 <= ratechange_splitcomp_out0_6 WHEN counterSig = to_unsigned(16#00#, 5) ELSE
      ratechange_splitcomp_out1_6 WHEN counterSig = to_unsigned(16#01#, 5) ELSE
      ratechange_splitcomp_out2_6 WHEN counterSig = to_unsigned(16#02#, 5) ELSE
      ratechange_splitcomp_out3_6 WHEN counterSig = to_unsigned(16#03#, 5) ELSE
      ratechange_splitcomp_out4_6 WHEN counterSig = to_unsigned(16#04#, 5) ELSE
      ratechange_splitcomp_out5_6 WHEN counterSig = to_unsigned(16#05#, 5) ELSE
      ratechange_splitcomp_out6_6 WHEN counterSig = to_unsigned(16#06#, 5) ELSE
      ratechange_splitcomp_out7_6 WHEN counterSig = to_unsigned(16#07#, 5) ELSE
      ratechange_splitcomp_out8_6 WHEN counterSig = to_unsigned(16#08#, 5) ELSE
      ratechange_splitcomp_out9_6 WHEN counterSig = to_unsigned(16#09#, 5) ELSE
      ratechange_splitcomp_out10_6 WHEN counterSig = to_unsigned(16#0A#, 5) ELSE
      ratechange_splitcomp_out11_6 WHEN counterSig = to_unsigned(16#0B#, 5) ELSE
      ratechange_splitcomp_out12_6 WHEN counterSig = to_unsigned(16#0C#, 5) ELSE
      ratechange_splitcomp_out13_6 WHEN counterSig = to_unsigned(16#0D#, 5) ELSE
      ratechange_splitcomp_out14_6 WHEN counterSig = to_unsigned(16#0E#, 5) ELSE
      ratechange_splitcomp_out15_6 WHEN counterSig = to_unsigned(16#0F#, 5) ELSE
      ratechange_splitcomp_out16_6 WHEN counterSig = to_unsigned(16#10#, 5) ELSE
      ratechange_splitcomp_out17_6;

  slicedInput_73 <= mergedOutput_6(95 DOWNTO 64);

  tmp_147 <= signed(slicedInput_73);

  indexLogic_fixptsig_36 <= unsigned(tmp_147(7 DOWNTO 0));

  wr_addr_4(0) <= indexLogic_fixptsig_36;
  wr_addr_4(1) <= indexLogic_fixptsig_36;
  wr_addr_4(2) <= indexLogic_fixptsig_36;
  wr_addr_4(3) <= indexLogic_fixptsig_36;
  wr_addr_4(4) <= indexLogic_fixptsig_36;
  wr_addr_4(5) <= indexLogic_fixptsig_36;
  wr_addr_4(6) <= indexLogic_fixptsig_36;
  wr_addr_4(7) <= indexLogic_fixptsig_36;
  wr_addr_4(8) <= indexLogic_fixptsig_36;
  wr_addr_4(9) <= indexLogic_fixptsig_36;
  wr_addr_4(10) <= indexLogic_fixptsig_36;
  wr_addr_4(11) <= indexLogic_fixptsig_36;
  wr_addr_4(12) <= indexLogic_fixptsig_36;
  wr_addr_4(13) <= indexLogic_fixptsig_36;
  wr_addr_4(14) <= indexLogic_fixptsig_36;
  wr_addr_4(15) <= indexLogic_fixptsig_36;
  wr_addr_4(16) <= indexLogic_fixptsig_36;
  wr_addr_4(17) <= indexLogic_fixptsig_36;

  wr_addr_overclock18_2 <= wr_addr_4;

  ratechange_splitcomp_out0_7 <= wr_addr_overclock18_2(0);

  ratechange_splitcomp_out1_7 <= wr_addr_overclock18_2(1);

  ratechange_splitcomp_out2_7 <= wr_addr_overclock18_2(2);

  ratechange_splitcomp_out3_7 <= wr_addr_overclock18_2(3);

  ratechange_splitcomp_out4_7 <= wr_addr_overclock18_2(4);

  ratechange_splitcomp_out5_7 <= wr_addr_overclock18_2(5);

  ratechange_splitcomp_out6_7 <= wr_addr_overclock18_2(6);

  ratechange_splitcomp_out7_7 <= wr_addr_overclock18_2(7);

  ratechange_splitcomp_out8_7 <= wr_addr_overclock18_2(8);

  ratechange_splitcomp_out9_7 <= wr_addr_overclock18_2(9);

  ratechange_splitcomp_out10_7 <= wr_addr_overclock18_2(10);

  ratechange_splitcomp_out11_7 <= wr_addr_overclock18_2(11);

  ratechange_splitcomp_out12_7 <= wr_addr_overclock18_2(12);

  ratechange_splitcomp_out13_7 <= wr_addr_overclock18_2(13);

  ratechange_splitcomp_out14_7 <= wr_addr_overclock18_2(14);

  ratechange_splitcomp_out15_7 <= wr_addr_overclock18_2(15);

  ratechange_splitcomp_out16_7 <= wr_addr_overclock18_2(16);

  ratechange_splitcomp_out17_7 <= wr_addr_overclock18_2(17);

  
  wr_addr_5 <= ratechange_splitcomp_out0_7 WHEN counterSig = to_unsigned(16#00#, 5) ELSE
      ratechange_splitcomp_out1_7 WHEN counterSig = to_unsigned(16#01#, 5) ELSE
      ratechange_splitcomp_out2_7 WHEN counterSig = to_unsigned(16#02#, 5) ELSE
      ratechange_splitcomp_out3_7 WHEN counterSig = to_unsigned(16#03#, 5) ELSE
      ratechange_splitcomp_out4_7 WHEN counterSig = to_unsigned(16#04#, 5) ELSE
      ratechange_splitcomp_out5_7 WHEN counterSig = to_unsigned(16#05#, 5) ELSE
      ratechange_splitcomp_out6_7 WHEN counterSig = to_unsigned(16#06#, 5) ELSE
      ratechange_splitcomp_out7_7 WHEN counterSig = to_unsigned(16#07#, 5) ELSE
      ratechange_splitcomp_out8_7 WHEN counterSig = to_unsigned(16#08#, 5) ELSE
      ratechange_splitcomp_out9_7 WHEN counterSig = to_unsigned(16#09#, 5) ELSE
      ratechange_splitcomp_out10_7 WHEN counterSig = to_unsigned(16#0A#, 5) ELSE
      ratechange_splitcomp_out11_7 WHEN counterSig = to_unsigned(16#0B#, 5) ELSE
      ratechange_splitcomp_out12_7 WHEN counterSig = to_unsigned(16#0C#, 5) ELSE
      ratechange_splitcomp_out13_7 WHEN counterSig = to_unsigned(16#0D#, 5) ELSE
      ratechange_splitcomp_out14_7 WHEN counterSig = to_unsigned(16#0E#, 5) ELSE
      ratechange_splitcomp_out15_7 WHEN counterSig = to_unsigned(16#0F#, 5) ELSE
      ratechange_splitcomp_out16_7 WHEN counterSig = to_unsigned(16#10#, 5) ELSE
      ratechange_splitcomp_out17_7;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp59
  c_34 <= resize(ctr_1, 9) + to_unsigned(16#003#, 9);

  
  tmp_148 <= '1' WHEN c_34 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp56
  c_35 <= resize(ctr_1, 9) + to_unsigned(16#004#, 9);

  
  tmp_149 <= '1' WHEN c_35 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp53
  c_36 <= resize(ctr_1, 9) + to_unsigned(16#005#, 9);

  
  tmp_150 <= '1' WHEN c_36 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp50
  c_37 <= resize(ctr_1, 9) + to_unsigned(16#006#, 9);

  
  tmp_151 <= '1' WHEN c_37 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp59
  minval_18 <= to_unsigned(16#0C8#, 9);

  
  tmp_152 <= c_34 WHEN tmp_148 = '0' ELSE
      minval_18;

  p509tmp_sub_cast <= signed(resize(tmp_152, 32));
  tmp_153 <= p509tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp56
  minval_19 <= to_unsigned(16#0C8#, 9);

  
  tmp_154 <= c_35 WHEN tmp_149 = '0' ELSE
      minval_19;

  p515tmp_sub_cast <= signed(resize(tmp_154, 32));
  tmp_155 <= p515tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp53
  minval_20 <= to_unsigned(16#0C8#, 9);

  
  tmp_156 <= c_36 WHEN tmp_150 = '0' ELSE
      minval_20;

  p521tmp_sub_cast <= signed(resize(tmp_156, 32));
  tmp_157 <= p521tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp50
  minval_21 <= to_unsigned(16#0C8#, 9);

  
  tmp_158 <= c_37 WHEN tmp_151 = '0' ELSE
      minval_21;

  p527tmp_sub_cast <= signed(resize(tmp_158, 32));
  tmp_159 <= p527tmp_sub_cast - 1;

  mergedInput_11 <= unsigned(tmp_153) & unsigned(tmp_155) & unsigned(tmp_157) & unsigned(tmp_159);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_11 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_11 <= mergedInput_11;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_11_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_11 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_11 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_waddr_11 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_11 <= mergedDelay_waddr_11 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_11_process;


  mergedDelay_wrenb_11 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_11 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_11 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_raddr_11 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_11 <= mergedDelay_raddr_11 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_11_process;


  mergedDelay_regout_unsigned_11 <= unsigned(mergedDelay_regout_11);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_11 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_11 <= mergedDelay_regout_unsigned_11;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_11_process;


  slicedInput_74 <= mergedOutput_11(95 DOWNTO 64);

  tmp_160 <= signed(slicedInput_74);

  indexLogic_fixptsig_37 <= unsigned(tmp_160(7 DOWNTO 0));

  slicedInput_75 <= mergedOutput_11(127 DOWNTO 96);

  tmp_161 <= signed(slicedInput_75);

  indexLogic_fixptsig_38 <= unsigned(tmp_161(7 DOWNTO 0));

  slicedInput_76 <= mergedOutput_7(31 DOWNTO 0);

  tmp_162 <= signed(slicedInput_76);

  indexLogic_fixptsig_39 <= unsigned(tmp_162(7 DOWNTO 0));

  slicedInput_77 <= mergedOutput_7(63 DOWNTO 32);

  tmp_163 <= signed(slicedInput_77);

  indexLogic_fixptsig_40 <= unsigned(tmp_163(7 DOWNTO 0));

  slicedInput_78 <= mergedOutput_5(95 DOWNTO 64);

  tmp_164 <= signed(slicedInput_78);

  indexLogic_fixptsig_41 <= unsigned(tmp_164(7 DOWNTO 0));

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp23
  c_38 <= resize(ctr_1, 9) - to_unsigned(16#007#, 9);

  
  tmp_165 <= '1' WHEN c_38 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp20
  c_39 <= resize(ctr_1, 9) - to_unsigned(16#008#, 9);

  
  tmp_166 <= '1' WHEN c_39 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp23
  maxval_16 <= to_unsigned(16#001#, 9);

  
  tmp_167 <= c_38 WHEN tmp_165 = '0' ELSE
      maxval_16;

  p581tmp_sub_cast <= signed(resize(tmp_167, 32));
  tmp_168 <= p581tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp20
  maxval_17 <= to_unsigned(16#001#, 9);

  
  tmp_169 <= c_39 WHEN tmp_166 = '0' ELSE
      maxval_17;

  p587tmp_sub_cast <= signed(resize(tmp_169, 32));
  tmp_170 <= p587tmp_sub_cast - 1;

  mergedInput_12 <= unsigned(tmp_168) & unsigned(tmp_170);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_12 <= to_unsigned(0, 64);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_12 <= mergedInput_12;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_12_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_12 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_12 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_waddr_12 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_12 <= mergedDelay_waddr_12 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_12_process;


  mergedDelay_wrenb_12 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_12 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_12 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_raddr_12 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_12 <= mergedDelay_raddr_12 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_12_process;


  mergedDelay_regout_unsigned_12 <= unsigned(mergedDelay_regout_12);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_12 <= to_unsigned(0, 64);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_12 <= mergedDelay_regout_unsigned_12;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_12_process;


  slicedInput_79 <= mergedOutput_12(63 DOWNTO 32);

  tmp_171 <= signed(slicedInput_79);

  indexLogic_fixptsig_42 <= unsigned(tmp_171(7 DOWNTO 0));

  slicedInput_80 <= mergedOutput_12(31 DOWNTO 0);

  tmp_172 <= signed(slicedInput_80);

  indexLogic_fixptsig_43 <= unsigned(tmp_172(7 DOWNTO 0));

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp35
  c_40 <= resize(ctr_1, 9) - to_unsigned(16#003#, 9);

  
  tmp_173 <= '1' WHEN c_40 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp32
  c_41 <= resize(ctr_1, 9) - to_unsigned(16#004#, 9);

  
  tmp_174 <= '1' WHEN c_41 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp29
  c_42 <= resize(ctr_1, 9) - to_unsigned(16#005#, 9);

  
  tmp_175 <= '1' WHEN c_42 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp26
  c_43 <= resize(ctr_1, 9) - to_unsigned(16#006#, 9);

  
  tmp_176 <= '1' WHEN c_43 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp35
  maxval_18 <= to_unsigned(16#001#, 9);

  
  tmp_177 <= c_40 WHEN tmp_173 = '0' ELSE
      maxval_18;

  p557tmp_sub_cast <= signed(resize(tmp_177, 32));
  tmp_178 <= p557tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp32
  maxval_19 <= to_unsigned(16#001#, 9);

  
  tmp_179 <= c_41 WHEN tmp_174 = '0' ELSE
      maxval_19;

  p563tmp_sub_cast <= signed(resize(tmp_179, 32));
  tmp_180 <= p563tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp29
  maxval_20 <= to_unsigned(16#001#, 9);

  
  tmp_181 <= c_42 WHEN tmp_175 = '0' ELSE
      maxval_20;

  p569tmp_sub_cast <= signed(resize(tmp_181, 32));
  tmp_182 <= p569tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp26
  maxval_21 <= to_unsigned(16#001#, 9);

  
  tmp_183 <= c_43 WHEN tmp_176 = '0' ELSE
      maxval_21;

  p575tmp_sub_cast <= signed(resize(tmp_183, 32));
  tmp_184 <= p575tmp_sub_cast - 1;

  mergedInput_13 <= unsigned(tmp_178) & unsigned(tmp_180) & unsigned(tmp_182) & unsigned(tmp_184);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_13 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_13 <= mergedInput_13;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_13_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_13 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_13 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_waddr_13 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_13 <= mergedDelay_waddr_13 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_13_process;


  mergedDelay_wrenb_13 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_13 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_13 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_raddr_13 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_13 <= mergedDelay_raddr_13 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_13_process;


  mergedDelay_regout_unsigned_13 <= unsigned(mergedDelay_regout_13);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_13 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_13 <= mergedDelay_regout_unsigned_13;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_13_process;


  slicedInput_81 <= mergedOutput_13(31 DOWNTO 0);

  tmp_185 <= signed(slicedInput_81);

  indexLogic_fixptsig_44 <= unsigned(tmp_185(7 DOWNTO 0));

  slicedInput_82 <= mergedOutput_13(63 DOWNTO 32);

  tmp_186 <= signed(slicedInput_82);

  indexLogic_fixptsig_45 <= unsigned(tmp_186(7 DOWNTO 0));

  slicedInput_83 <= mergedOutput_13(95 DOWNTO 64);

  tmp_187 <= signed(slicedInput_83);

  indexLogic_fixptsig_46 <= unsigned(tmp_187(7 DOWNTO 0));

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp47
  c_44 <= resize(ctr_1, 9) + to_unsigned(16#007#, 9);

  
  tmp_188 <= '1' WHEN c_44 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp44
  c_45 <= resize(ctr_1, 9) + to_unsigned(16#008#, 9);

  
  tmp_189 <= '1' WHEN c_45 > to_unsigned(16#0C8#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp41
  c_46 <= resize(ctr_1, 9) - to_unsigned(16#001#, 9);

  
  tmp_190 <= '1' WHEN c_46 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_falseregionp38
  c_47 <= resize(ctr_1, 9) - to_unsigned(16#002#, 9);

  
  tmp_191 <= '1' WHEN c_47 < to_unsigned(16#001#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp47
  minval_22 <= to_unsigned(16#0C8#, 9);

  
  tmp_192 <= c_44 WHEN tmp_188 = '0' ELSE
      minval_22;

  p533tmp_sub_cast <= signed(resize(tmp_192, 32));
  tmp_193 <= p533tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp44
  minval_23 <= to_unsigned(16#0C8#, 9);

  
  tmp_194 <= c_45 WHEN tmp_189 = '0' ELSE
      minval_23;

  p539tmp_sub_cast <= signed(resize(tmp_194, 32));
  tmp_195 <= p539tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp41
  maxval_22 <= to_unsigned(16#001#, 9);

  
  tmp_196 <= c_46 WHEN tmp_190 = '0' ELSE
      maxval_22;

  p545tmp_sub_cast <= signed(resize(tmp_196, 32));
  tmp_197 <= p545tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: PolyExp_pipeline4_fixpt_trueregionp38
  maxval_23 <= to_unsigned(16#001#, 9);

  
  tmp_198 <= c_47 WHEN tmp_191 = '0' ELSE
      maxval_23;

  p551tmp_sub_cast <= signed(resize(tmp_198, 32));
  tmp_199 <= p551tmp_sub_cast - 1;

  mergedInput_14 <= unsigned(tmp_193) & unsigned(tmp_195) & unsigned(tmp_197) & unsigned(tmp_199);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_14 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_14 <= mergedInput_14;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_14_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_14 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_14 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_waddr_14 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_14 <= mergedDelay_waddr_14 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_14_process;


  mergedDelay_wrenb_14 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 14
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_14 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_14 >= to_unsigned(16#0E#, 5) THEN 
          mergedDelay_raddr_14 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_14 <= mergedDelay_raddr_14 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_14_process;


  mergedDelay_regout_unsigned_14 <= unsigned(mergedDelay_regout_14);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_14 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_14 <= mergedDelay_regout_unsigned_14;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_14_process;


  slicedInput_84 <= mergedOutput_14(95 DOWNTO 64);

  tmp_200 <= signed(slicedInput_84);

  indexLogic_fixptsig_47 <= unsigned(tmp_200(7 DOWNTO 0));

  slicedInput_85 <= mergedOutput_14(63 DOWNTO 32);

  tmp_201 <= signed(slicedInput_85);

  indexLogic_fixptsig_48 <= unsigned(tmp_201(7 DOWNTO 0));

  slicedInput_86 <= mergedOutput_13(127 DOWNTO 96);

  tmp_202 <= signed(slicedInput_86);

  indexLogic_fixptsig_49 <= unsigned(tmp_202(7 DOWNTO 0));

  slicedInput_87 <= mergedOutput_14(31 DOWNTO 0);

  tmp_203 <= signed(slicedInput_87);

  indexLogic_fixptsig_50 <= unsigned(tmp_203(7 DOWNTO 0));

  slicedInput_88 <= mergedOutput_11(63 DOWNTO 32);

  tmp_204 <= signed(slicedInput_88);

  indexLogic_fixptsig_51 <= unsigned(tmp_204(7 DOWNTO 0));

  slicedInput_89 <= mergedOutput_11(31 DOWNTO 0);

  tmp_205 <= signed(slicedInput_89);

  indexLogic_fixptsig_52 <= unsigned(tmp_205(7 DOWNTO 0));

  slicedInput_90 <= mergedOutput_14(127 DOWNTO 96);

  tmp_206 <= signed(slicedInput_90);

  indexLogic_fixptsig_53 <= unsigned(tmp_206(7 DOWNTO 0));

  rd_addr_4(0) <= indexLogic_fixptsig_37;
  rd_addr_4(1) <= indexLogic_fixptsig_37;
  rd_addr_4(2) <= indexLogic_fixptsig_38;
  rd_addr_4(3) <= indexLogic_fixptsig_39;
  rd_addr_4(4) <= indexLogic_fixptsig_40;
  rd_addr_4(5) <= indexLogic_fixptsig_41;
  rd_addr_4(6) <= indexLogic_fixptsig_42;
  rd_addr_4(7) <= indexLogic_fixptsig_43;
  rd_addr_4(8) <= indexLogic_fixptsig_44;
  rd_addr_4(9) <= indexLogic_fixptsig_45;
  rd_addr_4(10) <= indexLogic_fixptsig_46;
  rd_addr_4(11) <= indexLogic_fixptsig_47;
  rd_addr_4(12) <= indexLogic_fixptsig_48;
  rd_addr_4(13) <= indexLogic_fixptsig_49;
  rd_addr_4(14) <= indexLogic_fixptsig_50;
  rd_addr_4(15) <= indexLogic_fixptsig_51;
  rd_addr_4(16) <= indexLogic_fixptsig_52;
  rd_addr_4(17) <= indexLogic_fixptsig_53;

  rd_addr_overclock18_2 <= rd_addr_4;

  ratechange_splitcomp_out0_8 <= rd_addr_overclock18_2(0);

  ratechange_splitcomp_out1_8 <= rd_addr_overclock18_2(1);

  ratechange_splitcomp_out2_8 <= rd_addr_overclock18_2(2);

  ratechange_splitcomp_out3_8 <= rd_addr_overclock18_2(3);

  ratechange_splitcomp_out4_8 <= rd_addr_overclock18_2(4);

  ratechange_splitcomp_out5_8 <= rd_addr_overclock18_2(5);

  ratechange_splitcomp_out6_8 <= rd_addr_overclock18_2(6);

  ratechange_splitcomp_out7_8 <= rd_addr_overclock18_2(7);

  ratechange_splitcomp_out8_8 <= rd_addr_overclock18_2(8);

  ratechange_splitcomp_out9_8 <= rd_addr_overclock18_2(9);

  ratechange_splitcomp_out10_8 <= rd_addr_overclock18_2(10);

  ratechange_splitcomp_out11_8 <= rd_addr_overclock18_2(11);

  ratechange_splitcomp_out12_8 <= rd_addr_overclock18_2(12);

  ratechange_splitcomp_out13_8 <= rd_addr_overclock18_2(13);

  ratechange_splitcomp_out14_8 <= rd_addr_overclock18_2(14);

  ratechange_splitcomp_out15_8 <= rd_addr_overclock18_2(15);

  ratechange_splitcomp_out16_8 <= rd_addr_overclock18_2(16);

  ratechange_splitcomp_out17_8 <= rd_addr_overclock18_2(17);

  
  rd_addr_5 <= ratechange_splitcomp_out0_8 WHEN counterSig = to_unsigned(16#00#, 5) ELSE
      ratechange_splitcomp_out1_8 WHEN counterSig = to_unsigned(16#01#, 5) ELSE
      ratechange_splitcomp_out2_8 WHEN counterSig = to_unsigned(16#02#, 5) ELSE
      ratechange_splitcomp_out3_8 WHEN counterSig = to_unsigned(16#03#, 5) ELSE
      ratechange_splitcomp_out4_8 WHEN counterSig = to_unsigned(16#04#, 5) ELSE
      ratechange_splitcomp_out5_8 WHEN counterSig = to_unsigned(16#05#, 5) ELSE
      ratechange_splitcomp_out6_8 WHEN counterSig = to_unsigned(16#06#, 5) ELSE
      ratechange_splitcomp_out7_8 WHEN counterSig = to_unsigned(16#07#, 5) ELSE
      ratechange_splitcomp_out8_8 WHEN counterSig = to_unsigned(16#08#, 5) ELSE
      ratechange_splitcomp_out9_8 WHEN counterSig = to_unsigned(16#09#, 5) ELSE
      ratechange_splitcomp_out10_8 WHEN counterSig = to_unsigned(16#0A#, 5) ELSE
      ratechange_splitcomp_out11_8 WHEN counterSig = to_unsigned(16#0B#, 5) ELSE
      ratechange_splitcomp_out12_8 WHEN counterSig = to_unsigned(16#0C#, 5) ELSE
      ratechange_splitcomp_out13_8 WHEN counterSig = to_unsigned(16#0D#, 5) ELSE
      ratechange_splitcomp_out14_8 WHEN counterSig = to_unsigned(16#0E#, 5) ELSE
      ratechange_splitcomp_out15_8 WHEN counterSig = to_unsigned(16#0F#, 5) ELSE
      ratechange_splitcomp_out16_8 WHEN counterSig = to_unsigned(16#10#, 5) ELSE
      ratechange_splitcomp_out17_8;

  slicedInput_91 <= mergedOutput_5(113);

  
  delayOut0_2 <= '1' WHEN slicedInput_91 /= '0' ELSE
      '0';

  slicedInput_92 <= mergedOutput_5(112);

  
  delayOut1_2 <= '1' WHEN slicedInput_92 /= '0' ELSE
      '0';

  slicedInput_93 <= mergedOutput_5(111);

  
  delayOut2_2 <= '1' WHEN slicedInput_93 /= '0' ELSE
      '0';

  slicedInput_94 <= mergedOutput_5(110);

  
  delayOut3_2 <= '1' WHEN slicedInput_94 /= '0' ELSE
      '0';

  slicedInput_95 <= mergedOutput_5(109);

  
  delayOut4_2 <= '1' WHEN slicedInput_95 /= '0' ELSE
      '0';

  slicedInput_96 <= mergedOutput_5(108);

  
  delayOut5_2 <= '1' WHEN slicedInput_96 /= '0' ELSE
      '0';

  slicedInput_97 <= mergedOutput_5(107);

  
  delayOut6_2 <= '1' WHEN slicedInput_97 /= '0' ELSE
      '0';

  slicedInput_98 <= mergedOutput_5(106);

  
  delayOut7_2 <= '1' WHEN slicedInput_98 /= '0' ELSE
      '0';

  slicedInput_99 <= mergedOutput_5(105);

  
  delayOut8_2 <= '1' WHEN slicedInput_99 /= '0' ELSE
      '0';

  slicedInput_100 <= mergedOutput_5(104);

  
  delayOut9_2 <= '1' WHEN slicedInput_100 /= '0' ELSE
      '0';

  slicedInput_101 <= mergedOutput_5(103);

  
  delayOut10_2 <= '1' WHEN slicedInput_101 /= '0' ELSE
      '0';

  slicedInput_102 <= mergedOutput_5(102);

  
  delayOut11_2 <= '1' WHEN slicedInput_102 /= '0' ELSE
      '0';

  slicedInput_103 <= mergedOutput_5(101);

  
  delayOut12_2 <= '1' WHEN slicedInput_103 /= '0' ELSE
      '0';

  slicedInput_104 <= mergedOutput_5(100);

  
  delayOut13_2 <= '1' WHEN slicedInput_104 /= '0' ELSE
      '0';

  slicedInput_105 <= mergedOutput_5(99);

  
  delayOut14_2 <= '1' WHEN slicedInput_105 /= '0' ELSE
      '0';

  slicedInput_106 <= mergedOutput_5(98);

  
  delayOut15_2 <= '1' WHEN slicedInput_106 /= '0' ELSE
      '0';

  slicedInput_107 <= mergedOutput_5(97);

  
  delayOut16_2 <= '1' WHEN slicedInput_107 /= '0' ELSE
      '0';

  slicedInput_108 <= mergedOutput_5(96);

  
  delayOut17_2 <= '1' WHEN slicedInput_108 /= '0' ELSE
      '0';

  rRam3_ram_wr_en_sig(0) <= delayOut0_2;
  rRam3_ram_wr_en_sig(1) <= delayOut1_2;
  rRam3_ram_wr_en_sig(2) <= delayOut2_2;
  rRam3_ram_wr_en_sig(3) <= delayOut3_2;
  rRam3_ram_wr_en_sig(4) <= delayOut4_2;
  rRam3_ram_wr_en_sig(5) <= delayOut5_2;
  rRam3_ram_wr_en_sig(6) <= delayOut6_2;
  rRam3_ram_wr_en_sig(7) <= delayOut7_2;
  rRam3_ram_wr_en_sig(8) <= delayOut8_2;
  rRam3_ram_wr_en_sig(9) <= delayOut9_2;
  rRam3_ram_wr_en_sig(10) <= delayOut10_2;
  rRam3_ram_wr_en_sig(11) <= delayOut11_2;
  rRam3_ram_wr_en_sig(12) <= delayOut12_2;
  rRam3_ram_wr_en_sig(13) <= delayOut13_2;
  rRam3_ram_wr_en_sig(14) <= delayOut14_2;
  rRam3_ram_wr_en_sig(15) <= delayOut15_2;
  rRam3_ram_wr_en_sig(16) <= delayOut16_2;
  rRam3_ram_wr_en_sig(17) <= delayOut17_2;

  rRam3_ram_wr_en_sig_overclock18 <= rRam3_ram_wr_en_sig;

  ratechange_splitcomp_out0_9 <= rRam3_ram_wr_en_sig_overclock18(0);

  ratechange_splitcomp_out1_9 <= rRam3_ram_wr_en_sig_overclock18(1);

  ratechange_splitcomp_out2_9 <= rRam3_ram_wr_en_sig_overclock18(2);

  ratechange_splitcomp_out3_9 <= rRam3_ram_wr_en_sig_overclock18(3);

  ratechange_splitcomp_out4_9 <= rRam3_ram_wr_en_sig_overclock18(4);

  ratechange_splitcomp_out5_9 <= rRam3_ram_wr_en_sig_overclock18(5);

  ratechange_splitcomp_out6_9 <= rRam3_ram_wr_en_sig_overclock18(6);

  ratechange_splitcomp_out7_9 <= rRam3_ram_wr_en_sig_overclock18(7);

  ratechange_splitcomp_out8_9 <= rRam3_ram_wr_en_sig_overclock18(8);

  ratechange_splitcomp_out9_9 <= rRam3_ram_wr_en_sig_overclock18(9);

  ratechange_splitcomp_out10_9 <= rRam3_ram_wr_en_sig_overclock18(10);

  ratechange_splitcomp_out11_9 <= rRam3_ram_wr_en_sig_overclock18(11);

  ratechange_splitcomp_out12_9 <= rRam3_ram_wr_en_sig_overclock18(12);

  ratechange_splitcomp_out13_9 <= rRam3_ram_wr_en_sig_overclock18(13);

  ratechange_splitcomp_out14_9 <= rRam3_ram_wr_en_sig_overclock18(14);

  ratechange_splitcomp_out15_9 <= rRam3_ram_wr_en_sig_overclock18(15);

  ratechange_splitcomp_out16_9 <= rRam3_ram_wr_en_sig_overclock18(16);

  ratechange_splitcomp_out17_9 <= rRam3_ram_wr_en_sig_overclock18(17);

  
  rRam3_ram_wr_en_sig_1 <= ratechange_splitcomp_out0_9 WHEN counterSig = to_unsigned(16#00#, 5) ELSE
      ratechange_splitcomp_out1_9 WHEN counterSig = to_unsigned(16#01#, 5) ELSE
      ratechange_splitcomp_out2_9 WHEN counterSig = to_unsigned(16#02#, 5) ELSE
      ratechange_splitcomp_out3_9 WHEN counterSig = to_unsigned(16#03#, 5) ELSE
      ratechange_splitcomp_out4_9 WHEN counterSig = to_unsigned(16#04#, 5) ELSE
      ratechange_splitcomp_out5_9 WHEN counterSig = to_unsigned(16#05#, 5) ELSE
      ratechange_splitcomp_out6_9 WHEN counterSig = to_unsigned(16#06#, 5) ELSE
      ratechange_splitcomp_out7_9 WHEN counterSig = to_unsigned(16#07#, 5) ELSE
      ratechange_splitcomp_out8_9 WHEN counterSig = to_unsigned(16#08#, 5) ELSE
      ratechange_splitcomp_out9_9 WHEN counterSig = to_unsigned(16#09#, 5) ELSE
      ratechange_splitcomp_out10_9 WHEN counterSig = to_unsigned(16#0A#, 5) ELSE
      ratechange_splitcomp_out11_9 WHEN counterSig = to_unsigned(16#0B#, 5) ELSE
      ratechange_splitcomp_out12_9 WHEN counterSig = to_unsigned(16#0C#, 5) ELSE
      ratechange_splitcomp_out13_9 WHEN counterSig = to_unsigned(16#0D#, 5) ELSE
      ratechange_splitcomp_out14_9 WHEN counterSig = to_unsigned(16#0E#, 5) ELSE
      ratechange_splitcomp_out15_9 WHEN counterSig = to_unsigned(16#0F#, 5) ELSE
      ratechange_splitcomp_out16_9 WHEN counterSig = to_unsigned(16#10#, 5) ELSE
      ratechange_splitcomp_out17_9;

  mergedInput_15 <= wr_addr_1 & rd_addr_1 & rRam1_ram_wr_en_sig_1 & wr_addr_3 & rd_addr_3 & rRam2_ram_wr_en_sig_1 & wr_addr_5 & rd_addr_5 & rRam3_ram_wr_en_sig_1;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_15 <= to_unsigned(0, 51);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        mergedDelay_regin_15 <= mergedInput_15;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_15_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 33
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_15 <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF mergedDelay_waddr_15 >= to_unsigned(16#21#, 6) THEN 
          mergedDelay_waddr_15 <= to_unsigned(16#00#, 6);
        ELSE 
          mergedDelay_waddr_15 <= mergedDelay_waddr_15 + to_unsigned(16#01#, 6);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_15_process;


  mergedDelay_wrenb_15 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 33
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_15 <= to_unsigned(16#01#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF mergedDelay_raddr_15 >= to_unsigned(16#21#, 6) THEN 
          mergedDelay_raddr_15 <= to_unsigned(16#00#, 6);
        ELSE 
          mergedDelay_raddr_15 <= mergedDelay_raddr_15 + to_unsigned(16#01#, 6);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_15_process;


  mergedDelay_regout_unsigned_15 <= unsigned(mergedDelay_regout_15);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_15 <= to_unsigned(0, 51);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        mergedOutput_15 <= mergedDelay_regout_unsigned_15;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_15_process;


  
  wr_data_1 <= ratechange_splitcomp_out0 WHEN counterSig = to_unsigned(16#00#, 5) ELSE
      ratechange_splitcomp_out1 WHEN counterSig = to_unsigned(16#01#, 5) ELSE
      ratechange_splitcomp_out2 WHEN counterSig = to_unsigned(16#02#, 5) ELSE
      ratechange_splitcomp_out3 WHEN counterSig = to_unsigned(16#03#, 5) ELSE
      ratechange_splitcomp_out4 WHEN counterSig = to_unsigned(16#04#, 5) ELSE
      ratechange_splitcomp_out5 WHEN counterSig = to_unsigned(16#05#, 5) ELSE
      ratechange_splitcomp_out6 WHEN counterSig = to_unsigned(16#06#, 5) ELSE
      ratechange_splitcomp_out7 WHEN counterSig = to_unsigned(16#07#, 5) ELSE
      ratechange_splitcomp_out8 WHEN counterSig = to_unsigned(16#08#, 5) ELSE
      ratechange_splitcomp_out9 WHEN counterSig = to_unsigned(16#09#, 5) ELSE
      ratechange_splitcomp_out10 WHEN counterSig = to_unsigned(16#0A#, 5) ELSE
      ratechange_splitcomp_out11 WHEN counterSig = to_unsigned(16#0B#, 5) ELSE
      ratechange_splitcomp_out12 WHEN counterSig = to_unsigned(16#0C#, 5) ELSE
      ratechange_splitcomp_out13 WHEN counterSig = to_unsigned(16#0D#, 5) ELSE
      ratechange_splitcomp_out14 WHEN counterSig = to_unsigned(16#0E#, 5) ELSE
      ratechange_splitcomp_out15 WHEN counterSig = to_unsigned(16#0F#, 5) ELSE
      ratechange_splitcomp_out16 WHEN counterSig = to_unsigned(16#10#, 5) ELSE
      ratechange_splitcomp_out17;

  slicedInput_109 <= mergedOutput_15(50 DOWNTO 43);

  slicedInput_110 <= mergedOutput_15(34);

  
  rRam1_ram_wr_en_sig_2 <= '1' WHEN slicedInput_110 /= '0' ELSE
      '0';

  slicedInput_111 <= mergedOutput_15(42 DOWNTO 35);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  c_48_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sel <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF sel >= to_unsigned(16#11#, 8) THEN 
          sel <= to_unsigned(16#00#, 8);
        ELSE 
          sel <= sel + to_unsigned(16#01#, 8);
        END IF;
      END IF;
    END IF;
  END PROCESS c_48_process;


  mergedInput_16 <= sel & sel & sel;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_16 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        mergedDelay_regin_16 <= mergedInput_16;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_16_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 34
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_16 <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF mergedDelay_waddr_16 >= to_unsigned(16#22#, 6) THEN 
          mergedDelay_waddr_16 <= to_unsigned(16#00#, 6);
        ELSE 
          mergedDelay_waddr_16 <= mergedDelay_waddr_16 + to_unsigned(16#01#, 6);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_16_process;


  mergedDelay_wrenb_16 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 34
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_16 <= to_unsigned(16#01#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF mergedDelay_raddr_16 >= to_unsigned(16#22#, 6) THEN 
          mergedDelay_raddr_16 <= to_unsigned(16#00#, 6);
        ELSE 
          mergedDelay_raddr_16 <= mergedDelay_raddr_16 + to_unsigned(16#01#, 6);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_16_process;


  mergedDelay_regout_unsigned_16 <= unsigned(mergedDelay_regout_16);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_16 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        mergedOutput_16 <= mergedDelay_regout_unsigned_16;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_16_process;


  rd_data_unsigned <= unsigned(rd_data);

  slicedInput_112 <= mergedOutput_16(23 DOWNTO 16);

  rRam1_ram_demux_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rRam1_ram_demux_yreg <= (OTHERS => to_unsigned(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rRam1_ram_demux_yreg <= rRam1_ram_demux_yreg_next;
      END IF;
    END IF;
  END PROCESS rRam1_ram_demux_process;

  rRam1_ram_demux_add_cast <= signed(resize(slicedInput_112, 32));
  rRam1_ram_demux_ctr1 <= rRam1_ram_demux_add_cast + 1;
  
  rRam1_ram_demux_ytmp(0) <= rd_data_unsigned WHEN rRam1_ram_demux_ctr1 = to_signed(16#00000001#, 32) ELSE
      rRam1_ram_demux_yreg(0);
  
  rRam1_ram_demux_ytmp(1) <= rd_data_unsigned WHEN rRam1_ram_demux_ctr1 = to_signed(16#00000002#, 32) ELSE
      rRam1_ram_demux_yreg(1);
  
  rRam1_ram_demux_ytmp(2) <= rd_data_unsigned WHEN rRam1_ram_demux_ctr1 = to_signed(16#00000003#, 32) ELSE
      rRam1_ram_demux_yreg(2);
  
  rRam1_ram_demux_ytmp(3) <= rd_data_unsigned WHEN rRam1_ram_demux_ctr1 = to_signed(16#00000004#, 32) ELSE
      rRam1_ram_demux_yreg(3);
  
  rRam1_ram_demux_ytmp(4) <= rd_data_unsigned WHEN rRam1_ram_demux_ctr1 = to_signed(16#00000005#, 32) ELSE
      rRam1_ram_demux_yreg(4);
  
  rRam1_ram_demux_ytmp(5) <= rd_data_unsigned WHEN rRam1_ram_demux_ctr1 = to_signed(16#00000006#, 32) ELSE
      rRam1_ram_demux_yreg(5);
  
  rRam1_ram_demux_ytmp(6) <= rd_data_unsigned WHEN rRam1_ram_demux_ctr1 = to_signed(16#00000007#, 32) ELSE
      rRam1_ram_demux_yreg(6);
  
  rRam1_ram_demux_ytmp(7) <= rd_data_unsigned WHEN rRam1_ram_demux_ctr1 = to_signed(16#00000008#, 32) ELSE
      rRam1_ram_demux_yreg(7);
  
  rRam1_ram_demux_ytmp(8) <= rd_data_unsigned WHEN rRam1_ram_demux_ctr1 = to_signed(16#00000009#, 32) ELSE
      rRam1_ram_demux_yreg(8);
  
  rRam1_ram_demux_ytmp(9) <= rd_data_unsigned WHEN rRam1_ram_demux_ctr1 = to_signed(16#0000000A#, 32) ELSE
      rRam1_ram_demux_yreg(9);
  
  rRam1_ram_demux_ytmp(10) <= rd_data_unsigned WHEN rRam1_ram_demux_ctr1 = to_signed(16#0000000B#, 32) ELSE
      rRam1_ram_demux_yreg(10);
  
  rRam1_ram_demux_ytmp(11) <= rd_data_unsigned WHEN rRam1_ram_demux_ctr1 = to_signed(16#0000000C#, 32) ELSE
      rRam1_ram_demux_yreg(11);
  
  rRam1_ram_demux_ytmp(12) <= rd_data_unsigned WHEN rRam1_ram_demux_ctr1 = to_signed(16#0000000D#, 32) ELSE
      rRam1_ram_demux_yreg(12);
  
  rRam1_ram_demux_ytmp(13) <= rd_data_unsigned WHEN rRam1_ram_demux_ctr1 = to_signed(16#0000000E#, 32) ELSE
      rRam1_ram_demux_yreg(13);
  
  rRam1_ram_demux_ytmp(14) <= rd_data_unsigned WHEN rRam1_ram_demux_ctr1 = to_signed(16#0000000F#, 32) ELSE
      rRam1_ram_demux_yreg(14);
  
  rRam1_ram_demux_ytmp(15) <= rd_data_unsigned WHEN rRam1_ram_demux_ctr1 = to_signed(16#00000010#, 32) ELSE
      rRam1_ram_demux_yreg(15);
  
  rRam1_ram_demux_ytmp(16) <= rd_data_unsigned WHEN rRam1_ram_demux_ctr1 = to_signed(16#00000011#, 32) ELSE
      rRam1_ram_demux_yreg(16);
  
  rRam1_ram_demux_ytmp(17) <= rd_data_unsigned WHEN rRam1_ram_demux_ctr1 = to_signed(16#00000012#, 32) ELSE
      rRam1_ram_demux_yreg(17);
  rRam1_ram_demux_yreg_next(0) <= rRam1_ram_demux_ytmp(0);
  rd_data_overclock18(0) <= rRam1_ram_demux_ytmp(0);
  rRam1_ram_demux_yreg_next(1) <= rRam1_ram_demux_ytmp(1);
  rd_data_overclock18(1) <= rRam1_ram_demux_ytmp(1);
  rRam1_ram_demux_yreg_next(2) <= rRam1_ram_demux_ytmp(2);
  rd_data_overclock18(2) <= rRam1_ram_demux_ytmp(2);
  rRam1_ram_demux_yreg_next(3) <= rRam1_ram_demux_ytmp(3);
  rd_data_overclock18(3) <= rRam1_ram_demux_ytmp(3);
  rRam1_ram_demux_yreg_next(4) <= rRam1_ram_demux_ytmp(4);
  rd_data_overclock18(4) <= rRam1_ram_demux_ytmp(4);
  rRam1_ram_demux_yreg_next(5) <= rRam1_ram_demux_ytmp(5);
  rd_data_overclock18(5) <= rRam1_ram_demux_ytmp(5);
  rRam1_ram_demux_yreg_next(6) <= rRam1_ram_demux_ytmp(6);
  rd_data_overclock18(6) <= rRam1_ram_demux_ytmp(6);
  rRam1_ram_demux_yreg_next(7) <= rRam1_ram_demux_ytmp(7);
  rd_data_overclock18(7) <= rRam1_ram_demux_ytmp(7);
  rRam1_ram_demux_yreg_next(8) <= rRam1_ram_demux_ytmp(8);
  rd_data_overclock18(8) <= rRam1_ram_demux_ytmp(8);
  rRam1_ram_demux_yreg_next(9) <= rRam1_ram_demux_ytmp(9);
  rd_data_overclock18(9) <= rRam1_ram_demux_ytmp(9);
  rRam1_ram_demux_yreg_next(10) <= rRam1_ram_demux_ytmp(10);
  rd_data_overclock18(10) <= rRam1_ram_demux_ytmp(10);
  rRam1_ram_demux_yreg_next(11) <= rRam1_ram_demux_ytmp(11);
  rd_data_overclock18(11) <= rRam1_ram_demux_ytmp(11);
  rRam1_ram_demux_yreg_next(12) <= rRam1_ram_demux_ytmp(12);
  rd_data_overclock18(12) <= rRam1_ram_demux_ytmp(12);
  rRam1_ram_demux_yreg_next(13) <= rRam1_ram_demux_ytmp(13);
  rd_data_overclock18(13) <= rRam1_ram_demux_ytmp(13);
  rRam1_ram_demux_yreg_next(14) <= rRam1_ram_demux_ytmp(14);
  rd_data_overclock18(14) <= rRam1_ram_demux_ytmp(14);
  rRam1_ram_demux_yreg_next(15) <= rRam1_ram_demux_ytmp(15);
  rd_data_overclock18(15) <= rRam1_ram_demux_ytmp(15);
  rRam1_ram_demux_yreg_next(16) <= rRam1_ram_demux_ytmp(16);
  rd_data_overclock18(16) <= rRam1_ram_demux_ytmp(16);
  rRam1_ram_demux_yreg_next(17) <= rRam1_ram_demux_ytmp(17);
  rd_data_overclock18(17) <= rRam1_ram_demux_ytmp(17);

  rd_data_downsample18_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_data_downsample18_bypass_reg <= (OTHERS => to_unsigned(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_1 = '1' THEN
        rd_data_downsample18_bypass_reg <= rd_data_overclock18;
      END IF;
    END IF;
  END PROCESS rd_data_downsample18_bypass_process;

  
  rd_data_1 <= rd_data_overclock18 WHEN enb_1_18_1 = '1' ELSE
      rd_data_downsample18_bypass_reg;

  rRam1 <= rd_data_1(1);

  rRam1_1 <= rd_data_1(9);

  rRam1_2 <= rd_data_1(2);

  rRam1_3 <= rd_data_1(10);

  rRam1_4 <= rd_data_1(4);

  rRam1_5 <= rd_data_1(13);

  rRam1_6 <= rd_data_1(3);

  rRam1_7 <= rd_data_1(11);

  rRam1_8 <= rd_data_1(5);

  rRam1_9 <= rd_data_1(14);

  rRam1_10 <= rd_data_1(7);

  rRam1_11 <= rd_data_1(12);

  rRam1_12 <= rd_data_1(6);

  rRam1_13 <= rd_data_1(15);

  rRam1_14 <= rd_data_1(8);

  rRam1_15 <= rd_data_1(16);

  p172xg_output : PROCESS 
  BEGIN
    xg <= (OTHERS => to_signed(16#0000#, 14));
    xg(0) <= to_signed(-16#0001#, 14);
    WAIT;
  END PROCESS p172xg_output;


  p178xg_output : PROCESS (xg)
  BEGIN
    xg_1 <= xg;
    xg_1(1) <= to_signed(-16#0001#, 14);
  END PROCESS p178xg_output;


  p184xg_output : PROCESS (xg_1)
  BEGIN
    xg_2 <= xg_1;
    xg_2(2) <= to_signed(-16#0001#, 14);
  END PROCESS p184xg_output;


  p190xg_output : PROCESS (xg_2)
  BEGIN
    xg_3 <= xg_2;
    xg_3(3) <= to_signed(-16#000A#, 14);
  END PROCESS p190xg_output;


  p196xg_output : PROCESS (xg_3)
  BEGIN
    xg_4 <= xg_3;
    xg_4(4) <= to_signed(-16#00A9#, 14);
  END PROCESS p196xg_output;


  p202xg_output : PROCESS (xg_4)
  BEGIN
    xg_5 <= xg_4;
    xg_5(5) <= to_signed(-16#059C#, 14);
  END PROCESS p202xg_output;


  p208xg_output : PROCESS (xg_5)
  BEGIN
    xg_6 <= xg_5;
    xg_6(6) <= to_signed(-16#1539#, 14);
  END PROCESS p208xg_output;


  p214xg_output : PROCESS (xg_6)
  BEGIN
    xg_7 <= xg_6;
    xg_7(7) <= to_signed(-16#1E13#, 14);
  END PROCESS p214xg_output;


  p220xg_output : PROCESS (xg_7)
  BEGIN
    xg_8 <= xg_7;
    xg_8(8) <= to_signed(16#0000#, 14);
  END PROCESS p220xg_output;


  p226xg_output : PROCESS (xg_8)
  BEGIN
    xg_9 <= xg_8;
    xg_9(9) <= to_signed(16#1E12#, 14);
  END PROCESS p226xg_output;


  p232xg_output : PROCESS (xg_9)
  BEGIN
    xg_10 <= xg_9;
    xg_10(10) <= to_signed(16#1538#, 14);
  END PROCESS p232xg_output;


  p238xg_output : PROCESS (xg_10)
  BEGIN
    xg_11 <= xg_10;
    xg_11(11) <= to_signed(16#059B#, 14);
  END PROCESS p238xg_output;


  p244xg_output : PROCESS (xg_11)
  BEGIN
    xg_12 <= xg_11;
    xg_12(12) <= to_signed(16#00A8#, 14);
  END PROCESS p244xg_output;


  p250xg_output : PROCESS (xg_12)
  BEGIN
    xg_13 <= xg_12;
    xg_13(13) <= to_signed(16#0009#, 14);
  END PROCESS p250xg_output;


  p256xg_output : PROCESS (xg_13)
  BEGIN
    xg_14 <= xg_13;
    xg_14(14) <= to_signed(16#0000#, 14);
  END PROCESS p256xg_output;


  p262xg_output : PROCESS (xg_14)
  BEGIN
    xg_15 <= xg_14;
    xg_15(15) <= to_signed(16#0000#, 14);
  END PROCESS p262xg_output;


  p268xg_output : PROCESS (xg_15)
  BEGIN
    xg_16 <= xg_15;
    xg_16(16) <= to_signed(16#0000#, 14);
  END PROCESS p268xg_output;


  delayIn0 <= xg_16(0);

  delayIn1 <= xg_16(1);

  delayIn2 <= xg_16(2);

  delayIn3 <= xg_16(3);

  delayIn4 <= xg_16(4);

  delayIn5 <= xg_16(5);

  delayIn6 <= xg_16(6);

  delayIn7 <= xg_16(7);

  delayIn8 <= xg_16(8);

  mergedInput_17 <= unsigned(delayIn0) & unsigned(delayIn1) & unsigned(delayIn2) & unsigned(delayIn3) & unsigned(delayIn4) & unsigned(delayIn5) & unsigned(delayIn6) & unsigned(delayIn7) & unsigned(delayIn8);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_17 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_17 <= mergedInput_17;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_17_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_17 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_17 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_17 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_17 <= mergedDelay_waddr_17 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_17_process;


  mergedDelay_wrenb_17 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_17 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_17 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_17 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_17 <= mergedDelay_raddr_17 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_17_process;


  mergedDelay_regout_unsigned_17 <= unsigned(mergedDelay_regout_17);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_17 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_17 <= mergedDelay_regout_unsigned_17;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_17_process;


  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  --                                                                          %
  -- 
  --           Generated by MATLAB 9.7 and Fixed-Point Designer 6.4           %
  -- 
  --                                                                          %
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  --------------------------------------------
  -- 
  --------------------------------------------
  -- 
  --------------------------------------------
  -- 
  ----------------------
  p170g_output : PROCESS 
  BEGIN
    g <= (OTHERS => to_unsigned(16#0000#, 14));
    g(0) <= to_unsigned(16#0000#, 14);
    WAIT;
  END PROCESS p170g_output;


  p176g_output : PROCESS (g)
  BEGIN
    g_1 <= g;
    g_1(1) <= to_unsigned(16#0000#, 14);
  END PROCESS p176g_output;


  p182g_output : PROCESS (g_1)
  BEGIN
    g_2 <= g_1;
    g_2(2) <= to_unsigned(16#0000#, 14);
  END PROCESS p182g_output;


  p188g_output : PROCESS (g_2)
  BEGIN
    g_3 <= g_2;
    g_3(3) <= to_unsigned(16#0001#, 14);
  END PROCESS p188g_output;


  p194g_output : PROCESS (g_3)
  BEGIN
    g_4 <= g_3;
    g_4(4) <= to_unsigned(16#002A#, 14);
  END PROCESS p194g_output;


  p200g_output : PROCESS (g_4)
  BEGIN
    g_5 <= g_4;
    g_5(5) <= to_unsigned(16#01DE#, 14);
  END PROCESS p200g_output;


  p206g_output : PROCESS (g_5)
  BEGIN
    g_6 <= g_5;
    g_6(6) <= to_unsigned(16#0A9C#, 14);
  END PROCESS p206g_output;


  p212g_output : PROCESS (g_6)
  BEGIN
    g_7 <= g_6;
    g_7(7) <= to_unsigned(16#1E12#, 14);
  END PROCESS p212g_output;


  p218g_output : PROCESS (g_7)
  BEGIN
    g_8 <= g_7;
    g_8(8) <= to_unsigned(16#2A8D#, 14);
  END PROCESS p218g_output;


  p224g_output : PROCESS (g_8)
  BEGIN
    g_9 <= g_8;
    g_9(9) <= to_unsigned(16#1E12#, 14);
  END PROCESS p224g_output;


  p230g_output : PROCESS (g_9)
  BEGIN
    g_10 <= g_9;
    g_10(10) <= to_unsigned(16#0A9C#, 14);
  END PROCESS p230g_output;


  p236g_output : PROCESS (g_10)
  BEGIN
    g_11 <= g_10;
    g_11(11) <= to_unsigned(16#01DE#, 14);
  END PROCESS p236g_output;


  p242g_output : PROCESS (g_11)
  BEGIN
    g_12 <= g_11;
    g_12(12) <= to_unsigned(16#002A#, 14);
  END PROCESS p242g_output;


  p248g_output : PROCESS (g_12)
  BEGIN
    g_13 <= g_12;
    g_13(13) <= to_unsigned(16#0001#, 14);
  END PROCESS p248g_output;


  p254g_output : PROCESS (g_13)
  BEGIN
    g_14 <= g_13;
    g_14(14) <= to_unsigned(16#0000#, 14);
  END PROCESS p254g_output;


  p260g_output : PROCESS (g_14)
  BEGIN
    g_15 <= g_14;
    g_15(15) <= to_unsigned(16#0000#, 14);
  END PROCESS p260g_output;


  p266g_output : PROCESS (g_15)
  BEGIN
    g_16 <= g_15;
    g_16(16) <= to_unsigned(16#0000#, 14);
  END PROCESS p266g_output;


  delayIn51 <= g_16(51);

  delayIn52 <= g_16(52);

  delayIn53 <= g_16(53);

  delayIn54 <= g_16(54);

  delayIn55 <= g_16(55);

  delayIn56 <= g_16(56);

  delayIn57 <= g_16(57);

  delayIn58 <= g_16(58);

  delayIn9 <= xg_16(9);

  mergedInput_18 <= delayIn51 & delayIn52 & delayIn53 & delayIn54 & delayIn55 & delayIn56 & delayIn57 & delayIn58 & unsigned(delayIn9);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_18 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_18 <= mergedInput_18;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_18_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_18 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_18 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_18 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_18 <= mergedDelay_waddr_18 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_18_process;


  mergedDelay_wrenb_18 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_18 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_18 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_18 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_18 <= mergedDelay_raddr_18 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_18_process;


  mergedDelay_regout_unsigned_18 <= unsigned(mergedDelay_regout_18);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_18 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_18 <= mergedDelay_regout_unsigned_18;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_18_process;


  delayIn10 <= xg_16(10);

  delayIn11 <= xg_16(11);

  delayIn12 <= xg_16(12);

  delayIn13 <= xg_16(13);

  delayIn14 <= xg_16(14);

  delayIn15 <= xg_16(15);

  delayIn16 <= xg_16(16);

  delayIn17 <= xg_16(17);

  delayIn18 <= xg_16(18);

  mergedInput_19 <= unsigned(delayIn10) & unsigned(delayIn11) & unsigned(delayIn12) & unsigned(delayIn13) & unsigned(delayIn14) & unsigned(delayIn15) & unsigned(delayIn16) & unsigned(delayIn17) & unsigned(delayIn18);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_19 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_19 <= mergedInput_19;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_19_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_19 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_19 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_19 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_19 <= mergedDelay_waddr_19 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_19_process;


  mergedDelay_wrenb_19 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_19 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_19 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_19 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_19 <= mergedDelay_raddr_19 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_19_process;


  mergedDelay_regout_unsigned_19 <= unsigned(mergedDelay_regout_19);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_19 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_19 <= mergedDelay_regout_unsigned_19;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_19_process;


  delayIn19 <= xg_16(19);

  delayIn20 <= xg_16(20);

  delayIn21 <= xg_16(21);

  delayIn22 <= xg_16(22);

  delayIn23 <= xg_16(23);

  delayIn24 <= xg_16(24);

  delayIn25 <= xg_16(25);

  delayIn26 <= xg_16(26);

  delayIn27 <= xg_16(27);

  mergedInput_20 <= unsigned(delayIn19) & unsigned(delayIn20) & unsigned(delayIn21) & unsigned(delayIn22) & unsigned(delayIn23) & unsigned(delayIn24) & unsigned(delayIn25) & unsigned(delayIn26) & unsigned(delayIn27);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_20 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_20 <= mergedInput_20;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_20_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_20 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_20 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_20 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_20 <= mergedDelay_waddr_20 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_20_process;


  mergedDelay_wrenb_20 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_20 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_20 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_20 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_20 <= mergedDelay_raddr_20 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_20_process;


  mergedDelay_regout_unsigned_20 <= unsigned(mergedDelay_regout_20);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_20 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_20 <= mergedDelay_regout_unsigned_20;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_20_process;


  delayIn28 <= xg_16(28);

  delayIn29 <= xg_16(29);

  delayIn30 <= xg_16(30);

  delayIn31 <= xg_16(31);

  delayIn32 <= xg_16(32);

  delayIn33 <= xg_16(33);

  delayIn34 <= xg_16(34);

  delayIn35 <= xg_16(35);

  delayIn36 <= xg_16(36);

  mergedInput_21 <= unsigned(delayIn28) & unsigned(delayIn29) & unsigned(delayIn30) & unsigned(delayIn31) & unsigned(delayIn32) & unsigned(delayIn33) & unsigned(delayIn34) & unsigned(delayIn35) & unsigned(delayIn36);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_21 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_21 <= mergedInput_21;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_21_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_21 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_21 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_21 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_21 <= mergedDelay_waddr_21 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_21_process;


  mergedDelay_wrenb_21 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_21 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_21 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_21 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_21 <= mergedDelay_raddr_21 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_21_process;


  mergedDelay_regout_unsigned_21 <= unsigned(mergedDelay_regout_21);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_21 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_21 <= mergedDelay_regout_unsigned_21;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_21_process;


  delayIn37 <= xg_16(37);

  delayIn38 <= xg_16(38);

  delayIn39 <= xg_16(39);

  delayIn40 <= xg_16(40);

  delayIn41 <= xg_16(41);

  delayIn42 <= xg_16(42);

  delayIn43 <= xg_16(43);

  delayIn44 <= xg_16(44);

  delayIn45 <= xg_16(45);

  mergedInput_22 <= unsigned(delayIn37) & unsigned(delayIn38) & unsigned(delayIn39) & unsigned(delayIn40) & unsigned(delayIn41) & unsigned(delayIn42) & unsigned(delayIn43) & unsigned(delayIn44) & unsigned(delayIn45);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_22 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_22 <= mergedInput_22;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_22_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_22 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_22 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_22 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_22 <= mergedDelay_waddr_22 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_22_process;


  mergedDelay_wrenb_22 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_22 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_22 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_22 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_22 <= mergedDelay_raddr_22 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_22_process;


  mergedDelay_regout_unsigned_22 <= unsigned(mergedDelay_regout_22);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_22 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_22 <= mergedDelay_regout_unsigned_22;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_22_process;


  delayIn46 <= xg_16(46);

  delayIn47 <= xg_16(47);

  delayIn48 <= xg_16(48);

  delayIn49 <= xg_16(49);

  delayIn50 <= xg_16(50);

  delayIn51_1 <= xg_16(51);

  delayIn52_1 <= xg_16(52);

  delayIn53_1 <= xg_16(53);

  delayIn54_1 <= xg_16(54);

  mergedInput_23 <= unsigned(delayIn46) & unsigned(delayIn47) & unsigned(delayIn48) & unsigned(delayIn49) & unsigned(delayIn50) & unsigned(delayIn51_1) & unsigned(delayIn52_1) & unsigned(delayIn53_1) & unsigned(delayIn54_1);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_23 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_23 <= mergedInput_23;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_23_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_23 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_23 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_23 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_23 <= mergedDelay_waddr_23 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_23_process;


  mergedDelay_wrenb_23 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_23 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_23 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_23 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_23 <= mergedDelay_raddr_23 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_23_process;


  mergedDelay_regout_unsigned_23 <= unsigned(mergedDelay_regout_23);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_23 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_23 <= mergedDelay_regout_unsigned_23;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_23_process;


  delayIn55_1 <= xg_16(55);

  delayIn56_1 <= xg_16(56);

  delayIn57_1 <= xg_16(57);

  delayIn58_1 <= xg_16(58);

  delayIn59 <= xg_16(59);

  delayIn60 <= xg_16(60);

  delayIn61 <= xg_16(61);

  delayIn62 <= xg_16(62);

  delayIn63 <= xg_16(63);

  mergedInput_24 <= unsigned(delayIn55_1) & unsigned(delayIn56_1) & unsigned(delayIn57_1) & unsigned(delayIn58_1) & unsigned(delayIn59) & unsigned(delayIn60) & unsigned(delayIn61) & unsigned(delayIn62) & unsigned(delayIn63);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_24 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_24 <= mergedInput_24;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_24_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_24 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_24 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_24 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_24 <= mergedDelay_waddr_24 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_24_process;


  mergedDelay_wrenb_24 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_24 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_24 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_24 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_24 <= mergedDelay_raddr_24 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_24_process;


  mergedDelay_regout_unsigned_24 <= unsigned(mergedDelay_regout_24);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_24 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_24 <= mergedDelay_regout_unsigned_24;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_24_process;


  delayIn64 <= xg_16(64);

  delayIn65 <= xg_16(65);

  delayIn66 <= xg_16(66);

  delayIn67 <= xg_16(67);

  delayIn68 <= xg_16(68);

  delayIn69 <= xg_16(69);

  delayIn70 <= xg_16(70);

  delayIn71 <= xg_16(71);

  delayIn72 <= xg_16(72);

  mergedInput_25 <= unsigned(delayIn64) & unsigned(delayIn65) & unsigned(delayIn66) & unsigned(delayIn67) & unsigned(delayIn68) & unsigned(delayIn69) & unsigned(delayIn70) & unsigned(delayIn71) & unsigned(delayIn72);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_25 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_25 <= mergedInput_25;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_25_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_25 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_25 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_25 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_25 <= mergedDelay_waddr_25 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_25_process;


  mergedDelay_wrenb_25 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_25 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_25 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_25 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_25 <= mergedDelay_raddr_25 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_25_process;


  mergedDelay_regout_unsigned_25 <= unsigned(mergedDelay_regout_25);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_25 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_25 <= mergedDelay_regout_unsigned_25;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_25_process;


  delayIn73 <= xg_16(73);

  delayIn74 <= xg_16(74);

  delayIn75 <= xg_16(75);

  mergedInput_26 <= unsigned(delayIn73) & unsigned(delayIn74) & unsigned(delayIn75);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_26 <= to_unsigned(0, 42);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_26 <= mergedInput_26;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_26_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_26 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_26 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_26 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_26 <= mergedDelay_waddr_26 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_26_process;


  mergedDelay_wrenb_26 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_26 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_26 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_26 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_26 <= mergedDelay_raddr_26 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_26_process;


  mergedDelay_regout_unsigned_26 <= unsigned(mergedDelay_regout_26);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_26 <= to_unsigned(0, 42);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_26 <= mergedDelay_regout_unsigned_26;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_26_process;


  slicedInput_113 <= mergedOutput_17(125 DOWNTO 112);

  delayOut0_3 <= signed(slicedInput_113);

  slicedInput_114 <= mergedOutput_17(111 DOWNTO 98);

  delayOut1_3 <= signed(slicedInput_114);

  slicedInput_115 <= mergedOutput_17(97 DOWNTO 84);

  delayOut2_3 <= signed(slicedInput_115);

  slicedInput_116 <= mergedOutput_17(83 DOWNTO 70);

  delayOut3_3 <= signed(slicedInput_116);

  slicedInput_117 <= mergedOutput_17(69 DOWNTO 56);

  delayOut4_3 <= signed(slicedInput_117);

  slicedInput_118 <= mergedOutput_17(55 DOWNTO 42);

  delayOut5_3 <= signed(slicedInput_118);

  slicedInput_119 <= mergedOutput_17(41 DOWNTO 28);

  delayOut6_3 <= signed(slicedInput_119);

  slicedInput_120 <= mergedOutput_17(27 DOWNTO 14);

  delayOut7_3 <= signed(slicedInput_120);

  slicedInput_121 <= mergedOutput_17(13 DOWNTO 0);

  delayOut8_3 <= signed(slicedInput_121);

  slicedInput_122 <= mergedOutput_18(13 DOWNTO 0);

  delayOut9_3 <= signed(slicedInput_122);

  slicedInput_123 <= mergedOutput_19(125 DOWNTO 112);

  delayOut10_3 <= signed(slicedInput_123);

  slicedInput_124 <= mergedOutput_19(111 DOWNTO 98);

  delayOut11_3 <= signed(slicedInput_124);

  slicedInput_125 <= mergedOutput_19(97 DOWNTO 84);

  delayOut12_3 <= signed(slicedInput_125);

  slicedInput_126 <= mergedOutput_19(83 DOWNTO 70);

  delayOut13_3 <= signed(slicedInput_126);

  slicedInput_127 <= mergedOutput_19(69 DOWNTO 56);

  delayOut14_3 <= signed(slicedInput_127);

  slicedInput_128 <= mergedOutput_19(55 DOWNTO 42);

  delayOut15_3 <= signed(slicedInput_128);

  slicedInput_129 <= mergedOutput_19(41 DOWNTO 28);

  delayOut16_3 <= signed(slicedInput_129);

  slicedInput_130 <= mergedOutput_19(27 DOWNTO 14);

  delayOut17_3 <= signed(slicedInput_130);

  slicedInput_131 <= mergedOutput_19(13 DOWNTO 0);

  delayOut18 <= signed(slicedInput_131);

  slicedInput_132 <= mergedOutput_20(125 DOWNTO 112);

  delayOut19 <= signed(slicedInput_132);

  slicedInput_133 <= mergedOutput_20(111 DOWNTO 98);

  delayOut20 <= signed(slicedInput_133);

  slicedInput_134 <= mergedOutput_20(97 DOWNTO 84);

  delayOut21 <= signed(slicedInput_134);

  slicedInput_135 <= mergedOutput_20(83 DOWNTO 70);

  delayOut22 <= signed(slicedInput_135);

  slicedInput_136 <= mergedOutput_20(69 DOWNTO 56);

  delayOut23 <= signed(slicedInput_136);

  slicedInput_137 <= mergedOutput_20(55 DOWNTO 42);

  delayOut24 <= signed(slicedInput_137);

  slicedInput_138 <= mergedOutput_20(41 DOWNTO 28);

  delayOut25 <= signed(slicedInput_138);

  slicedInput_139 <= mergedOutput_20(27 DOWNTO 14);

  delayOut26 <= signed(slicedInput_139);

  slicedInput_140 <= mergedOutput_20(13 DOWNTO 0);

  delayOut27 <= signed(slicedInput_140);

  slicedInput_141 <= mergedOutput_21(125 DOWNTO 112);

  delayOut28 <= signed(slicedInput_141);

  slicedInput_142 <= mergedOutput_21(111 DOWNTO 98);

  delayOut29 <= signed(slicedInput_142);

  slicedInput_143 <= mergedOutput_21(97 DOWNTO 84);

  delayOut30 <= signed(slicedInput_143);

  slicedInput_144 <= mergedOutput_21(83 DOWNTO 70);

  delayOut31 <= signed(slicedInput_144);

  slicedInput_145 <= mergedOutput_21(69 DOWNTO 56);

  delayOut32 <= signed(slicedInput_145);

  slicedInput_146 <= mergedOutput_21(55 DOWNTO 42);

  delayOut33 <= signed(slicedInput_146);

  slicedInput_147 <= mergedOutput_21(41 DOWNTO 28);

  delayOut34 <= signed(slicedInput_147);

  slicedInput_148 <= mergedOutput_21(27 DOWNTO 14);

  delayOut35 <= signed(slicedInput_148);

  slicedInput_149 <= mergedOutput_21(13 DOWNTO 0);

  delayOut36 <= signed(slicedInput_149);

  slicedInput_150 <= mergedOutput_22(125 DOWNTO 112);

  delayOut37 <= signed(slicedInput_150);

  slicedInput_151 <= mergedOutput_22(111 DOWNTO 98);

  delayOut38 <= signed(slicedInput_151);

  slicedInput_152 <= mergedOutput_22(97 DOWNTO 84);

  delayOut39 <= signed(slicedInput_152);

  slicedInput_153 <= mergedOutput_22(83 DOWNTO 70);

  delayOut40 <= signed(slicedInput_153);

  slicedInput_154 <= mergedOutput_22(69 DOWNTO 56);

  delayOut41 <= signed(slicedInput_154);

  slicedInput_155 <= mergedOutput_22(55 DOWNTO 42);

  delayOut42 <= signed(slicedInput_155);

  slicedInput_156 <= mergedOutput_22(41 DOWNTO 28);

  delayOut43 <= signed(slicedInput_156);

  slicedInput_157 <= mergedOutput_22(27 DOWNTO 14);

  delayOut44 <= signed(slicedInput_157);

  slicedInput_158 <= mergedOutput_22(13 DOWNTO 0);

  delayOut45 <= signed(slicedInput_158);

  slicedInput_159 <= mergedOutput_23(125 DOWNTO 112);

  delayOut46 <= signed(slicedInput_159);

  slicedInput_160 <= mergedOutput_23(111 DOWNTO 98);

  delayOut47 <= signed(slicedInput_160);

  slicedInput_161 <= mergedOutput_23(97 DOWNTO 84);

  delayOut48 <= signed(slicedInput_161);

  slicedInput_162 <= mergedOutput_23(83 DOWNTO 70);

  delayOut49 <= signed(slicedInput_162);

  slicedInput_163 <= mergedOutput_23(69 DOWNTO 56);

  delayOut50 <= signed(slicedInput_163);

  slicedInput_164 <= mergedOutput_23(55 DOWNTO 42);

  delayOut51 <= signed(slicedInput_164);

  slicedInput_165 <= mergedOutput_23(41 DOWNTO 28);

  delayOut52 <= signed(slicedInput_165);

  slicedInput_166 <= mergedOutput_23(27 DOWNTO 14);

  delayOut53 <= signed(slicedInput_166);

  slicedInput_167 <= mergedOutput_23(13 DOWNTO 0);

  delayOut54 <= signed(slicedInput_167);

  slicedInput_168 <= mergedOutput_24(125 DOWNTO 112);

  delayOut55 <= signed(slicedInput_168);

  slicedInput_169 <= mergedOutput_24(111 DOWNTO 98);

  delayOut56 <= signed(slicedInput_169);

  slicedInput_170 <= mergedOutput_24(97 DOWNTO 84);

  delayOut57 <= signed(slicedInput_170);

  slicedInput_171 <= mergedOutput_24(83 DOWNTO 70);

  delayOut58 <= signed(slicedInput_171);

  slicedInput_172 <= mergedOutput_24(69 DOWNTO 56);

  delayOut59 <= signed(slicedInput_172);

  slicedInput_173 <= mergedOutput_24(55 DOWNTO 42);

  delayOut60 <= signed(slicedInput_173);

  slicedInput_174 <= mergedOutput_24(41 DOWNTO 28);

  delayOut61 <= signed(slicedInput_174);

  slicedInput_175 <= mergedOutput_24(27 DOWNTO 14);

  delayOut62 <= signed(slicedInput_175);

  slicedInput_176 <= mergedOutput_24(13 DOWNTO 0);

  delayOut63 <= signed(slicedInput_176);

  slicedInput_177 <= mergedOutput_25(125 DOWNTO 112);

  delayOut64 <= signed(slicedInput_177);

  slicedInput_178 <= mergedOutput_25(111 DOWNTO 98);

  delayOut65 <= signed(slicedInput_178);

  slicedInput_179 <= mergedOutput_25(97 DOWNTO 84);

  delayOut66 <= signed(slicedInput_179);

  slicedInput_180 <= mergedOutput_25(83 DOWNTO 70);

  delayOut67 <= signed(slicedInput_180);

  slicedInput_181 <= mergedOutput_25(69 DOWNTO 56);

  delayOut68 <= signed(slicedInput_181);

  slicedInput_182 <= mergedOutput_25(55 DOWNTO 42);

  delayOut69 <= signed(slicedInput_182);

  slicedInput_183 <= mergedOutput_25(41 DOWNTO 28);

  delayOut70 <= signed(slicedInput_183);

  slicedInput_184 <= mergedOutput_25(27 DOWNTO 14);

  delayOut71 <= signed(slicedInput_184);

  slicedInput_185 <= mergedOutput_25(13 DOWNTO 0);

  delayOut72 <= signed(slicedInput_185);

  slicedInput_186 <= mergedOutput_26(41 DOWNTO 28);

  delayOut73 <= signed(slicedInput_186);

  slicedInput_187 <= mergedOutput_26(27 DOWNTO 14);

  delayOut74 <= signed(slicedInput_187);

  slicedInput_188 <= mergedOutput_26(13 DOWNTO 0);

  delayOut75 <= signed(slicedInput_188);

  xg_17(0) <= delayOut0_3;
  xg_17(1) <= delayOut1_3;
  xg_17(2) <= delayOut2_3;
  xg_17(3) <= delayOut3_3;
  xg_17(4) <= delayOut4_3;
  xg_17(5) <= delayOut5_3;
  xg_17(6) <= delayOut6_3;
  xg_17(7) <= delayOut7_3;
  xg_17(8) <= delayOut8_3;
  xg_17(9) <= delayOut9_3;
  xg_17(10) <= delayOut10_3;
  xg_17(11) <= delayOut11_3;
  xg_17(12) <= delayOut12_3;
  xg_17(13) <= delayOut13_3;
  xg_17(14) <= delayOut14_3;
  xg_17(15) <= delayOut15_3;
  xg_17(16) <= delayOut16_3;
  xg_17(17) <= delayOut17_3;
  xg_17(18) <= delayOut18;
  xg_17(19) <= delayOut19;
  xg_17(20) <= delayOut20;
  xg_17(21) <= delayOut21;
  xg_17(22) <= delayOut22;
  xg_17(23) <= delayOut23;
  xg_17(24) <= delayOut24;
  xg_17(25) <= delayOut25;
  xg_17(26) <= delayOut26;
  xg_17(27) <= delayOut27;
  xg_17(28) <= delayOut28;
  xg_17(29) <= delayOut29;
  xg_17(30) <= delayOut30;
  xg_17(31) <= delayOut31;
  xg_17(32) <= delayOut32;
  xg_17(33) <= delayOut33;
  xg_17(34) <= delayOut34;
  xg_17(35) <= delayOut35;
  xg_17(36) <= delayOut36;
  xg_17(37) <= delayOut37;
  xg_17(38) <= delayOut38;
  xg_17(39) <= delayOut39;
  xg_17(40) <= delayOut40;
  xg_17(41) <= delayOut41;
  xg_17(42) <= delayOut42;
  xg_17(43) <= delayOut43;
  xg_17(44) <= delayOut44;
  xg_17(45) <= delayOut45;
  xg_17(46) <= delayOut46;
  xg_17(47) <= delayOut47;
  xg_17(48) <= delayOut48;
  xg_17(49) <= delayOut49;
  xg_17(50) <= delayOut50;
  xg_17(51) <= delayOut51;
  xg_17(52) <= delayOut52;
  xg_17(53) <= delayOut53;
  xg_17(54) <= delayOut54;
  xg_17(55) <= delayOut55;
  xg_17(56) <= delayOut56;
  xg_17(57) <= delayOut57;
  xg_17(58) <= delayOut58;
  xg_17(59) <= delayOut59;
  xg_17(60) <= delayOut60;
  xg_17(61) <= delayOut61;
  xg_17(62) <= delayOut62;
  xg_17(63) <= delayOut63;
  xg_17(64) <= delayOut64;
  xg_17(65) <= delayOut65;
  xg_17(66) <= delayOut66;
  xg_17(67) <= delayOut67;
  xg_17(68) <= delayOut68;
  xg_17(69) <= delayOut69;
  xg_17(70) <= delayOut70;
  xg_17(71) <= delayOut71;
  xg_17(72) <= delayOut72;
  xg_17(73) <= delayOut73;
  xg_17(74) <= delayOut74;
  xg_17(75) <= delayOut75;

  ----------------------
  inb1_P <= to_unsigned(16#0000#, 14);

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg <= (OTHERS => to_unsigned(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        reduced_reg(0) <= inb1_P;
        reduced_reg(1 TO 19) <= reduced_reg(0 TO 18);
      END IF;
    END IF;
  END PROCESS reduced_process;

  inb1_P_1 <= reduced_reg(19);

  inb1_N <= to_unsigned(16#0000#, 14);

  reduced_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg_1 <= (OTHERS => to_unsigned(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        reduced_reg_1(0) <= inb1_N;
        reduced_reg_1(1 TO 19) <= reduced_reg_1(0 TO 18);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  inb1_N_1 <= reduced_reg_1(19);

  p18_output : PROCESS (inb1_N_1, inb1_P_1, rRam1, rRam1_1, rRam1_10, rRam1_11, rRam1_12, rRam1_13,
       rRam1_14, rRam1_15, rRam1_2, rRam1_3, rRam1_4, rRam1_5, rRam1_6, rRam1_7,
       rRam1_8, rRam1_9, xg_17)
    VARIABLE inb2 : signed(13 DOWNTO 0);
    VARIABLE inb1_P1 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_N1 : unsigned(13 DOWNTO 0);
    VARIABLE k_0 : unsigned(3 DOWNTO 0);
    VARIABLE inb1_p_0 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_0 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_11 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_11 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_2 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_2 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_3 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_3 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_4 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_4 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_5 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_5 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_6 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_6 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_7 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_7 : unsigned(13 DOWNTO 0);
    VARIABLE add_temp : vector_of_signed32(0 TO 7);
    VARIABLE add_cast : vector_of_signed32(0 TO 7);
    VARIABLE sub_cast : vector_of_signed17(0 TO 7);
    VARIABLE sub_cast_0 : vector_of_signed17(0 TO 7);
    VARIABLE sub_temp : vector_of_signed17(0 TO 7);
    VARIABLE add_temp_0 : vector_of_unsigned5(0 TO 7);
    VARIABLE sub_cast_1 : vector_of_signed32(0 TO 7);
    VARIABLE mul_temp : vector_of_signed31(0 TO 7);
    VARIABLE add_cast_0 : vector_of_signed32(0 TO 7);
    VARIABLE add_temp_1 : vector_of_signed32(0 TO 7);
  BEGIN
    inb1_N1 := inb1_N_1;
    inb1_P1 := inb1_P_1;
    inb2 := to_signed(16#0000#, 14);

    FOR k IN 0 TO 7 LOOP
      add_temp(k) := to_signed(k + 1, 32);
      k_0 := unsigned(add_temp(k)(3 DOWNTO 0));
      IF k_0 = to_unsigned(16#8#, 4) THEN 
        inb1_n_0 := rRam1;
        inb1_p_0 := rRam1_1;
      ELSE 
        inb1_n_0 := inb1_N1;
        inb1_p_0 := inb1_P1;
      END IF;
      IF k_0 = to_unsigned(16#7#, 4) THEN 
        inb1_n_11 := rRam1_2;
        inb1_p_11 := rRam1_3;
      ELSE 
        inb1_n_11 := inb1_n_0;
        inb1_p_11 := inb1_p_0;
      END IF;
      IF k_0 = to_unsigned(16#6#, 4) THEN 
        inb1_n_2 := rRam1_4;
        inb1_p_2 := rRam1_5;
      ELSE 
        inb1_n_2 := inb1_n_11;
        inb1_p_2 := inb1_p_11;
      END IF;
      IF k_0 = to_unsigned(16#5#, 4) THEN 
        inb1_n_3 := rRam1_6;
        inb1_p_3 := rRam1_7;
      ELSE 
        inb1_n_3 := inb1_n_2;
        inb1_p_3 := inb1_p_2;
      END IF;
      IF k_0 = to_unsigned(16#4#, 4) THEN 
        inb1_n_4 := rRam1_8;
        inb1_p_4 := rRam1_9;
      ELSE 
        inb1_n_4 := inb1_n_3;
        inb1_p_4 := inb1_p_3;
      END IF;
      IF k_0 = to_unsigned(16#3#, 4) THEN 
        inb1_n_5 := rRam1_10;
        inb1_p_5 := rRam1_11;
      ELSE 
        inb1_n_5 := inb1_n_4;
        inb1_p_5 := inb1_p_4;
      END IF;
      IF k_0 = to_unsigned(16#2#, 4) THEN 
        inb1_n_6 := rRam1_12;
        inb1_p_6 := rRam1_13;
      ELSE 
        inb1_n_6 := inb1_n_5;
        inb1_p_6 := inb1_p_5;
      END IF;
      IF k_0 = to_unsigned(16#1#, 4) THEN 
        inb1_n_7 := rRam1_14;
        inb1_p_7 := rRam1_15;
      ELSE 
        inb1_n_7 := inb1_n_6;
        inb1_p_7 := inb1_p_6;
      END IF;
      inb1_N1 := inb1_n_7;
      inb1_P1 := inb1_p_7;
      add_cast(k) := resize(inb2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
      sub_cast(k) := signed(resize(inb1_p_7, 17));
      sub_cast_0(k) := signed(resize(inb1_n_7, 17));
      sub_temp(k) := sub_cast(k) - sub_cast_0(k);
      add_temp_0(k) := resize(k_0, 5) + to_unsigned(16#09#, 5);
      sub_cast_1(k) := signed(resize(add_temp_0(k), 32));
      mul_temp(k) := sub_temp(k) * xg_17(to_integer(sub_cast_1(k) - 1));
      add_cast_0(k) := resize(mul_temp(k), 32);
      add_temp_1(k) := add_cast(k) + add_cast_0(k);
      inb2 := add_temp_1(k)(28 DOWNTO 15);
    END LOOP;

    inb2_1 <= inb2;
  END PROCESS p18_output;


  ----------------------
  p12drow_1_mul_temp <= inb2_1 * to_signed(16#2C71#, 15);
  p12drow_1_cast <= p12drow_1_mul_temp(27 DOWNTO 0);
  drow_1_1 <= p12drow_1_cast(27 DOWNTO 14);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      drow_1_tmp <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        drow_1_tmp <= drow_1_1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  drow_1 <= std_logic_vector(drow_1_tmp);

  slicedInput_189 <= mergedOutput(91 DOWNTO 78);

  writeData_2 <= signed(slicedInput_189);

  wr_data_2(0) <= writeData_2;
  wr_data_2(1) <= writeData_2;
  wr_data_2(2) <= writeData_2;
  wr_data_2(3) <= writeData_2;
  wr_data_2(4) <= writeData_2;
  wr_data_2(5) <= writeData_2;
  wr_data_2(6) <= writeData_2;
  wr_data_2(7) <= writeData_2;
  wr_data_2(8) <= writeData_2;
  wr_data_2(9) <= writeData_2;
  wr_data_2(10) <= writeData_2;
  wr_data_2(11) <= writeData_2;
  wr_data_2(12) <= writeData_2;
  wr_data_2(13) <= writeData_2;
  wr_data_2(14) <= writeData_2;
  wr_data_2(15) <= writeData_2;
  wr_data_2(16) <= writeData_2;
  wr_data_2(17) <= writeData_2;

  wr_data_overclock18_1 <= wr_data_2;

  ratechange_splitcomp_out0_10 <= wr_data_overclock18_1(0);

  ratechange_splitcomp_out1_10 <= wr_data_overclock18_1(1);

  ratechange_splitcomp_out2_10 <= wr_data_overclock18_1(2);

  ratechange_splitcomp_out3_10 <= wr_data_overclock18_1(3);

  ratechange_splitcomp_out4_10 <= wr_data_overclock18_1(4);

  ratechange_splitcomp_out5_10 <= wr_data_overclock18_1(5);

  ratechange_splitcomp_out6_10 <= wr_data_overclock18_1(6);

  ratechange_splitcomp_out7_10 <= wr_data_overclock18_1(7);

  ratechange_splitcomp_out8_10 <= wr_data_overclock18_1(8);

  ratechange_splitcomp_out9_10 <= wr_data_overclock18_1(9);

  ratechange_splitcomp_out10_10 <= wr_data_overclock18_1(10);

  ratechange_splitcomp_out11_10 <= wr_data_overclock18_1(11);

  ratechange_splitcomp_out12_10 <= wr_data_overclock18_1(12);

  ratechange_splitcomp_out13_10 <= wr_data_overclock18_1(13);

  ratechange_splitcomp_out14_10 <= wr_data_overclock18_1(14);

  ratechange_splitcomp_out15_10 <= wr_data_overclock18_1(15);

  ratechange_splitcomp_out16_10 <= wr_data_overclock18_1(16);

  ratechange_splitcomp_out17_10 <= wr_data_overclock18_1(17);

  
  wr_data_3 <= ratechange_splitcomp_out0_10 WHEN counterSig = to_unsigned(16#00#, 5) ELSE
      ratechange_splitcomp_out1_10 WHEN counterSig = to_unsigned(16#01#, 5) ELSE
      ratechange_splitcomp_out2_10 WHEN counterSig = to_unsigned(16#02#, 5) ELSE
      ratechange_splitcomp_out3_10 WHEN counterSig = to_unsigned(16#03#, 5) ELSE
      ratechange_splitcomp_out4_10 WHEN counterSig = to_unsigned(16#04#, 5) ELSE
      ratechange_splitcomp_out5_10 WHEN counterSig = to_unsigned(16#05#, 5) ELSE
      ratechange_splitcomp_out6_10 WHEN counterSig = to_unsigned(16#06#, 5) ELSE
      ratechange_splitcomp_out7_10 WHEN counterSig = to_unsigned(16#07#, 5) ELSE
      ratechange_splitcomp_out8_10 WHEN counterSig = to_unsigned(16#08#, 5) ELSE
      ratechange_splitcomp_out9_10 WHEN counterSig = to_unsigned(16#09#, 5) ELSE
      ratechange_splitcomp_out10_10 WHEN counterSig = to_unsigned(16#0A#, 5) ELSE
      ratechange_splitcomp_out11_10 WHEN counterSig = to_unsigned(16#0B#, 5) ELSE
      ratechange_splitcomp_out12_10 WHEN counterSig = to_unsigned(16#0C#, 5) ELSE
      ratechange_splitcomp_out13_10 WHEN counterSig = to_unsigned(16#0D#, 5) ELSE
      ratechange_splitcomp_out14_10 WHEN counterSig = to_unsigned(16#0E#, 5) ELSE
      ratechange_splitcomp_out15_10 WHEN counterSig = to_unsigned(16#0F#, 5) ELSE
      ratechange_splitcomp_out16_10 WHEN counterSig = to_unsigned(16#10#, 5) ELSE
      ratechange_splitcomp_out17_10;

  slicedInput_190 <= mergedOutput_15(33 DOWNTO 26);

  slicedInput_191 <= mergedOutput_15(17);

  
  rRam2_ram_wr_en_sig_2 <= '1' WHEN slicedInput_191 /= '0' ELSE
      '0';

  slicedInput_192 <= mergedOutput_15(25 DOWNTO 18);

  rd_data_signed <= signed(rd_data_2);

  slicedInput_193 <= mergedOutput_16(15 DOWNTO 8);

  rRam2_ram_demux_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rRam2_ram_demux_yreg <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rRam2_ram_demux_yreg <= rRam2_ram_demux_yreg_next;
      END IF;
    END IF;
  END PROCESS rRam2_ram_demux_process;

  rRam2_ram_demux_add_cast <= signed(resize(slicedInput_193, 32));
  rRam2_ram_demux_ctr1 <= rRam2_ram_demux_add_cast + 1;
  
  rRam2_ram_demux_ytmp(0) <= rd_data_signed WHEN rRam2_ram_demux_ctr1 = to_signed(16#00000001#, 32) ELSE
      rRam2_ram_demux_yreg(0);
  
  rRam2_ram_demux_ytmp(1) <= rd_data_signed WHEN rRam2_ram_demux_ctr1 = to_signed(16#00000002#, 32) ELSE
      rRam2_ram_demux_yreg(1);
  
  rRam2_ram_demux_ytmp(2) <= rd_data_signed WHEN rRam2_ram_demux_ctr1 = to_signed(16#00000003#, 32) ELSE
      rRam2_ram_demux_yreg(2);
  
  rRam2_ram_demux_ytmp(3) <= rd_data_signed WHEN rRam2_ram_demux_ctr1 = to_signed(16#00000004#, 32) ELSE
      rRam2_ram_demux_yreg(3);
  
  rRam2_ram_demux_ytmp(4) <= rd_data_signed WHEN rRam2_ram_demux_ctr1 = to_signed(16#00000005#, 32) ELSE
      rRam2_ram_demux_yreg(4);
  
  rRam2_ram_demux_ytmp(5) <= rd_data_signed WHEN rRam2_ram_demux_ctr1 = to_signed(16#00000006#, 32) ELSE
      rRam2_ram_demux_yreg(5);
  
  rRam2_ram_demux_ytmp(6) <= rd_data_signed WHEN rRam2_ram_demux_ctr1 = to_signed(16#00000007#, 32) ELSE
      rRam2_ram_demux_yreg(6);
  
  rRam2_ram_demux_ytmp(7) <= rd_data_signed WHEN rRam2_ram_demux_ctr1 = to_signed(16#00000008#, 32) ELSE
      rRam2_ram_demux_yreg(7);
  
  rRam2_ram_demux_ytmp(8) <= rd_data_signed WHEN rRam2_ram_demux_ctr1 = to_signed(16#00000009#, 32) ELSE
      rRam2_ram_demux_yreg(8);
  
  rRam2_ram_demux_ytmp(9) <= rd_data_signed WHEN rRam2_ram_demux_ctr1 = to_signed(16#0000000A#, 32) ELSE
      rRam2_ram_demux_yreg(9);
  
  rRam2_ram_demux_ytmp(10) <= rd_data_signed WHEN rRam2_ram_demux_ctr1 = to_signed(16#0000000B#, 32) ELSE
      rRam2_ram_demux_yreg(10);
  
  rRam2_ram_demux_ytmp(11) <= rd_data_signed WHEN rRam2_ram_demux_ctr1 = to_signed(16#0000000C#, 32) ELSE
      rRam2_ram_demux_yreg(11);
  
  rRam2_ram_demux_ytmp(12) <= rd_data_signed WHEN rRam2_ram_demux_ctr1 = to_signed(16#0000000D#, 32) ELSE
      rRam2_ram_demux_yreg(12);
  
  rRam2_ram_demux_ytmp(13) <= rd_data_signed WHEN rRam2_ram_demux_ctr1 = to_signed(16#0000000E#, 32) ELSE
      rRam2_ram_demux_yreg(13);
  
  rRam2_ram_demux_ytmp(14) <= rd_data_signed WHEN rRam2_ram_demux_ctr1 = to_signed(16#0000000F#, 32) ELSE
      rRam2_ram_demux_yreg(14);
  
  rRam2_ram_demux_ytmp(15) <= rd_data_signed WHEN rRam2_ram_demux_ctr1 = to_signed(16#00000010#, 32) ELSE
      rRam2_ram_demux_yreg(15);
  
  rRam2_ram_demux_ytmp(16) <= rd_data_signed WHEN rRam2_ram_demux_ctr1 = to_signed(16#00000011#, 32) ELSE
      rRam2_ram_demux_yreg(16);
  
  rRam2_ram_demux_ytmp(17) <= rd_data_signed WHEN rRam2_ram_demux_ctr1 = to_signed(16#00000012#, 32) ELSE
      rRam2_ram_demux_yreg(17);
  rRam2_ram_demux_yreg_next(0) <= rRam2_ram_demux_ytmp(0);
  rd_data_overclock18_1(0) <= rRam2_ram_demux_ytmp(0);
  rRam2_ram_demux_yreg_next(1) <= rRam2_ram_demux_ytmp(1);
  rd_data_overclock18_1(1) <= rRam2_ram_demux_ytmp(1);
  rRam2_ram_demux_yreg_next(2) <= rRam2_ram_demux_ytmp(2);
  rd_data_overclock18_1(2) <= rRam2_ram_demux_ytmp(2);
  rRam2_ram_demux_yreg_next(3) <= rRam2_ram_demux_ytmp(3);
  rd_data_overclock18_1(3) <= rRam2_ram_demux_ytmp(3);
  rRam2_ram_demux_yreg_next(4) <= rRam2_ram_demux_ytmp(4);
  rd_data_overclock18_1(4) <= rRam2_ram_demux_ytmp(4);
  rRam2_ram_demux_yreg_next(5) <= rRam2_ram_demux_ytmp(5);
  rd_data_overclock18_1(5) <= rRam2_ram_demux_ytmp(5);
  rRam2_ram_demux_yreg_next(6) <= rRam2_ram_demux_ytmp(6);
  rd_data_overclock18_1(6) <= rRam2_ram_demux_ytmp(6);
  rRam2_ram_demux_yreg_next(7) <= rRam2_ram_demux_ytmp(7);
  rd_data_overclock18_1(7) <= rRam2_ram_demux_ytmp(7);
  rRam2_ram_demux_yreg_next(8) <= rRam2_ram_demux_ytmp(8);
  rd_data_overclock18_1(8) <= rRam2_ram_demux_ytmp(8);
  rRam2_ram_demux_yreg_next(9) <= rRam2_ram_demux_ytmp(9);
  rd_data_overclock18_1(9) <= rRam2_ram_demux_ytmp(9);
  rRam2_ram_demux_yreg_next(10) <= rRam2_ram_demux_ytmp(10);
  rd_data_overclock18_1(10) <= rRam2_ram_demux_ytmp(10);
  rRam2_ram_demux_yreg_next(11) <= rRam2_ram_demux_ytmp(11);
  rd_data_overclock18_1(11) <= rRam2_ram_demux_ytmp(11);
  rRam2_ram_demux_yreg_next(12) <= rRam2_ram_demux_ytmp(12);
  rd_data_overclock18_1(12) <= rRam2_ram_demux_ytmp(12);
  rRam2_ram_demux_yreg_next(13) <= rRam2_ram_demux_ytmp(13);
  rd_data_overclock18_1(13) <= rRam2_ram_demux_ytmp(13);
  rRam2_ram_demux_yreg_next(14) <= rRam2_ram_demux_ytmp(14);
  rd_data_overclock18_1(14) <= rRam2_ram_demux_ytmp(14);
  rRam2_ram_demux_yreg_next(15) <= rRam2_ram_demux_ytmp(15);
  rd_data_overclock18_1(15) <= rRam2_ram_demux_ytmp(15);
  rRam2_ram_demux_yreg_next(16) <= rRam2_ram_demux_ytmp(16);
  rd_data_overclock18_1(16) <= rRam2_ram_demux_ytmp(16);
  rRam2_ram_demux_yreg_next(17) <= rRam2_ram_demux_ytmp(17);
  rd_data_overclock18_1(17) <= rRam2_ram_demux_ytmp(17);

  rd_data_downsample18_bypass_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_data_downsample18_bypass_reg_1 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_1 = '1' THEN
        rd_data_downsample18_bypass_reg_1 <= rd_data_overclock18_1;
      END IF;
    END IF;
  END PROCESS rd_data_downsample18_bypass_1_process;

  
  rd_data_3 <= rd_data_overclock18_1 WHEN enb_1_18_1 = '1' ELSE
      rd_data_downsample18_bypass_reg_1;

  rRam2 <= rd_data_3(1);

  rRam2_1 <= rd_data_3(7);

  rRam2_2 <= rd_data_3(2);

  rRam2_3 <= rd_data_3(9);

  rRam2_4 <= rd_data_3(3);

  rRam2_5 <= rd_data_3(13);

  rRam2_6 <= rd_data_3(4);

  rRam2_7 <= rd_data_3(12);

  rRam2_8 <= rd_data_3(5);

  rRam2_9 <= rd_data_3(11);

  rRam2_10 <= rd_data_3(6);

  rRam2_11 <= rd_data_3(14);

  rRam2_12 <= rd_data_3(10);

  rRam2_13 <= rd_data_3(15);

  rRam2_14 <= rd_data_3(8);

  rRam2_15 <= rd_data_3(16);

  delayIn0_1 <= g_16(0);

  delayIn1_1 <= g_16(1);

  delayIn2_1 <= g_16(2);

  delayIn3_1 <= g_16(3);

  delayIn4_1 <= g_16(4);

  delayIn5_1 <= g_16(5);

  delayIn6_1 <= g_16(6);

  delayIn7_1 <= g_16(7);

  delayIn8_1 <= g_16(8);

  mergedInput_27 <= delayIn0_1 & delayIn1_1 & delayIn2_1 & delayIn3_1 & delayIn4_1 & delayIn5_1 & delayIn6_1 & delayIn7_1 & delayIn8_1;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_27 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_27 <= mergedInput_27;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_27_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_27 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_27 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_27 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_27 <= mergedDelay_waddr_27 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_27_process;


  mergedDelay_wrenb_27 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_27 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_27 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_27 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_27 <= mergedDelay_raddr_27 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_27_process;


  mergedDelay_regout_unsigned_27 <= unsigned(mergedDelay_regout_27);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_27 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_27 <= mergedDelay_regout_unsigned_27;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_27_process;


  p174xxg_output : PROCESS 
  BEGIN
    xxg <= (OTHERS => to_unsigned(16#0000#, 14));
    xxg(0) <= to_unsigned(16#0000#, 14);
    WAIT;
  END PROCESS p174xxg_output;


  p180xxg_output : PROCESS (xxg)
  BEGIN
    xxg_1 <= xxg;
    xxg_1(1) <= to_unsigned(16#0000#, 14);
  END PROCESS p180xxg_output;


  p186xxg_output : PROCESS (xxg_1)
  BEGIN
    xxg_2 <= xxg_1;
    xxg_2(2) <= to_unsigned(16#0001#, 14);
  END PROCESS p186xxg_output;


  p192xxg_output : PROCESS (xxg_2)
  BEGIN
    xxg_3 <= xxg_2;
    xxg_3(3) <= to_unsigned(16#002E#, 14);
  END PROCESS p192xxg_output;


  p198xxg_output : PROCESS (xxg_3)
  BEGIN
    xxg_4 <= xxg_3;
    xxg_4(4) <= to_unsigned(16#02A1#, 14);
  END PROCESS p198xxg_output;


  p204xxg_output : PROCESS (xxg_4)
  BEGIN
    xxg_5 <= xxg_4;
    xxg_5(5) <= to_unsigned(16#10D3#, 14);
  END PROCESS p204xxg_output;


  p210xxg_output : PROCESS (xxg_5)
  BEGIN
    xxg_6 <= xxg_5;
    xxg_6(6) <= to_unsigned(16#2A71#, 14);
  END PROCESS p210xxg_output;


  p216xxg_output : PROCESS (xxg_6)
  BEGIN
    xxg_7 <= xxg_6;
    xxg_7(7) <= to_unsigned(16#1E12#, 14);
  END PROCESS p216xxg_output;


  p222xxg_output : PROCESS (xxg_7)
  BEGIN
    xxg_8 <= xxg_7;
    xxg_8(8) <= to_unsigned(16#0000#, 14);
  END PROCESS p222xxg_output;


  p228xxg_output : PROCESS (xxg_8)
  BEGIN
    xxg_9 <= xxg_8;
    xxg_9(9) <= to_unsigned(16#1E12#, 14);
  END PROCESS p228xxg_output;


  p234xxg_output : PROCESS (xxg_9)
  BEGIN
    xxg_10 <= xxg_9;
    xxg_10(10) <= to_unsigned(16#2A71#, 14);
  END PROCESS p234xxg_output;


  p240xxg_output : PROCESS (xxg_10)
  BEGIN
    xxg_11 <= xxg_10;
    xxg_11(11) <= to_unsigned(16#10D3#, 14);
  END PROCESS p240xxg_output;


  p246xxg_output : PROCESS (xxg_11)
  BEGIN
    xxg_12 <= xxg_11;
    xxg_12(12) <= to_unsigned(16#02A1#, 14);
  END PROCESS p246xxg_output;


  p252xxg_output : PROCESS (xxg_12)
  BEGIN
    xxg_13 <= xxg_12;
    xxg_13(13) <= to_unsigned(16#002E#, 14);
  END PROCESS p252xxg_output;


  p258xxg_output : PROCESS (xxg_13)
  BEGIN
    xxg_14 <= xxg_13;
    xxg_14(14) <= to_unsigned(16#0001#, 14);
  END PROCESS p258xxg_output;


  p264xxg_output : PROCESS (xxg_14)
  BEGIN
    xxg_15 <= xxg_14;
    xxg_15(15) <= to_unsigned(16#0000#, 14);
  END PROCESS p264xxg_output;


  p270xxg_output : PROCESS (xxg_15)
  BEGIN
    xxg_16 <= xxg_15;
    xxg_16(16) <= to_unsigned(16#0000#, 14);
  END PROCESS p270xxg_output;


  delayIn90 <= xxg_16(90);

  delayIn91 <= xxg_16(91);

  delayIn92 <= xxg_16(92);

  delayIn9_1 <= g_16(9);

  delayIn10_1 <= g_16(10);

  delayIn11_1 <= g_16(11);

  delayIn12_1 <= g_16(12);

  delayIn13_1 <= g_16(13);

  delayIn14_1 <= g_16(14);

  mergedInput_28 <= delayIn90 & delayIn91 & delayIn92 & delayIn9_1 & delayIn10_1 & delayIn11_1 & delayIn12_1 & delayIn13_1 & delayIn14_1;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_28 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_28 <= mergedInput_28;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_28_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_28 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_28 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_28 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_28 <= mergedDelay_waddr_28 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_28_process;


  mergedDelay_wrenb_28 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_28 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_28 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_28 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_28 <= mergedDelay_raddr_28 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_28_process;


  mergedDelay_regout_unsigned_28 <= unsigned(mergedDelay_regout_28);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_28 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_28 <= mergedDelay_regout_unsigned_28;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_28_process;


  delayIn15_1 <= g_16(15);

  delayIn16_1 <= g_16(16);

  delayIn17_1 <= g_16(17);

  delayIn18_1 <= g_16(18);

  delayIn19_1 <= g_16(19);

  delayIn20_1 <= g_16(20);

  delayIn21_1 <= g_16(21);

  delayIn22_1 <= g_16(22);

  delayIn23_1 <= g_16(23);

  mergedInput_29 <= delayIn15_1 & delayIn16_1 & delayIn17_1 & delayIn18_1 & delayIn19_1 & delayIn20_1 & delayIn21_1 & delayIn22_1 & delayIn23_1;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_29 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_29 <= mergedInput_29;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_29_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_29 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_29 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_29 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_29 <= mergedDelay_waddr_29 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_29_process;


  mergedDelay_wrenb_29 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_29 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_29 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_29 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_29 <= mergedDelay_raddr_29 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_29_process;


  mergedDelay_regout_unsigned_29 <= unsigned(mergedDelay_regout_29);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_29 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_29 <= mergedDelay_regout_unsigned_29;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_29_process;


  delayIn24_1 <= g_16(24);

  delayIn25_1 <= g_16(25);

  delayIn26_1 <= g_16(26);

  delayIn27_1 <= g_16(27);

  delayIn28_1 <= g_16(28);

  delayIn29_1 <= g_16(29);

  delayIn30_1 <= g_16(30);

  delayIn31_1 <= g_16(31);

  delayIn32_1 <= g_16(32);

  mergedInput_30 <= delayIn24_1 & delayIn25_1 & delayIn26_1 & delayIn27_1 & delayIn28_1 & delayIn29_1 & delayIn30_1 & delayIn31_1 & delayIn32_1;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_30 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_30 <= mergedInput_30;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_30_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_30 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_30 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_30 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_30 <= mergedDelay_waddr_30 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_30_process;


  mergedDelay_wrenb_30 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_30 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_30 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_30 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_30 <= mergedDelay_raddr_30 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_30_process;


  mergedDelay_regout_unsigned_30 <= unsigned(mergedDelay_regout_30);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_30 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_30 <= mergedDelay_regout_unsigned_30;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_30_process;


  delayIn33_1 <= g_16(33);

  delayIn34_1 <= g_16(34);

  delayIn35_1 <= g_16(35);

  delayIn36_1 <= g_16(36);

  delayIn37_1 <= g_16(37);

  delayIn38_1 <= g_16(38);

  delayIn39_1 <= g_16(39);

  delayIn40_1 <= g_16(40);

  delayIn41_1 <= g_16(41);

  mergedInput_31 <= delayIn33_1 & delayIn34_1 & delayIn35_1 & delayIn36_1 & delayIn37_1 & delayIn38_1 & delayIn39_1 & delayIn40_1 & delayIn41_1;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_31 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_31 <= mergedInput_31;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_31_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_31 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_31 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_31 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_31 <= mergedDelay_waddr_31 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_31_process;


  mergedDelay_wrenb_31 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_31 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_31 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_31 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_31 <= mergedDelay_raddr_31 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_31_process;


  mergedDelay_regout_unsigned_31 <= unsigned(mergedDelay_regout_31);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_31 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_31 <= mergedDelay_regout_unsigned_31;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_31_process;


  delayIn42_1 <= g_16(42);

  delayIn43_1 <= g_16(43);

  delayIn44_1 <= g_16(44);

  delayIn45_1 <= g_16(45);

  delayIn46_1 <= g_16(46);

  delayIn47_1 <= g_16(47);

  delayIn48_1 <= g_16(48);

  delayIn49_1 <= g_16(49);

  delayIn50_1 <= g_16(50);

  mergedInput_32 <= delayIn42_1 & delayIn43_1 & delayIn44_1 & delayIn45_1 & delayIn46_1 & delayIn47_1 & delayIn48_1 & delayIn49_1 & delayIn50_1;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_32 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_32 <= mergedInput_32;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_32_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_32 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_32 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_32 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_32 <= mergedDelay_waddr_32 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_32_process;


  mergedDelay_wrenb_32 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_32 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_32 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_32 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_32 <= mergedDelay_raddr_32 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_32_process;


  mergedDelay_regout_unsigned_32 <= unsigned(mergedDelay_regout_32);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_32 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_32 <= mergedDelay_regout_unsigned_32;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_32_process;


  slicedInput_194 <= mergedOutput_27(125 DOWNTO 112);

  delayOut0_4 <= slicedInput_194;

  slicedInput_195 <= mergedOutput_27(111 DOWNTO 98);

  delayOut1_4 <= slicedInput_195;

  slicedInput_196 <= mergedOutput_27(97 DOWNTO 84);

  delayOut2_4 <= slicedInput_196;

  slicedInput_197 <= mergedOutput_27(83 DOWNTO 70);

  delayOut3_4 <= slicedInput_197;

  slicedInput_198 <= mergedOutput_27(69 DOWNTO 56);

  delayOut4_4 <= slicedInput_198;

  slicedInput_199 <= mergedOutput_27(55 DOWNTO 42);

  delayOut5_4 <= slicedInput_199;

  slicedInput_200 <= mergedOutput_27(41 DOWNTO 28);

  delayOut6_4 <= slicedInput_200;

  slicedInput_201 <= mergedOutput_27(27 DOWNTO 14);

  delayOut7_4 <= slicedInput_201;

  slicedInput_202 <= mergedOutput_27(13 DOWNTO 0);

  delayOut8_4 <= slicedInput_202;

  slicedInput_203 <= mergedOutput_28(83 DOWNTO 70);

  delayOut9_4 <= slicedInput_203;

  slicedInput_204 <= mergedOutput_28(69 DOWNTO 56);

  delayOut10_4 <= slicedInput_204;

  slicedInput_205 <= mergedOutput_28(55 DOWNTO 42);

  delayOut11_4 <= slicedInput_205;

  slicedInput_206 <= mergedOutput_28(41 DOWNTO 28);

  delayOut12_4 <= slicedInput_206;

  slicedInput_207 <= mergedOutput_28(27 DOWNTO 14);

  delayOut13_4 <= slicedInput_207;

  slicedInput_208 <= mergedOutput_28(13 DOWNTO 0);

  delayOut14_4 <= slicedInput_208;

  slicedInput_209 <= mergedOutput_29(125 DOWNTO 112);

  delayOut15_4 <= slicedInput_209;

  slicedInput_210 <= mergedOutput_29(111 DOWNTO 98);

  delayOut16_4 <= slicedInput_210;

  slicedInput_211 <= mergedOutput_29(97 DOWNTO 84);

  delayOut17_4 <= slicedInput_211;

  slicedInput_212 <= mergedOutput_29(83 DOWNTO 70);

  delayOut18_1 <= slicedInput_212;

  slicedInput_213 <= mergedOutput_29(69 DOWNTO 56);

  delayOut19_1 <= slicedInput_213;

  slicedInput_214 <= mergedOutput_29(55 DOWNTO 42);

  delayOut20_1 <= slicedInput_214;

  slicedInput_215 <= mergedOutput_29(41 DOWNTO 28);

  delayOut21_1 <= slicedInput_215;

  slicedInput_216 <= mergedOutput_29(27 DOWNTO 14);

  delayOut22_1 <= slicedInput_216;

  slicedInput_217 <= mergedOutput_29(13 DOWNTO 0);

  delayOut23_1 <= slicedInput_217;

  slicedInput_218 <= mergedOutput_30(125 DOWNTO 112);

  delayOut24_1 <= slicedInput_218;

  slicedInput_219 <= mergedOutput_30(111 DOWNTO 98);

  delayOut25_1 <= slicedInput_219;

  slicedInput_220 <= mergedOutput_30(97 DOWNTO 84);

  delayOut26_1 <= slicedInput_220;

  slicedInput_221 <= mergedOutput_30(83 DOWNTO 70);

  delayOut27_1 <= slicedInput_221;

  slicedInput_222 <= mergedOutput_30(69 DOWNTO 56);

  delayOut28_1 <= slicedInput_222;

  slicedInput_223 <= mergedOutput_30(55 DOWNTO 42);

  delayOut29_1 <= slicedInput_223;

  slicedInput_224 <= mergedOutput_30(41 DOWNTO 28);

  delayOut30_1 <= slicedInput_224;

  slicedInput_225 <= mergedOutput_30(27 DOWNTO 14);

  delayOut31_1 <= slicedInput_225;

  slicedInput_226 <= mergedOutput_30(13 DOWNTO 0);

  delayOut32_1 <= slicedInput_226;

  slicedInput_227 <= mergedOutput_31(125 DOWNTO 112);

  delayOut33_1 <= slicedInput_227;

  slicedInput_228 <= mergedOutput_31(111 DOWNTO 98);

  delayOut34_1 <= slicedInput_228;

  slicedInput_229 <= mergedOutput_31(97 DOWNTO 84);

  delayOut35_1 <= slicedInput_229;

  slicedInput_230 <= mergedOutput_31(83 DOWNTO 70);

  delayOut36_1 <= slicedInput_230;

  slicedInput_231 <= mergedOutput_31(69 DOWNTO 56);

  delayOut37_1 <= slicedInput_231;

  slicedInput_232 <= mergedOutput_31(55 DOWNTO 42);

  delayOut38_1 <= slicedInput_232;

  slicedInput_233 <= mergedOutput_31(41 DOWNTO 28);

  delayOut39_1 <= slicedInput_233;

  slicedInput_234 <= mergedOutput_31(27 DOWNTO 14);

  delayOut40_1 <= slicedInput_234;

  slicedInput_235 <= mergedOutput_31(13 DOWNTO 0);

  delayOut41_1 <= slicedInput_235;

  slicedInput_236 <= mergedOutput_32(125 DOWNTO 112);

  delayOut42_1 <= slicedInput_236;

  slicedInput_237 <= mergedOutput_32(111 DOWNTO 98);

  delayOut43_1 <= slicedInput_237;

  slicedInput_238 <= mergedOutput_32(97 DOWNTO 84);

  delayOut44_1 <= slicedInput_238;

  slicedInput_239 <= mergedOutput_32(83 DOWNTO 70);

  delayOut45_1 <= slicedInput_239;

  slicedInput_240 <= mergedOutput_32(69 DOWNTO 56);

  delayOut46_1 <= slicedInput_240;

  slicedInput_241 <= mergedOutput_32(55 DOWNTO 42);

  delayOut47_1 <= slicedInput_241;

  slicedInput_242 <= mergedOutput_32(41 DOWNTO 28);

  delayOut48_1 <= slicedInput_242;

  slicedInput_243 <= mergedOutput_32(27 DOWNTO 14);

  delayOut49_1 <= slicedInput_243;

  slicedInput_244 <= mergedOutput_32(13 DOWNTO 0);

  delayOut50_1 <= slicedInput_244;

  slicedInput_245 <= mergedOutput_18(125 DOWNTO 112);

  delayOut51_1 <= slicedInput_245;

  slicedInput_246 <= mergedOutput_18(111 DOWNTO 98);

  delayOut52_1 <= slicedInput_246;

  slicedInput_247 <= mergedOutput_18(97 DOWNTO 84);

  delayOut53_1 <= slicedInput_247;

  slicedInput_248 <= mergedOutput_18(83 DOWNTO 70);

  delayOut54_1 <= slicedInput_248;

  slicedInput_249 <= mergedOutput_18(69 DOWNTO 56);

  delayOut55_1 <= slicedInput_249;

  slicedInput_250 <= mergedOutput_18(55 DOWNTO 42);

  delayOut56_1 <= slicedInput_250;

  slicedInput_251 <= mergedOutput_18(41 DOWNTO 28);

  delayOut57_1 <= slicedInput_251;

  slicedInput_252 <= mergedOutput_18(27 DOWNTO 14);

  delayOut58_1 <= slicedInput_252;

  g_17(0) <= delayOut0_4;
  g_17(1) <= delayOut1_4;
  g_17(2) <= delayOut2_4;
  g_17(3) <= delayOut3_4;
  g_17(4) <= delayOut4_4;
  g_17(5) <= delayOut5_4;
  g_17(6) <= delayOut6_4;
  g_17(7) <= delayOut7_4;
  g_17(8) <= delayOut8_4;
  g_17(9) <= delayOut9_4;
  g_17(10) <= delayOut10_4;
  g_17(11) <= delayOut11_4;
  g_17(12) <= delayOut12_4;
  g_17(13) <= delayOut13_4;
  g_17(14) <= delayOut14_4;
  g_17(15) <= delayOut15_4;
  g_17(16) <= delayOut16_4;
  g_17(17) <= delayOut17_4;
  g_17(18) <= delayOut18_1;
  g_17(19) <= delayOut19_1;
  g_17(20) <= delayOut20_1;
  g_17(21) <= delayOut21_1;
  g_17(22) <= delayOut22_1;
  g_17(23) <= delayOut23_1;
  g_17(24) <= delayOut24_1;
  g_17(25) <= delayOut25_1;
  g_17(26) <= delayOut26_1;
  g_17(27) <= delayOut27_1;
  g_17(28) <= delayOut28_1;
  g_17(29) <= delayOut29_1;
  g_17(30) <= delayOut30_1;
  g_17(31) <= delayOut31_1;
  g_17(32) <= delayOut32_1;
  g_17(33) <= delayOut33_1;
  g_17(34) <= delayOut34_1;
  g_17(35) <= delayOut35_1;
  g_17(36) <= delayOut36_1;
  g_17(37) <= delayOut37_1;
  g_17(38) <= delayOut38_1;
  g_17(39) <= delayOut39_1;
  g_17(40) <= delayOut40_1;
  g_17(41) <= delayOut41_1;
  g_17(42) <= delayOut42_1;
  g_17(43) <= delayOut43_1;
  g_17(44) <= delayOut44_1;
  g_17(45) <= delayOut45_1;
  g_17(46) <= delayOut46_1;
  g_17(47) <= delayOut47_1;
  g_17(48) <= delayOut48_1;
  g_17(49) <= delayOut49_1;
  g_17(50) <= delayOut50_1;
  g_17(51) <= delayOut51_1;
  g_17(52) <= delayOut52_1;
  g_17(53) <= delayOut53_1;
  g_17(54) <= delayOut54_1;
  g_17(55) <= delayOut55_1;
  g_17(56) <= delayOut56_1;
  g_17(57) <= delayOut57_1;
  g_17(58) <= delayOut58_1;

  rRam2_16 <= rd_data_3(17);

  p297inb3_mul_temp <= rRam2_16 * to_signed(16#2A8D#, 15);
  p297inb3_cast <= p297inb3_mul_temp(27 DOWNTO 0);
  inb3 <= resize(p297inb3_cast(27 DOWNTO 15), 14);

  inb2_P <= to_signed(16#0000#, 14);

  reduced_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg_2 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        reduced_reg_2(0) <= inb2_P;
        reduced_reg_2(1 TO 19) <= reduced_reg_2(0 TO 18);
      END IF;
    END IF;
  END PROCESS reduced_2_process;

  inb2_P_1 <= reduced_reg_2(19);

  inb2_N <= to_signed(16#0000#, 14);

  reduced_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg_3 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        reduced_reg_3(0) <= inb2_N;
        reduced_reg_3(1 TO 19) <= reduced_reg_3(0 TO 18);
      END IF;
    END IF;
  END PROCESS reduced_3_process;

  inb2_N_1 <= reduced_reg_3(19);

  p17_output : PROCESS (g_17, inb2_N_1, inb2_P_1, inb3, rRam2, rRam2_1, rRam2_10, rRam2_11, rRam2_12,
       rRam2_13, rRam2_14, rRam2_15, rRam2_2, rRam2_3, rRam2_4, rRam2_5,
       rRam2_6, rRam2_7, rRam2_8, rRam2_9)
    VARIABLE inb31 : signed(13 DOWNTO 0);
    VARIABLE inb2_P1 : signed(13 DOWNTO 0);
    VARIABLE inb2_N1 : signed(13 DOWNTO 0);
    VARIABLE k_01 : unsigned(3 DOWNTO 0);
    VARIABLE inb2_p_0 : signed(13 DOWNTO 0);
    VARIABLE inb2_n_0 : signed(13 DOWNTO 0);
    VARIABLE inb2_p_11 : signed(13 DOWNTO 0);
    VARIABLE inb2_n_11 : signed(13 DOWNTO 0);
    VARIABLE inb2_p_2 : signed(13 DOWNTO 0);
    VARIABLE inb2_n_2 : signed(13 DOWNTO 0);
    VARIABLE inb2_p_3 : signed(13 DOWNTO 0);
    VARIABLE inb2_n_3 : signed(13 DOWNTO 0);
    VARIABLE inb2_p_4 : signed(13 DOWNTO 0);
    VARIABLE inb2_n_4 : signed(13 DOWNTO 0);
    VARIABLE inb2_p_5 : signed(13 DOWNTO 0);
    VARIABLE inb2_n_5 : signed(13 DOWNTO 0);
    VARIABLE inb2_p_6 : signed(13 DOWNTO 0);
    VARIABLE inb2_n_6 : signed(13 DOWNTO 0);
    VARIABLE inb2_p_7 : signed(13 DOWNTO 0);
    VARIABLE inb2_n_7 : signed(13 DOWNTO 0);
    VARIABLE add_temp1 : vector_of_signed32(0 TO 7);
    VARIABLE add_cast1 : vector_of_signed31(0 TO 7);
    VARIABLE add_cast_01 : vector_of_signed15(0 TO 7);
    VARIABLE add_cast_1 : vector_of_signed15(0 TO 7);
    VARIABLE add_temp_01 : vector_of_signed15(0 TO 7);
    VARIABLE add_temp_11 : vector_of_unsigned5(0 TO 7);
    VARIABLE sub_cast1 : vector_of_signed32(0 TO 7);
    VARIABLE cast : vector_of_unsigned14(0 TO 7);
    VARIABLE cast_0 : vector_of_signed15(0 TO 7);
    VARIABLE mul_temp1 : vector_of_signed30(0 TO 7);
    VARIABLE add_cast_2 : vector_of_signed29(0 TO 7);
    VARIABLE add_cast_3 : vector_of_signed31(0 TO 7);
    VARIABLE add_temp_2 : vector_of_signed31(0 TO 7);
  BEGIN
    inb2_N1 := inb2_N_1;
    inb2_P1 := inb2_P_1;
    inb31 := inb3;

    FOR k1 IN 0 TO 7 LOOP
      add_temp1(k1) := to_signed(k1 + 1, 32);
      k_01 := unsigned(add_temp1(k1)(3 DOWNTO 0));
      IF k_01 = to_unsigned(16#8#, 4) THEN 
        inb2_n_0 := rRam2;
        inb2_p_0 := rRam2_1;
      ELSE 
        inb2_n_0 := inb2_N1;
        inb2_p_0 := inb2_P1;
      END IF;
      IF k_01 = to_unsigned(16#7#, 4) THEN 
        inb2_n_11 := rRam2_2;
        inb2_p_11 := rRam2_3;
      ELSE 
        inb2_n_11 := inb2_n_0;
        inb2_p_11 := inb2_p_0;
      END IF;
      IF k_01 = to_unsigned(16#6#, 4) THEN 
        inb2_n_2 := rRam2_4;
        inb2_p_2 := rRam2_5;
      ELSE 
        inb2_n_2 := inb2_n_11;
        inb2_p_2 := inb2_p_11;
      END IF;
      IF k_01 = to_unsigned(16#5#, 4) THEN 
        inb2_n_3 := rRam2_6;
        inb2_p_3 := rRam2_7;
      ELSE 
        inb2_n_3 := inb2_n_2;
        inb2_p_3 := inb2_p_2;
      END IF;
      IF k_01 = to_unsigned(16#4#, 4) THEN 
        inb2_n_4 := rRam2_8;
        inb2_p_4 := rRam2_9;
      ELSE 
        inb2_n_4 := inb2_n_3;
        inb2_p_4 := inb2_p_3;
      END IF;
      IF k_01 = to_unsigned(16#3#, 4) THEN 
        inb2_n_5 := rRam2_10;
        inb2_p_5 := rRam2_11;
      ELSE 
        inb2_n_5 := inb2_n_4;
        inb2_p_5 := inb2_p_4;
      END IF;
      IF k_01 = to_unsigned(16#2#, 4) THEN 
        inb2_n_6 := rRam2_12;
        inb2_p_6 := rRam2_13;
      ELSE 
        inb2_n_6 := inb2_n_5;
        inb2_p_6 := inb2_p_5;
      END IF;
      IF k_01 = to_unsigned(16#1#, 4) THEN 
        inb2_n_7 := rRam2_14;
        inb2_p_7 := rRam2_15;
      ELSE 
        inb2_n_7 := inb2_n_6;
        inb2_p_7 := inb2_p_6;
      END IF;
      inb2_N1 := inb2_n_7;
      inb2_P1 := inb2_p_7;
      add_cast1(k1) := resize(inb31 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 31);
      add_cast_01(k1) := resize(inb2_p_7, 15);
      add_cast_1(k1) := resize(inb2_n_7, 15);
      add_temp_01(k1) := add_cast_01(k1) + add_cast_1(k1);
      add_temp_11(k1) := resize(k_01, 5) + to_unsigned(16#09#, 5);
      sub_cast1(k1) := signed(resize(add_temp_11(k1), 32));
      cast(k1) := g_17(to_integer(sub_cast1(k1) - 1))(12 DOWNTO 0) & '0';
      cast_0(k1) := signed(resize(cast(k1), 15));
      mul_temp1(k1) := add_temp_01(k1) * cast_0(k1);
      add_cast_2(k1) := mul_temp1(k1)(28 DOWNTO 0);
      add_cast_3(k1) := resize(add_cast_2(k1), 31);
      add_temp_2(k1) := add_cast1(k1) + add_cast_3(k1);
      inb31 := add_temp_2(k1)(29 DOWNTO 16);
    END LOOP;

    inb3_1 <= inb31;
  END PROCESS p17_output;


  p11drow_2_mul_temp <= inb3_1 * to_signed(16#2C71#, 15);
  p11drow_2_cast <= p11drow_2_mul_temp(27 DOWNTO 0);
  drow_2_1 <= p11drow_2_cast(26 DOWNTO 13);

  delayMatch_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      drow_2_tmp <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        drow_2_tmp <= drow_2_1;
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;


  drow_2 <= std_logic_vector(drow_2_tmp);

  rRam1_16 <= rd_data_1(17);

  ----------------------
  p295inb1_mul_temp <= rRam1_16 * to_unsigned(16#2A8D#, 14);
  inb1 <= resize(p295inb1_mul_temp(27 DOWNTO 15), 14);

  p19_output : PROCESS (g_17, inb1, inb1_N_1, inb1_P_1, rRam1, rRam1_1, rRam1_10, rRam1_11, rRam1_12,
       rRam1_13, rRam1_14, rRam1_15, rRam1_2, rRam1_3, rRam1_4, rRam1_5,
       rRam1_6, rRam1_7, rRam1_8, rRam1_9)
    VARIABLE inb11 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_P2 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_N2 : unsigned(13 DOWNTO 0);
    VARIABLE k_02 : unsigned(3 DOWNTO 0);
    VARIABLE inb1_p_01 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_01 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_12 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_12 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_21 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_21 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_31 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_31 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_41 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_41 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_51 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_51 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_61 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_61 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_71 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_71 : unsigned(13 DOWNTO 0);
    VARIABLE add_temp2 : vector_of_signed32(0 TO 7);
    VARIABLE add_cast2 : vector_of_unsigned30(0 TO 7);
    VARIABLE add_cast_02 : vector_of_unsigned15(0 TO 7);
    VARIABLE add_cast_11 : vector_of_unsigned15(0 TO 7);
    VARIABLE add_temp_02 : vector_of_unsigned15(0 TO 7);
    VARIABLE cast1 : vector_of_unsigned14(0 TO 7);
    VARIABLE add_temp_12 : vector_of_unsigned5(0 TO 7);
    VARIABLE sub_cast2 : vector_of_signed32(0 TO 7);
    VARIABLE cast_01 : vector_of_unsigned14(0 TO 7);
    VARIABLE mul_temp2 : vector_of_unsigned28(0 TO 7);
    VARIABLE add_cast_21 : vector_of_unsigned30(0 TO 7);
    VARIABLE add_temp_21 : vector_of_unsigned30(0 TO 7);
  BEGIN
    inb1_N2 := inb1_N_1;
    inb1_P2 := inb1_P_1;
    inb11 := inb1;

    FOR k2 IN 0 TO 7 LOOP
      add_temp2(k2) := to_signed(k2 + 1, 32);
      k_02 := unsigned(add_temp2(k2)(3 DOWNTO 0));
      IF k_02 = to_unsigned(16#8#, 4) THEN 
        inb1_n_01 := rRam1;
        inb1_p_01 := rRam1_1;
      ELSE 
        inb1_n_01 := inb1_N2;
        inb1_p_01 := inb1_P2;
      END IF;
      IF k_02 = to_unsigned(16#7#, 4) THEN 
        inb1_n_12 := rRam1_2;
        inb1_p_12 := rRam1_3;
      ELSE 
        inb1_n_12 := inb1_n_01;
        inb1_p_12 := inb1_p_01;
      END IF;
      IF k_02 = to_unsigned(16#6#, 4) THEN 
        inb1_n_21 := rRam1_4;
        inb1_p_21 := rRam1_5;
      ELSE 
        inb1_n_21 := inb1_n_12;
        inb1_p_21 := inb1_p_12;
      END IF;
      IF k_02 = to_unsigned(16#5#, 4) THEN 
        inb1_n_31 := rRam1_6;
        inb1_p_31 := rRam1_7;
      ELSE 
        inb1_n_31 := inb1_n_21;
        inb1_p_31 := inb1_p_21;
      END IF;
      IF k_02 = to_unsigned(16#4#, 4) THEN 
        inb1_n_41 := rRam1_8;
        inb1_p_41 := rRam1_9;
      ELSE 
        inb1_n_41 := inb1_n_31;
        inb1_p_41 := inb1_p_31;
      END IF;
      IF k_02 = to_unsigned(16#3#, 4) THEN 
        inb1_n_51 := rRam1_10;
        inb1_p_51 := rRam1_11;
      ELSE 
        inb1_n_51 := inb1_n_41;
        inb1_p_51 := inb1_p_41;
      END IF;
      IF k_02 = to_unsigned(16#2#, 4) THEN 
        inb1_n_61 := rRam1_12;
        inb1_p_61 := rRam1_13;
      ELSE 
        inb1_n_61 := inb1_n_51;
        inb1_p_61 := inb1_p_51;
      END IF;
      IF k_02 = to_unsigned(16#1#, 4) THEN 
        inb1_n_71 := rRam1_14;
        inb1_p_71 := rRam1_15;
      ELSE 
        inb1_n_71 := inb1_n_61;
        inb1_p_71 := inb1_p_61;
      END IF;
      inb1_N2 := inb1_n_71;
      inb1_P2 := inb1_p_71;
      add_cast2(k2) := resize(inb11 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 30);
      add_cast_02(k2) := resize(inb1_p_71, 15);
      add_cast_11(k2) := resize(inb1_n_71, 15);
      add_temp_02(k2) := add_cast_02(k2) + add_cast_11(k2);
      cast1(k2) := add_temp_02(k2)(14 DOWNTO 1);
      add_temp_12(k2) := resize(k_02, 5) + to_unsigned(16#09#, 5);
      sub_cast2(k2) := signed(resize(add_temp_12(k2), 32));
      cast_01(k2) := g_17(to_integer(sub_cast2(k2) - 1))(12 DOWNTO 0) & '0';
      mul_temp2(k2) := cast1(k2) * cast_01(k2);
      add_cast_21(k2) := resize(mul_temp2(k2), 30);
      add_temp_21(k2) := add_cast2(k2) + add_cast_21(k2);
      inb11 := add_temp_21(k2)(28 DOWNTO 15);
    END LOOP;

    inb1_1 <= inb11;
  END PROCESS p19_output;


  delayIn0_2 <= xxg_16(0);

  delayIn1_2 <= xxg_16(1);

  delayIn2_2 <= xxg_16(2);

  delayIn3_2 <= xxg_16(3);

  delayIn4_2 <= xxg_16(4);

  delayIn5_2 <= xxg_16(5);

  delayIn6_2 <= xxg_16(6);

  delayIn7_2 <= xxg_16(7);

  delayIn8_2 <= xxg_16(8);

  mergedInput_33 <= delayIn0_2 & delayIn1_2 & delayIn2_2 & delayIn3_2 & delayIn4_2 & delayIn5_2 & delayIn6_2 & delayIn7_2 & delayIn8_2;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_33 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_33 <= mergedInput_33;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_33_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_33 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_33 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_33 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_33 <= mergedDelay_waddr_33 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_33_process;


  mergedDelay_wrenb_33 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_33 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_33 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_33 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_33 <= mergedDelay_raddr_33 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_33_process;


  mergedDelay_regout_unsigned_33 <= unsigned(mergedDelay_regout_33);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_33 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_33 <= mergedDelay_regout_unsigned_33;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_33_process;


  delayIn9_2 <= xxg_16(9);

  delayIn10_2 <= xxg_16(10);

  delayIn11_2 <= xxg_16(11);

  delayIn12_2 <= xxg_16(12);

  delayIn13_2 <= xxg_16(13);

  delayIn14_2 <= xxg_16(14);

  delayIn15_2 <= xxg_16(15);

  delayIn16_2 <= xxg_16(16);

  delayIn17_2 <= xxg_16(17);

  mergedInput_34 <= delayIn9_2 & delayIn10_2 & delayIn11_2 & delayIn12_2 & delayIn13_2 & delayIn14_2 & delayIn15_2 & delayIn16_2 & delayIn17_2;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_34 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_34 <= mergedInput_34;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_34_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_34 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_34 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_34 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_34 <= mergedDelay_waddr_34 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_34_process;


  mergedDelay_wrenb_34 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_34 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_34 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_34 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_34 <= mergedDelay_raddr_34 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_34_process;


  mergedDelay_regout_unsigned_34 <= unsigned(mergedDelay_regout_34);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_34 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_34 <= mergedDelay_regout_unsigned_34;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_34_process;


  delayIn18_2 <= xxg_16(18);

  delayIn19_2 <= xxg_16(19);

  delayIn20_2 <= xxg_16(20);

  delayIn21_2 <= xxg_16(21);

  delayIn22_2 <= xxg_16(22);

  delayIn23_2 <= xxg_16(23);

  delayIn24_2 <= xxg_16(24);

  delayIn25_2 <= xxg_16(25);

  delayIn26_2 <= xxg_16(26);

  mergedInput_35 <= delayIn18_2 & delayIn19_2 & delayIn20_2 & delayIn21_2 & delayIn22_2 & delayIn23_2 & delayIn24_2 & delayIn25_2 & delayIn26_2;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_35 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_35 <= mergedInput_35;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_35_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_35 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_35 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_35 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_35 <= mergedDelay_waddr_35 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_35_process;


  mergedDelay_wrenb_35 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_35 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_35 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_35 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_35 <= mergedDelay_raddr_35 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_35_process;


  mergedDelay_regout_unsigned_35 <= unsigned(mergedDelay_regout_35);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_35 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_35 <= mergedDelay_regout_unsigned_35;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_35_process;


  delayIn27_2 <= xxg_16(27);

  delayIn28_2 <= xxg_16(28);

  delayIn29_2 <= xxg_16(29);

  delayIn30_2 <= xxg_16(30);

  delayIn31_2 <= xxg_16(31);

  delayIn32_2 <= xxg_16(32);

  delayIn33_2 <= xxg_16(33);

  delayIn34_2 <= xxg_16(34);

  delayIn35_2 <= xxg_16(35);

  mergedInput_36 <= delayIn27_2 & delayIn28_2 & delayIn29_2 & delayIn30_2 & delayIn31_2 & delayIn32_2 & delayIn33_2 & delayIn34_2 & delayIn35_2;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_36 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_36 <= mergedInput_36;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_36_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_36 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_36 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_36 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_36 <= mergedDelay_waddr_36 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_36_process;


  mergedDelay_wrenb_36 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_36 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_36 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_36 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_36 <= mergedDelay_raddr_36 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_36_process;


  mergedDelay_regout_unsigned_36 <= unsigned(mergedDelay_regout_36);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_36 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_36 <= mergedDelay_regout_unsigned_36;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_36_process;


  delayIn36_2 <= xxg_16(36);

  delayIn37_2 <= xxg_16(37);

  delayIn38_2 <= xxg_16(38);

  delayIn39_2 <= xxg_16(39);

  delayIn40_2 <= xxg_16(40);

  delayIn41_2 <= xxg_16(41);

  delayIn42_2 <= xxg_16(42);

  delayIn43_2 <= xxg_16(43);

  delayIn44_2 <= xxg_16(44);

  mergedInput_37 <= delayIn36_2 & delayIn37_2 & delayIn38_2 & delayIn39_2 & delayIn40_2 & delayIn41_2 & delayIn42_2 & delayIn43_2 & delayIn44_2;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_37 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_37 <= mergedInput_37;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_37_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_37 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_37 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_37 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_37 <= mergedDelay_waddr_37 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_37_process;


  mergedDelay_wrenb_37 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_37 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_37 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_37 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_37 <= mergedDelay_raddr_37 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_37_process;


  mergedDelay_regout_unsigned_37 <= unsigned(mergedDelay_regout_37);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_37 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_37 <= mergedDelay_regout_unsigned_37;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_37_process;


  delayIn45_2 <= xxg_16(45);

  delayIn46_2 <= xxg_16(46);

  delayIn47_2 <= xxg_16(47);

  delayIn48_2 <= xxg_16(48);

  delayIn49_2 <= xxg_16(49);

  delayIn50_2 <= xxg_16(50);

  delayIn51_2 <= xxg_16(51);

  delayIn52_2 <= xxg_16(52);

  delayIn53_2 <= xxg_16(53);

  mergedInput_38 <= delayIn45_2 & delayIn46_2 & delayIn47_2 & delayIn48_2 & delayIn49_2 & delayIn50_2 & delayIn51_2 & delayIn52_2 & delayIn53_2;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_38 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_38 <= mergedInput_38;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_38_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_38 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_38 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_38 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_38 <= mergedDelay_waddr_38 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_38_process;


  mergedDelay_wrenb_38 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_38 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_38 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_38 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_38 <= mergedDelay_raddr_38 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_38_process;


  mergedDelay_regout_unsigned_38 <= unsigned(mergedDelay_regout_38);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_38 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_38 <= mergedDelay_regout_unsigned_38;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_38_process;


  delayIn54_2 <= xxg_16(54);

  delayIn55_2 <= xxg_16(55);

  delayIn56_2 <= xxg_16(56);

  delayIn57_2 <= xxg_16(57);

  delayIn58_2 <= xxg_16(58);

  delayIn59_1 <= xxg_16(59);

  delayIn60_1 <= xxg_16(60);

  delayIn61_1 <= xxg_16(61);

  delayIn62_1 <= xxg_16(62);

  mergedInput_39 <= delayIn54_2 & delayIn55_2 & delayIn56_2 & delayIn57_2 & delayIn58_2 & delayIn59_1 & delayIn60_1 & delayIn61_1 & delayIn62_1;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_39 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_39 <= mergedInput_39;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_39_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_39 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_39 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_39 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_39 <= mergedDelay_waddr_39 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_39_process;


  mergedDelay_wrenb_39 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_39 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_39 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_39 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_39 <= mergedDelay_raddr_39 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_39_process;


  mergedDelay_regout_unsigned_39 <= unsigned(mergedDelay_regout_39);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_39 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_39 <= mergedDelay_regout_unsigned_39;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_39_process;


  delayIn63_1 <= xxg_16(63);

  delayIn64_1 <= xxg_16(64);

  delayIn65_1 <= xxg_16(65);

  delayIn66_1 <= xxg_16(66);

  delayIn67_1 <= xxg_16(67);

  delayIn68_1 <= xxg_16(68);

  delayIn69_1 <= xxg_16(69);

  delayIn70_1 <= xxg_16(70);

  delayIn71_1 <= xxg_16(71);

  mergedInput_40 <= delayIn63_1 & delayIn64_1 & delayIn65_1 & delayIn66_1 & delayIn67_1 & delayIn68_1 & delayIn69_1 & delayIn70_1 & delayIn71_1;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_40 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_40 <= mergedInput_40;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_40_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_40 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_40 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_40 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_40 <= mergedDelay_waddr_40 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_40_process;


  mergedDelay_wrenb_40 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_40 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_40 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_40 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_40 <= mergedDelay_raddr_40 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_40_process;


  mergedDelay_regout_unsigned_40 <= unsigned(mergedDelay_regout_40);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_40 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_40 <= mergedDelay_regout_unsigned_40;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_40_process;


  delayIn72_1 <= xxg_16(72);

  delayIn73_1 <= xxg_16(73);

  delayIn74_1 <= xxg_16(74);

  delayIn75_1 <= xxg_16(75);

  delayIn76 <= xxg_16(76);

  delayIn77 <= xxg_16(77);

  delayIn78 <= xxg_16(78);

  delayIn79 <= xxg_16(79);

  delayIn80 <= xxg_16(80);

  mergedInput_41 <= delayIn72_1 & delayIn73_1 & delayIn74_1 & delayIn75_1 & delayIn76 & delayIn77 & delayIn78 & delayIn79 & delayIn80;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_41 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_41 <= mergedInput_41;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_41_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_41 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_41 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_41 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_41 <= mergedDelay_waddr_41 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_41_process;


  mergedDelay_wrenb_41 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_41 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_41 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_41 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_41 <= mergedDelay_raddr_41 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_41_process;


  mergedDelay_regout_unsigned_41 <= unsigned(mergedDelay_regout_41);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_41 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_41 <= mergedDelay_regout_unsigned_41;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_41_process;


  delayIn81 <= xxg_16(81);

  delayIn82 <= xxg_16(82);

  delayIn83 <= xxg_16(83);

  delayIn84 <= xxg_16(84);

  delayIn85 <= xxg_16(85);

  delayIn86 <= xxg_16(86);

  delayIn87 <= xxg_16(87);

  delayIn88 <= xxg_16(88);

  delayIn89 <= xxg_16(89);

  mergedInput_42 <= delayIn81 & delayIn82 & delayIn83 & delayIn84 & delayIn85 & delayIn86 & delayIn87 & delayIn88 & delayIn89;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin_42 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedDelay_regin_42 <= mergedInput_42;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_42_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr_42 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_waddr_42 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_waddr_42 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_waddr_42 <= mergedDelay_waddr_42 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_42_process;


  mergedDelay_wrenb_42 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 17
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr_42 <= to_unsigned(16#01#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        IF mergedDelay_raddr_42 >= to_unsigned(16#11#, 5) THEN 
          mergedDelay_raddr_42 <= to_unsigned(16#00#, 5);
        ELSE 
          mergedDelay_raddr_42 <= mergedDelay_raddr_42 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_42_process;


  mergedDelay_regout_unsigned_42 <= unsigned(mergedDelay_regout_42);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput_42 <= to_unsigned(0, 126);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        mergedOutput_42 <= mergedDelay_regout_unsigned_42;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_42_process;


  slicedInput_253 <= mergedOutput_33(125 DOWNTO 112);

  delayOut0_5 <= slicedInput_253;

  slicedInput_254 <= mergedOutput_33(111 DOWNTO 98);

  delayOut1_5 <= slicedInput_254;

  slicedInput_255 <= mergedOutput_33(97 DOWNTO 84);

  delayOut2_5 <= slicedInput_255;

  slicedInput_256 <= mergedOutput_33(83 DOWNTO 70);

  delayOut3_5 <= slicedInput_256;

  slicedInput_257 <= mergedOutput_33(69 DOWNTO 56);

  delayOut4_5 <= slicedInput_257;

  slicedInput_258 <= mergedOutput_33(55 DOWNTO 42);

  delayOut5_5 <= slicedInput_258;

  slicedInput_259 <= mergedOutput_33(41 DOWNTO 28);

  delayOut6_5 <= slicedInput_259;

  slicedInput_260 <= mergedOutput_33(27 DOWNTO 14);

  delayOut7_5 <= slicedInput_260;

  slicedInput_261 <= mergedOutput_33(13 DOWNTO 0);

  delayOut8_5 <= slicedInput_261;

  slicedInput_262 <= mergedOutput_34(125 DOWNTO 112);

  delayOut9_5 <= slicedInput_262;

  slicedInput_263 <= mergedOutput_34(111 DOWNTO 98);

  delayOut10_5 <= slicedInput_263;

  slicedInput_264 <= mergedOutput_34(97 DOWNTO 84);

  delayOut11_5 <= slicedInput_264;

  slicedInput_265 <= mergedOutput_34(83 DOWNTO 70);

  delayOut12_5 <= slicedInput_265;

  slicedInput_266 <= mergedOutput_34(69 DOWNTO 56);

  delayOut13_5 <= slicedInput_266;

  slicedInput_267 <= mergedOutput_34(55 DOWNTO 42);

  delayOut14_5 <= slicedInput_267;

  slicedInput_268 <= mergedOutput_34(41 DOWNTO 28);

  delayOut15_5 <= slicedInput_268;

  slicedInput_269 <= mergedOutput_34(27 DOWNTO 14);

  delayOut16_5 <= slicedInput_269;

  slicedInput_270 <= mergedOutput_34(13 DOWNTO 0);

  delayOut17_5 <= slicedInput_270;

  slicedInput_271 <= mergedOutput_35(125 DOWNTO 112);

  delayOut18_2 <= slicedInput_271;

  slicedInput_272 <= mergedOutput_35(111 DOWNTO 98);

  delayOut19_2 <= slicedInput_272;

  slicedInput_273 <= mergedOutput_35(97 DOWNTO 84);

  delayOut20_2 <= slicedInput_273;

  slicedInput_274 <= mergedOutput_35(83 DOWNTO 70);

  delayOut21_2 <= slicedInput_274;

  slicedInput_275 <= mergedOutput_35(69 DOWNTO 56);

  delayOut22_2 <= slicedInput_275;

  slicedInput_276 <= mergedOutput_35(55 DOWNTO 42);

  delayOut23_2 <= slicedInput_276;

  slicedInput_277 <= mergedOutput_35(41 DOWNTO 28);

  delayOut24_2 <= slicedInput_277;

  slicedInput_278 <= mergedOutput_35(27 DOWNTO 14);

  delayOut25_2 <= slicedInput_278;

  slicedInput_279 <= mergedOutput_35(13 DOWNTO 0);

  delayOut26_2 <= slicedInput_279;

  slicedInput_280 <= mergedOutput_36(125 DOWNTO 112);

  delayOut27_2 <= slicedInput_280;

  slicedInput_281 <= mergedOutput_36(111 DOWNTO 98);

  delayOut28_2 <= slicedInput_281;

  slicedInput_282 <= mergedOutput_36(97 DOWNTO 84);

  delayOut29_2 <= slicedInput_282;

  slicedInput_283 <= mergedOutput_36(83 DOWNTO 70);

  delayOut30_2 <= slicedInput_283;

  slicedInput_284 <= mergedOutput_36(69 DOWNTO 56);

  delayOut31_2 <= slicedInput_284;

  slicedInput_285 <= mergedOutput_36(55 DOWNTO 42);

  delayOut32_2 <= slicedInput_285;

  slicedInput_286 <= mergedOutput_36(41 DOWNTO 28);

  delayOut33_2 <= slicedInput_286;

  slicedInput_287 <= mergedOutput_36(27 DOWNTO 14);

  delayOut34_2 <= slicedInput_287;

  slicedInput_288 <= mergedOutput_36(13 DOWNTO 0);

  delayOut35_2 <= slicedInput_288;

  slicedInput_289 <= mergedOutput_37(125 DOWNTO 112);

  delayOut36_2 <= slicedInput_289;

  slicedInput_290 <= mergedOutput_37(111 DOWNTO 98);

  delayOut37_2 <= slicedInput_290;

  slicedInput_291 <= mergedOutput_37(97 DOWNTO 84);

  delayOut38_2 <= slicedInput_291;

  slicedInput_292 <= mergedOutput_37(83 DOWNTO 70);

  delayOut39_2 <= slicedInput_292;

  slicedInput_293 <= mergedOutput_37(69 DOWNTO 56);

  delayOut40_2 <= slicedInput_293;

  slicedInput_294 <= mergedOutput_37(55 DOWNTO 42);

  delayOut41_2 <= slicedInput_294;

  slicedInput_295 <= mergedOutput_37(41 DOWNTO 28);

  delayOut42_2 <= slicedInput_295;

  slicedInput_296 <= mergedOutput_37(27 DOWNTO 14);

  delayOut43_2 <= slicedInput_296;

  slicedInput_297 <= mergedOutput_37(13 DOWNTO 0);

  delayOut44_2 <= slicedInput_297;

  slicedInput_298 <= mergedOutput_38(125 DOWNTO 112);

  delayOut45_2 <= slicedInput_298;

  slicedInput_299 <= mergedOutput_38(111 DOWNTO 98);

  delayOut46_2 <= slicedInput_299;

  slicedInput_300 <= mergedOutput_38(97 DOWNTO 84);

  delayOut47_2 <= slicedInput_300;

  slicedInput_301 <= mergedOutput_38(83 DOWNTO 70);

  delayOut48_2 <= slicedInput_301;

  slicedInput_302 <= mergedOutput_38(69 DOWNTO 56);

  delayOut49_2 <= slicedInput_302;

  slicedInput_303 <= mergedOutput_38(55 DOWNTO 42);

  delayOut50_2 <= slicedInput_303;

  slicedInput_304 <= mergedOutput_38(41 DOWNTO 28);

  delayOut51_2 <= slicedInput_304;

  slicedInput_305 <= mergedOutput_38(27 DOWNTO 14);

  delayOut52_2 <= slicedInput_305;

  slicedInput_306 <= mergedOutput_38(13 DOWNTO 0);

  delayOut53_2 <= slicedInput_306;

  slicedInput_307 <= mergedOutput_39(125 DOWNTO 112);

  delayOut54_2 <= slicedInput_307;

  slicedInput_308 <= mergedOutput_39(111 DOWNTO 98);

  delayOut55_2 <= slicedInput_308;

  slicedInput_309 <= mergedOutput_39(97 DOWNTO 84);

  delayOut56_2 <= slicedInput_309;

  slicedInput_310 <= mergedOutput_39(83 DOWNTO 70);

  delayOut57_2 <= slicedInput_310;

  slicedInput_311 <= mergedOutput_39(69 DOWNTO 56);

  delayOut58_2 <= slicedInput_311;

  slicedInput_312 <= mergedOutput_39(55 DOWNTO 42);

  delayOut59_1 <= slicedInput_312;

  slicedInput_313 <= mergedOutput_39(41 DOWNTO 28);

  delayOut60_1 <= slicedInput_313;

  slicedInput_314 <= mergedOutput_39(27 DOWNTO 14);

  delayOut61_1 <= slicedInput_314;

  slicedInput_315 <= mergedOutput_39(13 DOWNTO 0);

  delayOut62_1 <= slicedInput_315;

  slicedInput_316 <= mergedOutput_40(125 DOWNTO 112);

  delayOut63_1 <= slicedInput_316;

  slicedInput_317 <= mergedOutput_40(111 DOWNTO 98);

  delayOut64_1 <= slicedInput_317;

  slicedInput_318 <= mergedOutput_40(97 DOWNTO 84);

  delayOut65_1 <= slicedInput_318;

  slicedInput_319 <= mergedOutput_40(83 DOWNTO 70);

  delayOut66_1 <= slicedInput_319;

  slicedInput_320 <= mergedOutput_40(69 DOWNTO 56);

  delayOut67_1 <= slicedInput_320;

  slicedInput_321 <= mergedOutput_40(55 DOWNTO 42);

  delayOut68_1 <= slicedInput_321;

  slicedInput_322 <= mergedOutput_40(41 DOWNTO 28);

  delayOut69_1 <= slicedInput_322;

  slicedInput_323 <= mergedOutput_40(27 DOWNTO 14);

  delayOut70_1 <= slicedInput_323;

  slicedInput_324 <= mergedOutput_40(13 DOWNTO 0);

  delayOut71_1 <= slicedInput_324;

  slicedInput_325 <= mergedOutput_41(125 DOWNTO 112);

  delayOut72_1 <= slicedInput_325;

  slicedInput_326 <= mergedOutput_41(111 DOWNTO 98);

  delayOut73_1 <= slicedInput_326;

  slicedInput_327 <= mergedOutput_41(97 DOWNTO 84);

  delayOut74_1 <= slicedInput_327;

  slicedInput_328 <= mergedOutput_41(83 DOWNTO 70);

  delayOut75_1 <= slicedInput_328;

  slicedInput_329 <= mergedOutput_41(69 DOWNTO 56);

  delayOut76 <= slicedInput_329;

  slicedInput_330 <= mergedOutput_41(55 DOWNTO 42);

  delayOut77 <= slicedInput_330;

  slicedInput_331 <= mergedOutput_41(41 DOWNTO 28);

  delayOut78 <= slicedInput_331;

  slicedInput_332 <= mergedOutput_41(27 DOWNTO 14);

  delayOut79 <= slicedInput_332;

  slicedInput_333 <= mergedOutput_41(13 DOWNTO 0);

  delayOut80 <= slicedInput_333;

  slicedInput_334 <= mergedOutput_42(125 DOWNTO 112);

  delayOut81 <= slicedInput_334;

  slicedInput_335 <= mergedOutput_42(111 DOWNTO 98);

  delayOut82 <= slicedInput_335;

  slicedInput_336 <= mergedOutput_42(97 DOWNTO 84);

  delayOut83 <= slicedInput_336;

  slicedInput_337 <= mergedOutput_42(83 DOWNTO 70);

  delayOut84 <= slicedInput_337;

  slicedInput_338 <= mergedOutput_42(69 DOWNTO 56);

  delayOut85 <= slicedInput_338;

  slicedInput_339 <= mergedOutput_42(55 DOWNTO 42);

  delayOut86 <= slicedInput_339;

  slicedInput_340 <= mergedOutput_42(41 DOWNTO 28);

  delayOut87 <= slicedInput_340;

  slicedInput_341 <= mergedOutput_42(27 DOWNTO 14);

  delayOut88 <= slicedInput_341;

  slicedInput_342 <= mergedOutput_42(13 DOWNTO 0);

  delayOut89 <= slicedInput_342;

  slicedInput_343 <= mergedOutput_28(125 DOWNTO 112);

  delayOut90 <= slicedInput_343;

  slicedInput_344 <= mergedOutput_28(111 DOWNTO 98);

  delayOut91 <= slicedInput_344;

  slicedInput_345 <= mergedOutput_28(97 DOWNTO 84);

  delayOut92 <= slicedInput_345;

  xxg_17(0) <= delayOut0_5;
  xxg_17(1) <= delayOut1_5;
  xxg_17(2) <= delayOut2_5;
  xxg_17(3) <= delayOut3_5;
  xxg_17(4) <= delayOut4_5;
  xxg_17(5) <= delayOut5_5;
  xxg_17(6) <= delayOut6_5;
  xxg_17(7) <= delayOut7_5;
  xxg_17(8) <= delayOut8_5;
  xxg_17(9) <= delayOut9_5;
  xxg_17(10) <= delayOut10_5;
  xxg_17(11) <= delayOut11_5;
  xxg_17(12) <= delayOut12_5;
  xxg_17(13) <= delayOut13_5;
  xxg_17(14) <= delayOut14_5;
  xxg_17(15) <= delayOut15_5;
  xxg_17(16) <= delayOut16_5;
  xxg_17(17) <= delayOut17_5;
  xxg_17(18) <= delayOut18_2;
  xxg_17(19) <= delayOut19_2;
  xxg_17(20) <= delayOut20_2;
  xxg_17(21) <= delayOut21_2;
  xxg_17(22) <= delayOut22_2;
  xxg_17(23) <= delayOut23_2;
  xxg_17(24) <= delayOut24_2;
  xxg_17(25) <= delayOut25_2;
  xxg_17(26) <= delayOut26_2;
  xxg_17(27) <= delayOut27_2;
  xxg_17(28) <= delayOut28_2;
  xxg_17(29) <= delayOut29_2;
  xxg_17(30) <= delayOut30_2;
  xxg_17(31) <= delayOut31_2;
  xxg_17(32) <= delayOut32_2;
  xxg_17(33) <= delayOut33_2;
  xxg_17(34) <= delayOut34_2;
  xxg_17(35) <= delayOut35_2;
  xxg_17(36) <= delayOut36_2;
  xxg_17(37) <= delayOut37_2;
  xxg_17(38) <= delayOut38_2;
  xxg_17(39) <= delayOut39_2;
  xxg_17(40) <= delayOut40_2;
  xxg_17(41) <= delayOut41_2;
  xxg_17(42) <= delayOut42_2;
  xxg_17(43) <= delayOut43_2;
  xxg_17(44) <= delayOut44_2;
  xxg_17(45) <= delayOut45_2;
  xxg_17(46) <= delayOut46_2;
  xxg_17(47) <= delayOut47_2;
  xxg_17(48) <= delayOut48_2;
  xxg_17(49) <= delayOut49_2;
  xxg_17(50) <= delayOut50_2;
  xxg_17(51) <= delayOut51_2;
  xxg_17(52) <= delayOut52_2;
  xxg_17(53) <= delayOut53_2;
  xxg_17(54) <= delayOut54_2;
  xxg_17(55) <= delayOut55_2;
  xxg_17(56) <= delayOut56_2;
  xxg_17(57) <= delayOut57_2;
  xxg_17(58) <= delayOut58_2;
  xxg_17(59) <= delayOut59_1;
  xxg_17(60) <= delayOut60_1;
  xxg_17(61) <= delayOut61_1;
  xxg_17(62) <= delayOut62_1;
  xxg_17(63) <= delayOut63_1;
  xxg_17(64) <= delayOut64_1;
  xxg_17(65) <= delayOut65_1;
  xxg_17(66) <= delayOut66_1;
  xxg_17(67) <= delayOut67_1;
  xxg_17(68) <= delayOut68_1;
  xxg_17(69) <= delayOut69_1;
  xxg_17(70) <= delayOut70_1;
  xxg_17(71) <= delayOut71_1;
  xxg_17(72) <= delayOut72_1;
  xxg_17(73) <= delayOut73_1;
  xxg_17(74) <= delayOut74_1;
  xxg_17(75) <= delayOut75_1;
  xxg_17(76) <= delayOut76;
  xxg_17(77) <= delayOut77;
  xxg_17(78) <= delayOut78;
  xxg_17(79) <= delayOut79;
  xxg_17(80) <= delayOut80;
  xxg_17(81) <= delayOut81;
  xxg_17(82) <= delayOut82;
  xxg_17(83) <= delayOut83;
  xxg_17(84) <= delayOut84;
  xxg_17(85) <= delayOut85;
  xxg_17(86) <= delayOut86;
  xxg_17(87) <= delayOut87;
  xxg_17(88) <= delayOut88;
  xxg_17(89) <= delayOut89;
  xxg_17(90) <= delayOut90;
  xxg_17(91) <= delayOut91;
  xxg_17(92) <= delayOut92;

  p16_output : PROCESS (inb1_N_1, inb1_P_1, rRam1, rRam1_1, rRam1_10, rRam1_11, rRam1_12, rRam1_13,
       rRam1_14, rRam1_15, rRam1_2, rRam1_3, rRam1_4, rRam1_5, rRam1_6, rRam1_7,
       rRam1_8, rRam1_9, xxg_17)
    VARIABLE inb4 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_P3 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_N3 : unsigned(13 DOWNTO 0);
    VARIABLE k_03 : unsigned(3 DOWNTO 0);
    VARIABLE inb1_p_02 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_02 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_13 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_13 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_22 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_22 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_32 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_32 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_42 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_42 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_52 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_52 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_62 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_62 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_p_72 : unsigned(13 DOWNTO 0);
    VARIABLE inb1_n_72 : unsigned(13 DOWNTO 0);
    VARIABLE add_temp3 : vector_of_signed32(0 TO 7);
    VARIABLE add_cast3 : vector_of_unsigned30(0 TO 7);
    VARIABLE add_cast_03 : vector_of_unsigned15(0 TO 7);
    VARIABLE add_cast_12 : vector_of_unsigned15(0 TO 7);
    VARIABLE add_temp_03 : vector_of_unsigned15(0 TO 7);
    VARIABLE cast2 : vector_of_unsigned14(0 TO 7);
    VARIABLE add_temp_13 : vector_of_unsigned5(0 TO 7);
    VARIABLE sub_cast3 : vector_of_signed32(0 TO 7);
    VARIABLE mul_temp3 : vector_of_unsigned28(0 TO 7);
    VARIABLE add_cast_22 : vector_of_unsigned30(0 TO 7);
    VARIABLE add_temp_22 : vector_of_unsigned30(0 TO 7);
  BEGIN
    inb1_N3 := inb1_N_1;
    inb1_P3 := inb1_P_1;
    inb4 := to_unsigned(16#0000#, 14);

    FOR k3 IN 0 TO 7 LOOP
      add_temp3(k3) := to_signed(k3 + 1, 32);
      k_03 := unsigned(add_temp3(k3)(3 DOWNTO 0));
      IF k_03 = to_unsigned(16#8#, 4) THEN 
        inb1_n_02 := rRam1;
        inb1_p_02 := rRam1_1;
      ELSE 
        inb1_n_02 := inb1_N3;
        inb1_p_02 := inb1_P3;
      END IF;
      IF k_03 = to_unsigned(16#7#, 4) THEN 
        inb1_n_13 := rRam1_2;
        inb1_p_13 := rRam1_3;
      ELSE 
        inb1_n_13 := inb1_n_02;
        inb1_p_13 := inb1_p_02;
      END IF;
      IF k_03 = to_unsigned(16#6#, 4) THEN 
        inb1_n_22 := rRam1_4;
        inb1_p_22 := rRam1_5;
      ELSE 
        inb1_n_22 := inb1_n_13;
        inb1_p_22 := inb1_p_13;
      END IF;
      IF k_03 = to_unsigned(16#5#, 4) THEN 
        inb1_n_32 := rRam1_6;
        inb1_p_32 := rRam1_7;
      ELSE 
        inb1_n_32 := inb1_n_22;
        inb1_p_32 := inb1_p_22;
      END IF;
      IF k_03 = to_unsigned(16#4#, 4) THEN 
        inb1_n_42 := rRam1_8;
        inb1_p_42 := rRam1_9;
      ELSE 
        inb1_n_42 := inb1_n_32;
        inb1_p_42 := inb1_p_32;
      END IF;
      IF k_03 = to_unsigned(16#3#, 4) THEN 
        inb1_n_52 := rRam1_10;
        inb1_p_52 := rRam1_11;
      ELSE 
        inb1_n_52 := inb1_n_42;
        inb1_p_52 := inb1_p_42;
      END IF;
      IF k_03 = to_unsigned(16#2#, 4) THEN 
        inb1_n_62 := rRam1_12;
        inb1_p_62 := rRam1_13;
      ELSE 
        inb1_n_62 := inb1_n_52;
        inb1_p_62 := inb1_p_52;
      END IF;
      IF k_03 = to_unsigned(16#1#, 4) THEN 
        inb1_n_72 := rRam1_14;
        inb1_p_72 := rRam1_15;
      ELSE 
        inb1_n_72 := inb1_n_62;
        inb1_p_72 := inb1_p_62;
      END IF;
      inb1_N3 := inb1_n_72;
      inb1_P3 := inb1_p_72;
      add_cast3(k3) := resize(inb4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 30);
      add_cast_03(k3) := resize(inb1_p_72, 15);
      add_cast_12(k3) := resize(inb1_n_72, 15);
      add_temp_03(k3) := add_cast_03(k3) + add_cast_12(k3);
      cast2(k3) := add_temp_03(k3)(14 DOWNTO 1);
      add_temp_13(k3) := resize(k_03, 5) + to_unsigned(16#09#, 5);
      sub_cast3(k3) := signed(resize(add_temp_13(k3), 32));
      mul_temp3(k3) := cast2(k3) * xxg_17(to_integer(sub_cast3(k3) - 1));
      add_cast_22(k3) := resize(mul_temp3(k3), 30);
      add_temp_22(k3) := add_cast3(k3) + add_cast_22(k3);
      inb4 := add_temp_22(k3)(28 DOWNTO 15);
    END LOOP;

    inb4_1 <= inb4;
  END PROCESS p16_output;


  p10drow_3_cast <= signed(resize(inb1_1, 15));
  p10drow_3_mul_temp <= p10drow_3_cast * to_signed(-16#1639#, 14);
  p10drow_3_add_cast <= p10drow_3_mul_temp(27 DOWNTO 0);
  p10drow_3_add_cast_1 <= resize(p10drow_3_add_cast & '0', 31);
  p10drow_3_mul_temp_1 <= inb4_1 * to_unsigned(16#3DB8#, 14);
  p10drow_3_add_cast_2 <= signed(resize(p10drow_3_mul_temp_1, 31));
  p10drow_3_add_temp <= p10drow_3_add_cast_1 + p10drow_3_add_cast_2;
  drow_3_1 <= p10drow_3_add_temp(26 DOWNTO 13);

  delayMatch_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      drow_3_tmp <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        drow_3_tmp <= drow_3_1;
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;


  drow_3 <= std_logic_vector(drow_3_tmp);

  slicedInput_346 <= mergedOutput(77 DOWNTO 64);

  writeData_3 <= slicedInput_346;

  wr_data_4(0) <= writeData_3;
  wr_data_4(1) <= writeData_3;
  wr_data_4(2) <= writeData_3;
  wr_data_4(3) <= writeData_3;
  wr_data_4(4) <= writeData_3;
  wr_data_4(5) <= writeData_3;
  wr_data_4(6) <= writeData_3;
  wr_data_4(7) <= writeData_3;
  wr_data_4(8) <= writeData_3;
  wr_data_4(9) <= writeData_3;
  wr_data_4(10) <= writeData_3;
  wr_data_4(11) <= writeData_3;
  wr_data_4(12) <= writeData_3;
  wr_data_4(13) <= writeData_3;
  wr_data_4(14) <= writeData_3;
  wr_data_4(15) <= writeData_3;
  wr_data_4(16) <= writeData_3;
  wr_data_4(17) <= writeData_3;

  wr_data_overclock18_2 <= wr_data_4;

  ratechange_splitcomp_out0_11 <= wr_data_overclock18_2(0);

  ratechange_splitcomp_out1_11 <= wr_data_overclock18_2(1);

  ratechange_splitcomp_out2_11 <= wr_data_overclock18_2(2);

  ratechange_splitcomp_out3_11 <= wr_data_overclock18_2(3);

  ratechange_splitcomp_out4_11 <= wr_data_overclock18_2(4);

  ratechange_splitcomp_out5_11 <= wr_data_overclock18_2(5);

  ratechange_splitcomp_out6_11 <= wr_data_overclock18_2(6);

  ratechange_splitcomp_out7_11 <= wr_data_overclock18_2(7);

  ratechange_splitcomp_out8_11 <= wr_data_overclock18_2(8);

  ratechange_splitcomp_out9_11 <= wr_data_overclock18_2(9);

  ratechange_splitcomp_out10_11 <= wr_data_overclock18_2(10);

  ratechange_splitcomp_out11_11 <= wr_data_overclock18_2(11);

  ratechange_splitcomp_out12_11 <= wr_data_overclock18_2(12);

  ratechange_splitcomp_out13_11 <= wr_data_overclock18_2(13);

  ratechange_splitcomp_out14_11 <= wr_data_overclock18_2(14);

  ratechange_splitcomp_out15_11 <= wr_data_overclock18_2(15);

  ratechange_splitcomp_out16_11 <= wr_data_overclock18_2(16);

  ratechange_splitcomp_out17_11 <= wr_data_overclock18_2(17);

  
  wr_data_5 <= ratechange_splitcomp_out0_11 WHEN counterSig = to_unsigned(16#00#, 5) ELSE
      ratechange_splitcomp_out1_11 WHEN counterSig = to_unsigned(16#01#, 5) ELSE
      ratechange_splitcomp_out2_11 WHEN counterSig = to_unsigned(16#02#, 5) ELSE
      ratechange_splitcomp_out3_11 WHEN counterSig = to_unsigned(16#03#, 5) ELSE
      ratechange_splitcomp_out4_11 WHEN counterSig = to_unsigned(16#04#, 5) ELSE
      ratechange_splitcomp_out5_11 WHEN counterSig = to_unsigned(16#05#, 5) ELSE
      ratechange_splitcomp_out6_11 WHEN counterSig = to_unsigned(16#06#, 5) ELSE
      ratechange_splitcomp_out7_11 WHEN counterSig = to_unsigned(16#07#, 5) ELSE
      ratechange_splitcomp_out8_11 WHEN counterSig = to_unsigned(16#08#, 5) ELSE
      ratechange_splitcomp_out9_11 WHEN counterSig = to_unsigned(16#09#, 5) ELSE
      ratechange_splitcomp_out10_11 WHEN counterSig = to_unsigned(16#0A#, 5) ELSE
      ratechange_splitcomp_out11_11 WHEN counterSig = to_unsigned(16#0B#, 5) ELSE
      ratechange_splitcomp_out12_11 WHEN counterSig = to_unsigned(16#0C#, 5) ELSE
      ratechange_splitcomp_out13_11 WHEN counterSig = to_unsigned(16#0D#, 5) ELSE
      ratechange_splitcomp_out14_11 WHEN counterSig = to_unsigned(16#0E#, 5) ELSE
      ratechange_splitcomp_out15_11 WHEN counterSig = to_unsigned(16#0F#, 5) ELSE
      ratechange_splitcomp_out16_11 WHEN counterSig = to_unsigned(16#10#, 5) ELSE
      ratechange_splitcomp_out17_11;

  slicedInput_347 <= mergedOutput_15(16 DOWNTO 9);

  slicedInput_348 <= mergedOutput_15(0);

  
  rRam3_ram_wr_en_sig_2 <= '1' WHEN slicedInput_348 /= '0' ELSE
      '0';

  slicedInput_349 <= mergedOutput_15(8 DOWNTO 1);

  rd_data_unsigned_1 <= unsigned(rd_data_4);

  slicedInput_350 <= mergedOutput_16(7 DOWNTO 0);

  rRam3_ram_demux_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rRam3_ram_demux_yreg <= (OTHERS => to_unsigned(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rRam3_ram_demux_yreg <= rRam3_ram_demux_yreg_next;
      END IF;
    END IF;
  END PROCESS rRam3_ram_demux_process;

  rRam3_ram_demux_add_cast <= signed(resize(slicedInput_350, 32));
  rRam3_ram_demux_ctr1 <= rRam3_ram_demux_add_cast + 1;
  
  rRam3_ram_demux_ytmp(0) <= rd_data_unsigned_1 WHEN rRam3_ram_demux_ctr1 = to_signed(16#00000001#, 32) ELSE
      rRam3_ram_demux_yreg(0);
  
  rRam3_ram_demux_ytmp(1) <= rd_data_unsigned_1 WHEN rRam3_ram_demux_ctr1 = to_signed(16#00000002#, 32) ELSE
      rRam3_ram_demux_yreg(1);
  
  rRam3_ram_demux_ytmp(2) <= rd_data_unsigned_1 WHEN rRam3_ram_demux_ctr1 = to_signed(16#00000003#, 32) ELSE
      rRam3_ram_demux_yreg(2);
  
  rRam3_ram_demux_ytmp(3) <= rd_data_unsigned_1 WHEN rRam3_ram_demux_ctr1 = to_signed(16#00000004#, 32) ELSE
      rRam3_ram_demux_yreg(3);
  
  rRam3_ram_demux_ytmp(4) <= rd_data_unsigned_1 WHEN rRam3_ram_demux_ctr1 = to_signed(16#00000005#, 32) ELSE
      rRam3_ram_demux_yreg(4);
  
  rRam3_ram_demux_ytmp(5) <= rd_data_unsigned_1 WHEN rRam3_ram_demux_ctr1 = to_signed(16#00000006#, 32) ELSE
      rRam3_ram_demux_yreg(5);
  
  rRam3_ram_demux_ytmp(6) <= rd_data_unsigned_1 WHEN rRam3_ram_demux_ctr1 = to_signed(16#00000007#, 32) ELSE
      rRam3_ram_demux_yreg(6);
  
  rRam3_ram_demux_ytmp(7) <= rd_data_unsigned_1 WHEN rRam3_ram_demux_ctr1 = to_signed(16#00000008#, 32) ELSE
      rRam3_ram_demux_yreg(7);
  
  rRam3_ram_demux_ytmp(8) <= rd_data_unsigned_1 WHEN rRam3_ram_demux_ctr1 = to_signed(16#00000009#, 32) ELSE
      rRam3_ram_demux_yreg(8);
  
  rRam3_ram_demux_ytmp(9) <= rd_data_unsigned_1 WHEN rRam3_ram_demux_ctr1 = to_signed(16#0000000A#, 32) ELSE
      rRam3_ram_demux_yreg(9);
  
  rRam3_ram_demux_ytmp(10) <= rd_data_unsigned_1 WHEN rRam3_ram_demux_ctr1 = to_signed(16#0000000B#, 32) ELSE
      rRam3_ram_demux_yreg(10);
  
  rRam3_ram_demux_ytmp(11) <= rd_data_unsigned_1 WHEN rRam3_ram_demux_ctr1 = to_signed(16#0000000C#, 32) ELSE
      rRam3_ram_demux_yreg(11);
  
  rRam3_ram_demux_ytmp(12) <= rd_data_unsigned_1 WHEN rRam3_ram_demux_ctr1 = to_signed(16#0000000D#, 32) ELSE
      rRam3_ram_demux_yreg(12);
  
  rRam3_ram_demux_ytmp(13) <= rd_data_unsigned_1 WHEN rRam3_ram_demux_ctr1 = to_signed(16#0000000E#, 32) ELSE
      rRam3_ram_demux_yreg(13);
  
  rRam3_ram_demux_ytmp(14) <= rd_data_unsigned_1 WHEN rRam3_ram_demux_ctr1 = to_signed(16#0000000F#, 32) ELSE
      rRam3_ram_demux_yreg(14);
  
  rRam3_ram_demux_ytmp(15) <= rd_data_unsigned_1 WHEN rRam3_ram_demux_ctr1 = to_signed(16#00000010#, 32) ELSE
      rRam3_ram_demux_yreg(15);
  
  rRam3_ram_demux_ytmp(16) <= rd_data_unsigned_1 WHEN rRam3_ram_demux_ctr1 = to_signed(16#00000011#, 32) ELSE
      rRam3_ram_demux_yreg(16);
  
  rRam3_ram_demux_ytmp(17) <= rd_data_unsigned_1 WHEN rRam3_ram_demux_ctr1 = to_signed(16#00000012#, 32) ELSE
      rRam3_ram_demux_yreg(17);
  rRam3_ram_demux_yreg_next(0) <= rRam3_ram_demux_ytmp(0);
  rd_data_overclock18_2(0) <= rRam3_ram_demux_ytmp(0);
  rRam3_ram_demux_yreg_next(1) <= rRam3_ram_demux_ytmp(1);
  rd_data_overclock18_2(1) <= rRam3_ram_demux_ytmp(1);
  rRam3_ram_demux_yreg_next(2) <= rRam3_ram_demux_ytmp(2);
  rd_data_overclock18_2(2) <= rRam3_ram_demux_ytmp(2);
  rRam3_ram_demux_yreg_next(3) <= rRam3_ram_demux_ytmp(3);
  rd_data_overclock18_2(3) <= rRam3_ram_demux_ytmp(3);
  rRam3_ram_demux_yreg_next(4) <= rRam3_ram_demux_ytmp(4);
  rd_data_overclock18_2(4) <= rRam3_ram_demux_ytmp(4);
  rRam3_ram_demux_yreg_next(5) <= rRam3_ram_demux_ytmp(5);
  rd_data_overclock18_2(5) <= rRam3_ram_demux_ytmp(5);
  rRam3_ram_demux_yreg_next(6) <= rRam3_ram_demux_ytmp(6);
  rd_data_overclock18_2(6) <= rRam3_ram_demux_ytmp(6);
  rRam3_ram_demux_yreg_next(7) <= rRam3_ram_demux_ytmp(7);
  rd_data_overclock18_2(7) <= rRam3_ram_demux_ytmp(7);
  rRam3_ram_demux_yreg_next(8) <= rRam3_ram_demux_ytmp(8);
  rd_data_overclock18_2(8) <= rRam3_ram_demux_ytmp(8);
  rRam3_ram_demux_yreg_next(9) <= rRam3_ram_demux_ytmp(9);
  rd_data_overclock18_2(9) <= rRam3_ram_demux_ytmp(9);
  rRam3_ram_demux_yreg_next(10) <= rRam3_ram_demux_ytmp(10);
  rd_data_overclock18_2(10) <= rRam3_ram_demux_ytmp(10);
  rRam3_ram_demux_yreg_next(11) <= rRam3_ram_demux_ytmp(11);
  rd_data_overclock18_2(11) <= rRam3_ram_demux_ytmp(11);
  rRam3_ram_demux_yreg_next(12) <= rRam3_ram_demux_ytmp(12);
  rd_data_overclock18_2(12) <= rRam3_ram_demux_ytmp(12);
  rRam3_ram_demux_yreg_next(13) <= rRam3_ram_demux_ytmp(13);
  rd_data_overclock18_2(13) <= rRam3_ram_demux_ytmp(13);
  rRam3_ram_demux_yreg_next(14) <= rRam3_ram_demux_ytmp(14);
  rd_data_overclock18_2(14) <= rRam3_ram_demux_ytmp(14);
  rRam3_ram_demux_yreg_next(15) <= rRam3_ram_demux_ytmp(15);
  rd_data_overclock18_2(15) <= rRam3_ram_demux_ytmp(15);
  rRam3_ram_demux_yreg_next(16) <= rRam3_ram_demux_ytmp(16);
  rd_data_overclock18_2(16) <= rRam3_ram_demux_ytmp(16);
  rRam3_ram_demux_yreg_next(17) <= rRam3_ram_demux_ytmp(17);
  rd_data_overclock18_2(17) <= rRam3_ram_demux_ytmp(17);

  rd_data_downsample18_bypass_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_data_downsample18_bypass_reg_2 <= (OTHERS => to_unsigned(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_1 = '1' THEN
        rd_data_downsample18_bypass_reg_2 <= rd_data_overclock18_2;
      END IF;
    END IF;
  END PROCESS rd_data_downsample18_bypass_2_process;

  
  rd_data_5 <= rd_data_overclock18_2 WHEN enb_1_18_1 = '1' ELSE
      rd_data_downsample18_bypass_reg_2;

  rRam3 <= rd_data_5(7);

  rRam3_1 <= rd_data_5(11);

  rRam3_2 <= rd_data_5(6);

  rRam3_3 <= rd_data_5(17);

  rRam3_4 <= rd_data_5(8);

  rRam3_5 <= rd_data_5(16);

  rRam3_6 <= rd_data_5(9);

  rRam3_7 <= rd_data_5(15);

  rRam3_8 <= rd_data_5(10);

  rRam3_9 <= rd_data_5(1);

  rRam3_10 <= rd_data_5(13);

  rRam3_11 <= rd_data_5(2);

  rRam3_12 <= rd_data_5(14);

  rRam3_13 <= rd_data_5(3);

  rRam3_14 <= rd_data_5(12);

  rRam3_15 <= rd_data_5(4);

  rRam3_16 <= rd_data_5(5);

  p299inb5_mul_temp <= rRam3_16 * to_unsigned(16#2A8D#, 14);
  inb5 <= resize(p299inb5_mul_temp(27 DOWNTO 15), 14);

  p15_output : PROCESS (g_17, inb5, rRam3, rRam3_1, rRam3_10, rRam3_11, rRam3_12, rRam3_13, rRam3_14,
       rRam3_15, rRam3_2, rRam3_3, rRam3_4, rRam3_5, rRam3_6, rRam3_7, rRam3_8,
       rRam3_9)
    VARIABLE inb51 : unsigned(13 DOWNTO 0);
    VARIABLE inb3_P : unsigned(13 DOWNTO 0);
    VARIABLE inb3_N : unsigned(13 DOWNTO 0);
    VARIABLE k_04 : unsigned(3 DOWNTO 0);
    VARIABLE inb3_p_0 : unsigned(13 DOWNTO 0);
    VARIABLE inb3_n_0 : unsigned(13 DOWNTO 0);
    VARIABLE inb3_p_1 : unsigned(13 DOWNTO 0);
    VARIABLE inb3_n_1 : unsigned(13 DOWNTO 0);
    VARIABLE inb3_p_2 : unsigned(13 DOWNTO 0);
    VARIABLE inb3_n_2 : unsigned(13 DOWNTO 0);
    VARIABLE inb3_p_3 : unsigned(13 DOWNTO 0);
    VARIABLE inb3_n_3 : unsigned(13 DOWNTO 0);
    VARIABLE inb3_p_4 : unsigned(13 DOWNTO 0);
    VARIABLE inb3_n_4 : unsigned(13 DOWNTO 0);
    VARIABLE inb3_p_5 : unsigned(13 DOWNTO 0);
    VARIABLE inb3_n_5 : unsigned(13 DOWNTO 0);
    VARIABLE inb3_p_6 : unsigned(13 DOWNTO 0);
    VARIABLE inb3_n_6 : unsigned(13 DOWNTO 0);
    VARIABLE inb3_p_7 : unsigned(13 DOWNTO 0);
    VARIABLE inb3_n_7 : unsigned(13 DOWNTO 0);
    VARIABLE add_temp4 : vector_of_signed32(0 TO 7);
    VARIABLE add_cast4 : vector_of_unsigned31(0 TO 7);
    VARIABLE add_cast_04 : vector_of_unsigned15(0 TO 7);
    VARIABLE add_cast_13 : vector_of_unsigned15(0 TO 7);
    VARIABLE add_temp_04 : vector_of_unsigned15(0 TO 7);
    VARIABLE add_temp_14 : vector_of_unsigned5(0 TO 7);
    VARIABLE sub_cast4 : vector_of_signed32(0 TO 7);
    VARIABLE cast3 : vector_of_unsigned14(0 TO 7);
    VARIABLE mul_temp4 : vector_of_unsigned29(0 TO 7);
    VARIABLE add_cast_23 : vector_of_unsigned31(0 TO 7);
    VARIABLE add_temp_23 : vector_of_unsigned31(0 TO 7);
  BEGIN
    inb3_N := to_unsigned(16#0000#, 14);
    inb3_P := to_unsigned(16#0000#, 14);
    inb51 := inb5;

    FOR k4 IN 0 TO 7 LOOP
      add_temp4(k4) := to_signed(k4 + 1, 32);
      k_04 := unsigned(add_temp4(k4)(3 DOWNTO 0));
      IF k_04 = to_unsigned(16#8#, 4) THEN 
        inb3_n_0 := rRam3;
        inb3_p_0 := rRam3_1;
      ELSE 
        inb3_n_0 := inb3_N;
        inb3_p_0 := inb3_P;
      END IF;
      IF k_04 = to_unsigned(16#7#, 4) THEN 
        inb3_n_1 := rRam3_2;
        inb3_p_1 := rRam3_3;
      ELSE 
        inb3_n_1 := inb3_n_0;
        inb3_p_1 := inb3_p_0;
      END IF;
      IF k_04 = to_unsigned(16#6#, 4) THEN 
        inb3_n_2 := rRam3_4;
        inb3_p_2 := rRam3_5;
      ELSE 
        inb3_n_2 := inb3_n_1;
        inb3_p_2 := inb3_p_1;
      END IF;
      IF k_04 = to_unsigned(16#5#, 4) THEN 
        inb3_n_3 := rRam3_6;
        inb3_p_3 := rRam3_7;
      ELSE 
        inb3_n_3 := inb3_n_2;
        inb3_p_3 := inb3_p_2;
      END IF;
      IF k_04 = to_unsigned(16#4#, 4) THEN 
        inb3_n_4 := rRam3_8;
        inb3_p_4 := rRam3_9;
      ELSE 
        inb3_n_4 := inb3_n_3;
        inb3_p_4 := inb3_p_3;
      END IF;
      IF k_04 = to_unsigned(16#3#, 4) THEN 
        inb3_n_5 := rRam3_10;
        inb3_p_5 := rRam3_11;
      ELSE 
        inb3_n_5 := inb3_n_4;
        inb3_p_5 := inb3_p_4;
      END IF;
      IF k_04 = to_unsigned(16#2#, 4) THEN 
        inb3_n_6 := rRam3_12;
        inb3_p_6 := rRam3_13;
      ELSE 
        inb3_n_6 := inb3_n_5;
        inb3_p_6 := inb3_p_5;
      END IF;
      IF k_04 = to_unsigned(16#1#, 4) THEN 
        inb3_n_7 := rRam3_14;
        inb3_p_7 := rRam3_15;
      ELSE 
        inb3_n_7 := inb3_n_6;
        inb3_p_7 := inb3_p_6;
      END IF;
      inb3_N := inb3_n_7;
      inb3_P := inb3_p_7;
      add_cast4(k4) := resize(inb51 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 31);
      add_cast_04(k4) := resize(inb3_p_7, 15);
      add_cast_13(k4) := resize(inb3_n_7, 15);
      add_temp_04(k4) := add_cast_04(k4) + add_cast_13(k4);
      add_temp_14(k4) := resize(k_04, 5) + to_unsigned(16#09#, 5);
      sub_cast4(k4) := signed(resize(add_temp_14(k4), 32));
      cast3(k4) := g_17(to_integer(sub_cast4(k4) - 1))(12 DOWNTO 0) & '0';
      mul_temp4(k4) := add_temp_04(k4) * cast3(k4);
      add_cast_23(k4) := resize(mul_temp4(k4), 31);
      add_temp_23(k4) := add_cast4(k4) + add_cast_23(k4);
      inb51 := add_temp_23(k4)(29 DOWNTO 16);
    END LOOP;

    inb5_1 <= inb51;
  END PROCESS p15_output;


  p9drow_4_cast <= signed(resize(inb1_1, 15));
  p9drow_4_mul_temp <= p9drow_4_cast * to_signed(-16#1639#, 14);
  p9drow_4_add_cast <= p9drow_4_mul_temp(27 DOWNTO 0);
  p9drow_4_add_cast_1 <= resize(p9drow_4_add_cast & '0', 31);
  p9drow_4_mul_temp_1 <= inb5_1 * to_unsigned(16#3DB8#, 14);
  p9drow_4_add_cast_2 <= signed(resize(p9drow_4_mul_temp_1, 31));
  p9drow_4_add_temp <= p9drow_4_add_cast_1 + p9drow_4_add_cast_2;
  drow_4_1 <= p9drow_4_add_temp(26 DOWNTO 13);

  delayMatch_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      drow_4_tmp <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        drow_4_tmp <= drow_4_1;
      END IF;
    END IF;
  END PROCESS delayMatch_3_process;


  drow_4 <= std_logic_vector(drow_4_tmp);

  p14_output : PROCESS (inb2_N_1, inb2_P_1, rRam2, rRam2_1, rRam2_10, rRam2_11, rRam2_12, rRam2_13,
       rRam2_14, rRam2_15, rRam2_2, rRam2_3, rRam2_4, rRam2_5, rRam2_6, rRam2_7,
       rRam2_8, rRam2_9, xg_17)
    VARIABLE inb6 : signed(13 DOWNTO 0);
    VARIABLE inb2_P2 : signed(13 DOWNTO 0);
    VARIABLE inb2_N2 : signed(13 DOWNTO 0);
    VARIABLE k_05 : unsigned(3 DOWNTO 0);
    VARIABLE inb2_p_01 : signed(13 DOWNTO 0);
    VARIABLE inb2_n_01 : signed(13 DOWNTO 0);
    VARIABLE inb2_p_12 : signed(13 DOWNTO 0);
    VARIABLE inb2_n_12 : signed(13 DOWNTO 0);
    VARIABLE inb2_p_21 : signed(13 DOWNTO 0);
    VARIABLE inb2_n_21 : signed(13 DOWNTO 0);
    VARIABLE inb2_p_31 : signed(13 DOWNTO 0);
    VARIABLE inb2_n_31 : signed(13 DOWNTO 0);
    VARIABLE inb2_p_41 : signed(13 DOWNTO 0);
    VARIABLE inb2_n_41 : signed(13 DOWNTO 0);
    VARIABLE inb2_p_51 : signed(13 DOWNTO 0);
    VARIABLE inb2_n_51 : signed(13 DOWNTO 0);
    VARIABLE inb2_p_61 : signed(13 DOWNTO 0);
    VARIABLE inb2_n_61 : signed(13 DOWNTO 0);
    VARIABLE inb2_p_71 : signed(13 DOWNTO 0);
    VARIABLE inb2_n_71 : signed(13 DOWNTO 0);
    VARIABLE add_temp5 : vector_of_signed32(0 TO 7);
    VARIABLE add_cast5 : vector_of_signed30(0 TO 7);
    VARIABLE sub_cast5 : vector_of_signed15(0 TO 7);
    VARIABLE sub_cast_01 : vector_of_signed15(0 TO 7);
    VARIABLE sub_temp1 : vector_of_signed15(0 TO 7);
    VARIABLE add_temp_05 : vector_of_unsigned5(0 TO 7);
    VARIABLE sub_cast_11 : vector_of_signed32(0 TO 7);
    VARIABLE mul_temp5 : vector_of_signed29(0 TO 7);
    VARIABLE add_cast_05 : vector_of_signed30(0 TO 7);
    VARIABLE add_temp_15 : vector_of_signed30(0 TO 7);
  BEGIN
    inb2_N2 := inb2_N_1;
    inb2_P2 := inb2_P_1;
    inb6 := to_signed(16#0000#, 14);

    FOR k5 IN 0 TO 7 LOOP
      add_temp5(k5) := to_signed(k5 + 1, 32);
      k_05 := unsigned(add_temp5(k5)(3 DOWNTO 0));
      IF k_05 = to_unsigned(16#8#, 4) THEN 
        inb2_n_01 := rRam2;
        inb2_p_01 := rRam2_1;
      ELSE 
        inb2_n_01 := inb2_N2;
        inb2_p_01 := inb2_P2;
      END IF;
      IF k_05 = to_unsigned(16#7#, 4) THEN 
        inb2_n_12 := rRam2_2;
        inb2_p_12 := rRam2_3;
      ELSE 
        inb2_n_12 := inb2_n_01;
        inb2_p_12 := inb2_p_01;
      END IF;
      IF k_05 = to_unsigned(16#6#, 4) THEN 
        inb2_n_21 := rRam2_4;
        inb2_p_21 := rRam2_5;
      ELSE 
        inb2_n_21 := inb2_n_12;
        inb2_p_21 := inb2_p_12;
      END IF;
      IF k_05 = to_unsigned(16#5#, 4) THEN 
        inb2_n_31 := rRam2_6;
        inb2_p_31 := rRam2_7;
      ELSE 
        inb2_n_31 := inb2_n_21;
        inb2_p_31 := inb2_p_21;
      END IF;
      IF k_05 = to_unsigned(16#4#, 4) THEN 
        inb2_n_41 := rRam2_8;
        inb2_p_41 := rRam2_9;
      ELSE 
        inb2_n_41 := inb2_n_31;
        inb2_p_41 := inb2_p_31;
      END IF;
      IF k_05 = to_unsigned(16#3#, 4) THEN 
        inb2_n_51 := rRam2_10;
        inb2_p_51 := rRam2_11;
      ELSE 
        inb2_n_51 := inb2_n_41;
        inb2_p_51 := inb2_p_41;
      END IF;
      IF k_05 = to_unsigned(16#2#, 4) THEN 
        inb2_n_61 := rRam2_12;
        inb2_p_61 := rRam2_13;
      ELSE 
        inb2_n_61 := inb2_n_51;
        inb2_p_61 := inb2_p_51;
      END IF;
      IF k_05 = to_unsigned(16#1#, 4) THEN 
        inb2_n_71 := rRam2_14;
        inb2_p_71 := rRam2_15;
      ELSE 
        inb2_n_71 := inb2_n_61;
        inb2_p_71 := inb2_p_61;
      END IF;
      inb2_N2 := inb2_n_71;
      inb2_P2 := inb2_p_71;
      add_cast5(k5) := resize(inb6 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 30);
      sub_cast5(k5) := resize(inb2_p_71, 15);
      sub_cast_01(k5) := resize(inb2_n_71, 15);
      sub_temp1(k5) := sub_cast5(k5) - sub_cast_01(k5);
      add_temp_05(k5) := resize(k_05, 5) + to_unsigned(16#09#, 5);
      sub_cast_11(k5) := signed(resize(add_temp_05(k5), 32));
      mul_temp5(k5) := sub_temp1(k5) * xg_17(to_integer(sub_cast_11(k5) - 1));
      add_cast_05(k5) := resize(mul_temp5(k5), 30);
      add_temp_15(k5) := add_cast5(k5) + add_cast_05(k5);
      inb6 := add_temp_15(k5)(28 DOWNTO 15);
    END LOOP;

    inb6_1 <= inb6;
  END PROCESS p14_output;


  p8drow_5_mul_temp <= inb6_1 * to_signed(16#3DBC#, 15);
  p8drow_5_cast <= p8drow_5_mul_temp(27 DOWNTO 0);
  drow_5_1 <= p8drow_5_cast(27 DOWNTO 14);

  delayMatch_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      drow_5_tmp <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_18_0 = '1' THEN
        drow_5_tmp <= drow_5_1;
      END IF;
    END IF;
  END PROCESS delayMatch_4_process;


  drow_5 <= std_logic_vector(drow_5_tmp);

  ce_out <= enb_1_18_1;

END rtl;

